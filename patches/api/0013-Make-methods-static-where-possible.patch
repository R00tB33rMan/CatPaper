From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 03:10:32 -0500
Subject: [PATCH] Make methods static where possible


diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
index 9fa3734cd8a8b89d99ba028d2bcfb2ed30440d4d..1466e2634d21af543174c1f688df9ffe49416b61 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
@@ -88,7 +88,7 @@ public class PlayerJumpEvent extends PlayerEvent implements Cancellable {
         return to;
     }
 
-    private void validateLocation(@NotNull Location loc) {
+    private static void validateLocation(@NotNull Location loc) {
         Preconditions.checkArgument(loc != null, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use location with null world!");
     }
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
index 245d56ba7e8e37e3555b606f5e85fc663897f62b..f1046a1dd130dd0d4a0fffb5eb3a1159d43a4473 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
@@ -125,7 +125,7 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
         return from.getPitch() != to.getPitch() || from.getYaw() != to.getYaw();
     }
 
-    private void validateLocation(@NotNull Location loc) {
+    private static void validateLocation(@NotNull Location loc) {
         Preconditions.checkArgument(loc != null, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
     }
diff --git a/src/main/java/io/papermc/paper/tag/BaseTag.java b/src/main/java/io/papermc/paper/tag/BaseTag.java
index a82227ad755111c01f320ea19ccf87d35c21d3f1..8e41d961947f7cf9b57351cd7e79099dc5f02c51 100644
--- a/src/main/java/io/papermc/paper/tag/BaseTag.java
+++ b/src/main/java/io/papermc/paper/tag/BaseTag.java
@@ -41,7 +41,7 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
         this.globalPredicates = Lists.newArrayList(globalPredicates);
     }
 
-    private <E> @NotNull Set<E> createEnumSet(@NotNull Class<E> enumClass) {
+    private static <E> @NotNull Set<E> createEnumSet(@NotNull Class<E> enumClass) {
         assert enumClass.isEnum();
         return (Set<E>) EnumSet.noneOf((Class<Enum>) enumClass);
     }
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index fa272d950b3f5febad2d4c687323e17afc612f80..dbcf1739c8659b374ab2bbb6e76dd5263901f39d 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -7,7 +7,6 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
 import org.bukkit.GameRule;
 import org.bukkit.Location;
 import org.bukkit.Server;
@@ -94,7 +93,7 @@ public abstract class Command {
     }
 
     @NotNull
-    private List<String> tabComplete0(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args, @Nullable Location location) throws IllegalArgumentException {
+    private static List<String> tabComplete0(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args, @Nullable Location location) throws IllegalArgumentException {
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
         Preconditions.checkArgument(args != null, "Arguments cannot be null");
         Preconditions.checkArgument(alias != null, "Alias cannot be null");
diff --git a/src/main/java/org/bukkit/command/FormattedCommandAlias.java b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
index aeac65d883a7f650ad145871e88f114edbf0f7c6..1d98745927df4ad847fbf0efc09dcf410eb25cfc 100644
--- a/src/main/java/org/bukkit/command/FormattedCommandAlias.java
+++ b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
@@ -40,7 +40,7 @@ public class FormattedCommandAlias extends Command {
         return result;
     }
 
-    private @NotNull String buildCommand(@NotNull CommandSender sender, @NotNull String formatString, @NotNull String @NotNull [] args) { // Paper
+    private static @NotNull String buildCommand(@NotNull CommandSender sender, @NotNull String formatString, @NotNull String @NotNull [] args) { // Paper
         if (formatString.contains("$sender")) { // Paper
             formatString = formatString.replaceAll(Pattern.quote("$sender"), Matcher.quoteReplacement(sender.getName())); // Paper
         } // Paper
diff --git a/src/main/java/org/bukkit/command/defaults/HelpCommand.java b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
index cd8544b881d6e0393bef3af8135323ebb2e4f4c0..c9607878844fea46c20682e3f4b9998f13083cf8 100644
--- a/src/main/java/org/bukkit/command/defaults/HelpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
@@ -135,7 +135,7 @@ public class HelpCommand extends BukkitCommand {
     }
 
     @Nullable
-    protected HelpTopic findPossibleMatches(@NotNull String searchString) {
+    protected static HelpTopic findPossibleMatches(@NotNull String searchString) {
         int maxDistance = (searchString.length() / 5) + 3;
         Set<HelpTopic> possibleMatches = new TreeSet<HelpTopic>(HelpTopicComparator.helpTopicComparatorInstance());
 
diff --git a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
index c479dc290c7c0028ff7be617a428f81982d69535..eb7e41bec72e08cab8129636628399f0b3bb3587 100644
--- a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
@@ -1,6 +1,5 @@
 package org.bukkit.command.defaults;
 
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -36,7 +35,7 @@ public class PluginsCommand extends BukkitCommand {
     }
 
     @NotNull
-    private String getPluginList() {
+    private static String getPluginList() {
         // Paper start
         TreeMap<String, Plugin> plugins = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
 
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index 694495b753ffbc1d4750d02852f18ded359b6e0b..31e0720d59cfe6938fcc49a94ee42e3f1fd7db47 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -115,7 +115,7 @@ public class VersionCommand extends BukkitCommand {
     }
 
     @NotNull
-    private String getNameList(@NotNull final List<String> names) {
+    private static String getNameList(@NotNull final List<String> names) {
         StringBuilder result = new StringBuilder();
 
         for (int i = 0; i < names.size(); i++) {
diff --git a/src/main/java/org/bukkit/configuration/MemorySection.java b/src/main/java/org/bukkit/configuration/MemorySection.java
index 36e83de4be9a879b5e61d28feaae88c06317ee3c..480c172d710e6ecf5a1d5e734b6597bd0b24ff41 100644
--- a/src/main/java/org/bukkit/configuration/MemorySection.java
+++ b/src/main/java/org/bukkit/configuration/MemorySection.java
@@ -847,7 +847,7 @@ public class MemorySection implements ConfigurationSection {
         return val instanceof ConfigurationSection;
     }
 
-    protected boolean isPrimitiveWrapper(@Nullable Object input) {
+    protected static boolean isPrimitiveWrapper(@Nullable Object input) {
         return input instanceof Integer || input instanceof Boolean
                 || input instanceof Character || input instanceof Byte
                 || input instanceof Short || input instanceof Double
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
index 70284de18dfe3f72ef2f84029f2dfb68c6568d5e..ce6120b7252bf46ead507c802f920ee0ded45c4e 100644
--- a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
@@ -210,7 +210,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      */
     @NotNull
     @Deprecated
-    protected String buildHeader() {
+    protected static String buildHeader() {
         return "";
     }
 
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
index cbed5d61aa6f1df599d5dcba0e00ef645e3276e9..c96b74467d8391e87dd823cdfeac9027d2529060 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
@@ -124,7 +124,7 @@ public class YamlConfiguration extends FileConfiguration {
      *
      * @param node The root node of the yaml object
      */
-    private void adjustNodeComments(final @NotNull MappingNode node) {
+    private static void adjustNodeComments(final @NotNull MappingNode node) {
         if (node.getBlockComments() == null && !node.getValue().isEmpty()) {
             Node firstNode = node.getValue().get(0).getKeyNode();
             List<CommentLine> lines = firstNode.getBlockComments();
@@ -169,7 +169,7 @@ public class YamlConfiguration extends FileConfiguration {
         }
     }
 
-    private boolean hasSerializedTypeKey(@NotNull MappingNode node) {
+    private static boolean hasSerializedTypeKey(@NotNull MappingNode node) {
         for (NodeTuple nodeTuple : node.getValue()) {
             Node keyNode = nodeTuple.getKeyNode();
             if (!(keyNode instanceof ScalarNode)) continue;
@@ -204,7 +204,7 @@ public class YamlConfiguration extends FileConfiguration {
         return new MappingNode(Tag.MAP, nodeTuples, DumperOptions.FlowStyle.BLOCK);
     }
 
-    private @NotNull List<String> getCommentLines(@Nullable List<CommentLine> comments) {
+    private static @NotNull List<String> getCommentLines(@Nullable List<CommentLine> comments) {
         List<String> lines = new ArrayList<>();
         if (comments != null) {
             for (CommentLine comment : comments) {
@@ -220,7 +220,7 @@ public class YamlConfiguration extends FileConfiguration {
         return lines;
     }
 
-    private @NotNull List<CommentLine> getCommentLines(@NotNull List<String> comments, CommentType commentType) {
+    private static @NotNull List<CommentLine> getCommentLines(@NotNull List<String> comments, CommentType commentType) {
         List<CommentLine> lines = new ArrayList<CommentLine>();
         for (String comment : comments) {
             if (comment == null) {
@@ -242,7 +242,7 @@ public class YamlConfiguration extends FileConfiguration {
      * @param header The list of heading comments
      * @return The modified list
      */
-    private @NotNull List<String> loadHeader(@NotNull List<String> header) {
+    private static @NotNull List<String> loadHeader(@NotNull List<String> header) {
         LinkedList<String> list = new LinkedList<>(header);
 
         if (!list.isEmpty()) {
@@ -263,7 +263,7 @@ public class YamlConfiguration extends FileConfiguration {
      * @param header The list of heading comments
      * @return The modified list
      */
-    private @NotNull List<String> saveHeader(@NotNull List<String> header) {
+    private static @NotNull List<String> saveHeader(@NotNull List<String> header) {
         LinkedList<String> list = new LinkedList<>(header);
 
         if (!list.isEmpty()) {
diff --git a/src/main/java/org/bukkit/conversations/NumericPrompt.java b/src/main/java/org/bukkit/conversations/NumericPrompt.java
index 67134fa384d8f2d45c7f9a4d1d9045c14ec803ee..cd17cc8460b74f9fc3b54d75d2981f6354f9a8a0 100644
--- a/src/main/java/org/bukkit/conversations/NumericPrompt.java
+++ b/src/main/java/org/bukkit/conversations/NumericPrompt.java
@@ -26,7 +26,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * @param input The number the player provided.
      * @return The validity of the player's input.
      */
-    protected boolean isNumberValid(@NotNull ConversationContext context, @NotNull Number input) {
+    protected static boolean isNumberValid(@NotNull ConversationContext context, @NotNull Number input) {
         return true;
     }
 
@@ -70,7 +70,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * @return A message explaining how to correct the input.
      */
     @Nullable
-    protected String getInputNotNumericText(@NotNull ConversationContext context, @NotNull String invalidInput) {
+    protected static String getInputNotNumericText(@NotNull ConversationContext context, @NotNull String invalidInput) {
         return null;
     }
 
@@ -83,7 +83,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * @return A message explaining how to correct the input.
      */
     @Nullable
-    protected String getFailedValidationText(@NotNull ConversationContext context, @NotNull Number invalidInput) {
+    protected static String getFailedValidationText(@NotNull ConversationContext context, @NotNull Number invalidInput) {
         return null;
     }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
index 5f328b4f82655a064715f0386ca79d201615a273..a8d75d6bf773380257d56ffcaff92556a475b753 100644
--- a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
@@ -140,7 +140,7 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
     }
     // Paper end
 
-    private void validateLocation(@NotNull Location loc) {
+    private static void validateLocation(@NotNull Location loc) {
         Preconditions.checkArgument(loc != null, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
     }
diff --git a/src/main/java/org/bukkit/generator/ChunkGenerator.java b/src/main/java/org/bukkit/generator/ChunkGenerator.java
index ab972330f6219fae8d1d443b36dd9b04df22d777..f48a73f51956740f76d500857d4e8ba37c2b5cfc 100644
--- a/src/main/java/org/bukkit/generator/ChunkGenerator.java
+++ b/src/main/java/org/bukkit/generator/ChunkGenerator.java
@@ -176,7 +176,7 @@ public abstract class ChunkGenerator {
      * @return BiomeProvider to use to fill the biomes of a chunk
      */
     @Nullable
-    public BiomeProvider getDefaultBiomeProvider(@NotNull WorldInfo worldInfo) {
+    public static BiomeProvider getDefaultBiomeProvider(@NotNull WorldInfo worldInfo) {
         return null;
     }
 
@@ -203,7 +203,7 @@ public abstract class ChunkGenerator {
      * @param heightMap From the highest block should be get
      * @return The y coordinate of the highest block at the given location
      */
-    public int getBaseHeight(@NotNull WorldInfo worldInfo, @NotNull Random random, int x, int z, @NotNull HeightMap heightMap) {
+    public static int getBaseHeight(@NotNull WorldInfo worldInfo, @NotNull Random random, int x, int z, @NotNull HeightMap heightMap) {
         throw new UnsupportedOperationException("Not implemented");
     }
 
@@ -290,7 +290,7 @@ public abstract class ChunkGenerator {
      */
     @NotNull
     @Deprecated
-    public ChunkData generateChunkData(@NotNull World world, @NotNull Random random, int x, int z, @NotNull BiomeGrid biome) {
+    public static ChunkData generateChunkData(@NotNull World world, @NotNull Random random, int x, int z, @NotNull BiomeGrid biome) {
         throw new UnsupportedOperationException("Not implemented, no longer needed");
     }
 
@@ -302,7 +302,7 @@ public abstract class ChunkGenerator {
      */
     @NotNull
     @Deprecated
-    protected final ChunkData createChunkData(@NotNull World world) {
+    protected static ChunkData createChunkData(@NotNull World world) {
         return Bukkit.getServer().createChunkData(world);
     }
 
@@ -314,7 +314,7 @@ public abstract class ChunkGenerator {
      * @param z Z-coordinate of the block to test
      * @return true if the location is valid, otherwise false
      */
-    public boolean canSpawn(@NotNull World world, int x, int z) {
+    public static boolean canSpawn(@NotNull World world, int x, int z) {
         Block highest = world.getBlockAt(x, world.getHighestBlockYAt(x, z), z);
 
         switch (world.getEnvironment()) {
@@ -336,7 +336,7 @@ public abstract class ChunkGenerator {
      * @return List containing any amount of BlockPopulators
      */
     @NotNull
-    public List<BlockPopulator> getDefaultPopulators(@NotNull World world) {
+    public static List<BlockPopulator> getDefaultPopulators(@NotNull World world) {
         return new ArrayList<BlockPopulator>();
     }
 
@@ -351,7 +351,7 @@ public abstract class ChunkGenerator {
      * @return Location containing a new spawn point, otherwise null
      */
     @Nullable
-    public Location getFixedSpawnLocation(@NotNull World world, @NotNull Random random) {
+    public static Location getFixedSpawnLocation(@NotNull World world, @NotNull Random random) {
         return null;
     }
 
@@ -364,7 +364,7 @@ public abstract class ChunkGenerator {
      * @deprecated the chunk generation code should be thread safe
      */
     @Deprecated
-    public boolean isParallelCapable() {
+    public static boolean isParallelCapable() {
         return false;
     }
 
@@ -376,7 +376,7 @@ public abstract class ChunkGenerator {
      *
      * @return true if the server should generate Vanilla noise
      */
-    public boolean shouldGenerateNoise() {
+    public static boolean shouldGenerateNoise() {
         return false;
     }
 
@@ -389,7 +389,7 @@ public abstract class ChunkGenerator {
      *
      * @return true if the server should generate Vanilla surface
      */
-    public boolean shouldGenerateSurface() {
+    public static boolean shouldGenerateSurface() {
         return false;
     }
 
@@ -404,7 +404,7 @@ public abstract class ChunkGenerator {
      * @deprecated has no effect, bedrock generation is part of the surface step, see {@link #shouldGenerateSurface()}
      */
     @Deprecated
-    public boolean shouldGenerateBedrock() {
+    public static boolean shouldGenerateBedrock() {
         return false;
     }
 
@@ -416,7 +416,7 @@ public abstract class ChunkGenerator {
      *
      * @return true if the server should generate Vanilla caves
      */
-    public boolean shouldGenerateCaves() {
+    public static boolean shouldGenerateCaves() {
         return false;
     }
 
@@ -429,7 +429,7 @@ public abstract class ChunkGenerator {
      *
      * @return true if the server should generate Vanilla decorations
      */
-    public boolean shouldGenerateDecorations() {
+    public static boolean shouldGenerateDecorations() {
         return false;
     }
 
@@ -439,7 +439,7 @@ public abstract class ChunkGenerator {
      *
      * @return true if the server should generate Vanilla mobs
      */
-    public boolean shouldGenerateMobs() {
+    public static boolean shouldGenerateMobs() {
         return false;
     }
 
@@ -449,7 +449,7 @@ public abstract class ChunkGenerator {
      *
      * @return true if the server should generate Vanilla structures
      */
-    public boolean shouldGenerateStructures() {
+    public static boolean shouldGenerateStructures() {
         return false;
     }
 
@@ -464,7 +464,7 @@ public abstract class ChunkGenerator {
      *
      */
     @NotNull
-    public ChunkData createVanillaChunkData(@NotNull World world, int x, int z) {
+    public static ChunkData createVanillaChunkData(@NotNull World world, int x, int z) {
         return Bukkit.getServer().createVanillaChunkData(world, x, z);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/help/HelpTopic.java b/src/main/java/org/bukkit/help/HelpTopic.java
index a3d57946346de4b27c733b33c02887a8ebee9ff6..23ecbac0edf15716b7fcf88b70a928687cebbda5 100644
--- a/src/main/java/org/bukkit/help/HelpTopic.java
+++ b/src/main/java/org/bukkit/help/HelpTopic.java
@@ -117,7 +117,7 @@ public abstract class HelpTopic {
      *     according to the expected rules of amendTopic().
      */
     @NotNull
-    protected String applyAmendment(@NotNull String baseText, @Nullable String amendment) {
+    protected static String applyAmendment(@NotNull String baseText, @Nullable String amendment) {
         if (amendment == null) {
             return baseText;
         } else {
diff --git a/src/main/java/org/bukkit/help/IndexHelpTopic.java b/src/main/java/org/bukkit/help/IndexHelpTopic.java
index 143eba81a5c5a548c242062bebdc93c034a184dd..f6d65302f0404a1fb2e4908dcef42180aeb4513e 100644
--- a/src/main/java/org/bukkit/help/IndexHelpTopic.java
+++ b/src/main/java/org/bukkit/help/IndexHelpTopic.java
@@ -106,7 +106,7 @@ public class IndexHelpTopic extends HelpTopic {
      * @return The rendered index line.
      */
     @NotNull
-    protected String buildIndexLine(@NotNull CommandSender sender, @NotNull HelpTopic topic) {
+    protected static String buildIndexLine(@NotNull CommandSender sender, @NotNull HelpTopic topic) {
         StringBuilder line = new StringBuilder();
         line.append(ChatColor.GOLD);
         line.append(topic.getName());
diff --git a/src/main/java/org/bukkit/material/Door.java b/src/main/java/org/bukkit/material/Door.java
index ef5b77f7f1b2bfa741e204e836cd4d3549ff5268..96f2438ed503e49c72f1a2dbe229559e792be08f 100644
--- a/src/main/java/org/bukkit/material/Door.java
+++ b/src/main/java/org/bukkit/material/Door.java
@@ -240,7 +240,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @deprecated This method should not be used; use hinge and facing accessors instead.
      */
     @Deprecated
-    public @NotNull BlockFace getHingeCorner() {
+    public static @NotNull BlockFace getHingeCorner() {
         return BlockFace.SELF;
     }
 
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
index cf3428c2f0c3ef033ade9e07e240b094b39b5d26..fb9ec3b6c041045d9cff7b22338606fd913d4e2c 100644
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
@@ -1254,7 +1254,7 @@ public final class PluginDescriptionFile {
     }
 
     @NotNull
-    private Map<?, ?> asMap(@NotNull Object object) throws InvalidDescriptionException {
+    private static Map<?, ?> asMap(@NotNull Object object) throws InvalidDescriptionException {
         if (object instanceof Map) {
             return (Map<?, ?>) object;
         }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index d6b45f96841ce956fb8092228ddc14147c88fc17..e4b52a41082026710adf333eaee92e9065503828 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -36,7 +36,6 @@ import org.bukkit.event.Listener;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
-import org.bukkit.util.FileUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -755,7 +754,7 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @NotNull
-    private Class<? extends Event> getRegistrationClass(@NotNull Class<? extends Event> clazz) {
+    private static Class<? extends Event> getRegistrationClass(@NotNull Class<? extends Event> clazz) {
         try {
             clazz.getDeclaredMethod("getHandlerList");
             return clazz;
@@ -959,7 +958,7 @@ public final class SimplePluginManager implements PluginManager {
      *
      * @param use True if per event timing code should be used
      */
-    public void useTimings(boolean use) {
+    public static void useTimings(boolean use) {
         co.aikar.timings.Timings.setTimingsEnabled(use); // Paper
     }
 
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 0caca8466cb5a806cb540fc14d1814dc413351e7..c2ac625f94954ca5336617ab3552956ec0ee01a5 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -5,7 +5,6 @@ import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.Collection;
@@ -25,7 +24,6 @@ import org.bukkit.Warning.WarningState;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.event.Event;
-import org.bukkit.event.EventException;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.server.PluginDisableEvent;
@@ -43,7 +41,6 @@ import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.plugin.UnknownDependencyException;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import org.spigotmc.CustomTimingsHandler; // Spigot
 import org.yaml.snakeyaml.error.YAMLException;
 
 /**
@@ -252,14 +249,14 @@ public final class JavaPluginLoader implements PluginLoader {
         return null;
     }
 
-    void setClass(@NotNull final String name, @NotNull final Class<?> clazz) {
+    static void setClass(@NotNull final String name, @NotNull final Class<?> clazz) {
         if (ConfigurationSerializable.class.isAssignableFrom(clazz)) {
             Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
             ConfigurationSerialization.registerClass(serializable);
         }
     }
 
-    private void removeClass(@NotNull Class<?> clazz) {
+    private static void removeClass(@NotNull Class<?> clazz) {
         if (ConfigurationSerializable.class.isAssignableFrom(clazz)) {
             Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
             ConfigurationSerialization.unregisterClass(serializable);
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 57017530704f3a3e9c46b6d354e7c1887288651a..ed2e54454602c65aa1be2fc2ac91a88f673269c5 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -112,7 +112,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     }
 
     // Paper start
-    private <T> void addEnumeration(java.util.@NotNull ArrayList<T> list, @NotNull Enumeration<T> enumeration) {
+    private static <T> void addEnumeration(java.util.@NotNull ArrayList<T> list, @NotNull Enumeration<T> enumeration) {
         while (enumeration.hasMoreElements()) {
             list.add(enumeration.nextElement());
         }
@@ -227,7 +227,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
                 result = super.findClass(name);
             }
 
-            loader.setClass(name, result);
+            JavaPluginLoader.setClass(name, result);
             classes.put(name, result);
         }
 
diff --git a/src/main/java/org/bukkit/potion/Potion.java b/src/main/java/org/bukkit/potion/Potion.java
index 19e3e61c4d0c3de8af4e94ef3fd00886f32043b1..556fbf8082f29dfd6b61b2ed628d79242ca71e02 100644
--- a/src/main/java/org/bukkit/potion/Potion.java
+++ b/src/main/java/org/bukkit/potion/Potion.java
@@ -248,7 +248,7 @@ public class Potion {
      * @deprecated Non-functional
      */
     @Deprecated
-    public short toDamageValue() {
+    public static short toDamageValue() {
         return 0;
     }
 
@@ -391,7 +391,7 @@ public class Potion {
      * @deprecated Non-functional
      */
     @Deprecated
-    public int getNameId() {
+    public static int getNameId() {
         return 0;
     }
 }
diff --git a/src/main/java/org/bukkit/potion/PotionEffect.java b/src/main/java/org/bukkit/potion/PotionEffect.java
index c46ef748a84a72b5aff4572a16611a5aa45e4b9a..82b2bcc19e4858a44277cf0c1732dcb3f3fd91df 100644
--- a/src/main/java/org/bukkit/potion/PotionEffect.java
+++ b/src/main/java/org/bukkit/potion/PotionEffect.java
@@ -245,7 +245,7 @@ public class PotionEffect implements ConfigurationSerializable {
      @Deprecated
      @Nullable
      @Contract("-> null")
-    public Color getColor() {
+    public static Color getColor() {
         return null;
     }
 
diff --git a/src/main/java/org/bukkit/util/BlockIterator.java b/src/main/java/org/bukkit/util/BlockIterator.java
index 22d8555b72d2fb8d629f50eddb17b301d1aaae3a..f4b3fc1a434ccd263cbb8ddf9cdfdea67d6f8743 100644
--- a/src/main/java/org/bukkit/util/BlockIterator.java
+++ b/src/main/java/org/bukkit/util/BlockIterator.java
@@ -176,35 +176,35 @@ public class BlockIterator implements Iterator<Block> {
 
     }
 
-    private boolean blockEquals(@NotNull Block a, @NotNull Block b) {
+    private static boolean blockEquals(@NotNull Block a, @NotNull Block b) {
         return a.getX() == b.getX() && a.getY() == b.getY() && a.getZ() == b.getZ();
     }
 
-    private @NotNull BlockFace getXFace(@NotNull Vector direction) {
+    private static @NotNull BlockFace getXFace(@NotNull Vector direction) {
         return ((direction.getX() > 0) ? BlockFace.EAST : BlockFace.WEST);
     }
 
-    private @NotNull BlockFace getYFace(@NotNull Vector direction) {
+    private static @NotNull BlockFace getYFace(@NotNull Vector direction) {
         return ((direction.getY() > 0) ? BlockFace.UP : BlockFace.DOWN);
     }
 
-    private @NotNull BlockFace getZFace(@NotNull Vector direction) {
+    private static @NotNull BlockFace getZFace(@NotNull Vector direction) {
         return ((direction.getZ() > 0) ? BlockFace.SOUTH : BlockFace.NORTH);
     }
 
-    private double getXLength(@NotNull Vector direction) {
+    private static double getXLength(@NotNull Vector direction) {
         return Math.abs(direction.getX());
     }
 
-    private double getYLength(@NotNull Vector direction) {
+    private static double getYLength(@NotNull Vector direction) {
         return Math.abs(direction.getY());
     }
 
-    private double getZLength(@NotNull Vector direction) {
+    private static double getZLength(@NotNull Vector direction) {
         return Math.abs(direction.getZ());
     }
 
-    private double getPosition(double direction, double position, int blockPosition) {
+    private static double getPosition(double direction, double position, int blockPosition) {
         return direction > 0 ? (position - blockPosition) : (blockPosition + 1 - position);
     }
 
