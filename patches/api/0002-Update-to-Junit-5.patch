From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Fri, 21 Oct 2022 20:30:07 -0500
Subject: [PATCH] Update to Junit 5


diff --git a/build.gradle.kts b/build.gradle.kts
index 3ae88987ca035d9e66509d10a08344fe53ed06a6..8b45627c95b0acd96016b480ba4c13340f1cfeb6 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -49,6 +49,7 @@ dependencies {
     compileOnly("org.apache.maven:maven-resolver-provider:3.8.5")
     compileOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.8.2")
     compileOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.8.2")
+
     compileOnly("com.google.code.findbugs:jsr305:3.0.2") // Paper
 
     val annotations = "org.jetbrains:annotations:23.0.0" // Paper - we don't want Java 5 annotations...
@@ -62,11 +63,17 @@ dependencies {
     // Paper end
 
     testImplementation("org.apache.commons:commons-lang3:3.12.0")
-    testImplementation("junit:junit:4.13.2")
+    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.0")
+    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.0")
+    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.0")
     testImplementation("org.hamcrest:hamcrest-library:2.2")
     testImplementation("org.ow2.asm:asm-tree:9.4")
 }
 
+tasks.test {
+    useJUnitPlatform()
+}
+
 configure<PublishingExtension> {
     publications.create<MavenPublication>("maven") {
         from(components["java"])
diff --git a/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java b/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
index f849d8b12a7e3d1606698408ab4bb140a3b370e4..91a151524a35a0beed9e4eec10de6de737840607 100644
--- a/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
+++ b/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
@@ -8,8 +8,9 @@ import io.papermc.paper.tag.BaseTag;
 import io.papermc.paper.tag.EntityTags;
 import org.bukkit.Bukkit;
 import org.bukkit.TestServer;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -17,11 +18,12 @@ import java.util.HashSet;
 import java.util.Set;
 import java.util.logging.Level;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 
 public class MaterialTagsTest {
 
-    @Before
+    @BeforeEach
     public void before() {
         TestServer.getInstance();
     }
@@ -45,7 +47,7 @@ public class MaterialTagsTest {
 
     private static void testLocked(Class<?> clazz) {
         for (BaseTag<?, ?> tag : collectTags(clazz)) {
-            assertTrue("Tag " + tag.key() + " is not locked", tag.isLocked());
+            assertTrue(tag.isLocked(), "Tag " + tag.key() + " is not locked");
         }
     }
 
diff --git a/src/test/java/io/papermc/paper/EntityTagsTest.java b/src/test/java/io/papermc/paper/EntityTagsTest.java
index 06bb9d1180361d3d00c699796bbacbce5bef2177..7d495fdbd6c38a1713718082a704b7df752be1b0 100644
--- a/src/test/java/io/papermc/paper/EntityTagsTest.java
+++ b/src/test/java/io/papermc/paper/EntityTagsTest.java
@@ -1,10 +1,9 @@
 package io.papermc.paper;
 
-import com.destroystokyo.paper.MaterialTags;
 import io.papermc.paper.tag.EntityTags;
 import org.bukkit.Bukkit;
 import org.bukkit.TestServer;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.logging.Level;
 
diff --git a/src/test/java/org/bukkit/AnnotationTest.java b/src/test/java/org/bukkit/AnnotationTest.java
index 4bca64b2a44ae032730575ecba39f9737a5a1ec7..65ec0d1eba39089989e9d3d3c151ece2fc4029cc 100644
--- a/src/test/java/org/bukkit/AnnotationTest.java
+++ b/src/test/java/org/bukkit/AnnotationTest.java
@@ -13,8 +13,7 @@ import java.util.List;
 import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
@@ -23,6 +22,10 @@ import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodNode;
 import org.objectweb.asm.tree.ParameterNode;
 
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+
 public class AnnotationTest {
 
     private static final String[] ACCEPTED_ANNOTATIONS = {
@@ -67,7 +70,7 @@ public class AnnotationTest {
         File file = new File(loc.toURI());
 
         // Running from jar is not supported yet
-        Assert.assertTrue("code must be in a directory", file.isDirectory());
+        assertTrue(file.isDirectory(), "code must be in a directory");
 
         final HashMap<String, ClassNode> foundClasses = new HashMap<>();
         collectClasses(file, foundClasses);
@@ -146,7 +149,7 @@ public class AnnotationTest {
             builder.append("\t").append(message).append("\n");
         }
 
-        Assert.fail(builder.toString());
+        fail(builder.toString());
     }
 
     private static void collectClasses(@NotNull File from, @NotNull Map<String, ClassNode> to) throws IOException {
diff --git a/src/test/java/org/bukkit/ArtTest.java b/src/test/java/org/bukkit/ArtTest.java
index 2e9249a6d48edfe2339cbb4c8cc799cf551381fd..99ba57576454e18d2a700e6191b8d76e126966a6 100644
--- a/src/test/java/org/bukkit/ArtTest.java
+++ b/src/test/java/org/bukkit/ArtTest.java
@@ -1,14 +1,15 @@
 package org.bukkit;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class ArtTest {
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void getByNullName() {
-        Art.getByName(null);
+        assertThrows(IllegalArgumentException.class, () -> Art.getByName(null));
     }
 
     @Test
@@ -33,7 +34,7 @@ public class ArtTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void getByNameWithMixedCase() {
         Art subject = Art.values()[0];
         String name = subject.toString().replace('E', 'e');
diff --git a/src/test/java/org/bukkit/BukkitMirrorTest.java b/src/test/java/org/bukkit/BukkitMirrorTest.java
index 2dfada66067d79b84cd490eadbe0178e8cd8c260..b715650fb68dc68b3497bf04e931b560767e9c93 100644
--- a/src/test/java/org/bukkit/BukkitMirrorTest.java
+++ b/src/test/java/org/bukkit/BukkitMirrorTest.java
@@ -1,72 +1,66 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.base.Function;
-import com.google.common.collect.Lists;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.Arrays;
-import java.util.List;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
+import java.util.stream.Stream;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.is;
 
-@RunWith(Parameterized.class)
 public class BukkitMirrorTest {
 
-    @Parameters(name = "{index}: {1}")
-    public static List<Object[]> data() {
-        return Lists.transform(Arrays.asList(Server.class.getDeclaredMethods()), new Function<Method, Object[]>() {
-            @Override
-            public Object[] apply(Method input) {
-                return new Object[] {
-                    input,
-                    input.toGenericString().substring("public abstract ".length()).replace("(", "{").replace(")", "}")
-                    };
-            }
+    @ParameterizedTest(name = "{index}: {1}")
+    public static Stream<Object[]> data() {
+        return Arrays.stream(Server.class.getDeclaredMethods()).map(input -> new Object[]{
+            input,
+            input.toGenericString().substring("public abstract ".length()).replace("(", "{").replace(")", "}")
         });
     }
 
-    @Parameter(0)
-    public Method server;
-
-    @Parameter(1)
-    public String name;
 
     private Method bukkit;
 
-    @Before
-    public void makeBukkit() throws Throwable {
+    public void makeBukkit(Method server) throws Throwable {
         bukkit = Bukkit.class.getDeclaredMethod(server.getName(), server.getParameterTypes());
     }
 
-    @Test
-    public void isStatic() throws Throwable {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isStatic(Method server, String name) throws Throwable {
+        makeBukkit(server);
         assertThat(Modifier.isStatic(bukkit.getModifiers()), is(true));
     }
 
-    @Test
-    public void isDeprecated() throws Throwable {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isDeprecated(Method server, String name) throws Throwable {
+        makeBukkit(server);
         assertThat(bukkit.isAnnotationPresent(Deprecated.class), is(server.isAnnotationPresent(Deprecated.class)));
     }
 
-    @Test
-    public void returnType() throws Throwable {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void returnType(Method server, String name) throws Throwable {
+        makeBukkit(server);
         assertThat(bukkit.getReturnType(), is((Object) server.getReturnType()));
         // assertThat(bukkit.getGenericReturnType(), is(server.getGenericReturnType())); // too strict on <T> type generics
     }
 
-    @Test
-    public void parameterTypes() throws Throwable {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void parameterTypes(Method server, String name) throws Throwable {
+        makeBukkit(server);
         // assertThat(bukkit.getGenericParameterTypes(), is(server.getGenericParameterTypes())); // too strict on <T> type generics
     }
 
-    @Test
-    public void declaredException() throws Throwable {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void declaredException(Method server, String name) throws Throwable {
+        makeBukkit(server);
         assertThat(bukkit.getGenericExceptionTypes(), is(server.getGenericExceptionTypes()));
     }
 }
diff --git a/src/test/java/org/bukkit/ChatColorTest.java b/src/test/java/org/bukkit/ChatColorTest.java
index 2a8c8c729850c65dcc5f681267ee7e543b927d7e..7b8847145ae8ab4e9fb46b7297957625cd810145 100644
--- a/src/test/java/org/bukkit/ChatColorTest.java
+++ b/src/test/java/org/bukkit/ChatColorTest.java
@@ -1,8 +1,9 @@
 package org.bukkit;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class ChatColorTest {
 
@@ -13,14 +14,14 @@ public class ChatColorTest {
         }
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void getByStringWithNull() {
-        ChatColor.getByChar((String) null);
+        assertThrows(IllegalArgumentException.class, () -> ChatColor.getByChar((String) null));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void getByStringWithEmpty() {
-        ChatColor.getByChar("");
+        assertThrows(IllegalArgumentException.class, () -> ChatColor.getByChar(""));
     }
 
     @Test
@@ -61,7 +62,7 @@ public class ChatColorTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void translateAlternateColorCodes() {
         String s = "&0&1&2&3&4&5&6&7&8&9&A&a&B&b&C&c&D&d&E&e&F&f&K&k & more";
         String t = ChatColor.translateAlternateColorCodes('&', s);
diff --git a/src/test/java/org/bukkit/ChatPaginatorTest.java b/src/test/java/org/bukkit/ChatPaginatorTest.java
index b0384b12e543e686a858332c2c6b619e8c1b4b24..ad8c0679c1b80e85757c16ae7db5e287595a56a9 100644
--- a/src/test/java/org/bukkit/ChatPaginatorTest.java
+++ b/src/test/java/org/bukkit/ChatPaginatorTest.java
@@ -1,12 +1,13 @@
 package org.bukkit;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.util.ChatPaginator;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ChatPaginatorTest {
-    @Test
+    @org.junit.jupiter.api.Test
     public void testWordWrap1() {
         String rawString = ChatColor.RED + "123456789 123456789 123456789";
         String[] lines = ChatPaginator.wordWrap(rawString, 19);
@@ -16,7 +17,7 @@ public class ChatPaginatorTest {
         assertThat(lines[1], is(ChatColor.RED.toString() + "123456789"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testWordWrap2() {
         String rawString = "123456789 123456789 123456789";
         String[] lines = ChatPaginator.wordWrap(rawString, 22);
@@ -47,7 +48,7 @@ public class ChatPaginatorTest {
         assertThat(lines[1], is("123456789 12345"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testWordWrap5() {
         String rawString = "123456789\n123456789 123456789";
         String[] lines = ChatPaginator.wordWrap(rawString, 19);
@@ -67,7 +68,7 @@ public class ChatPaginatorTest {
         assertThat(lines[1], is("123456789"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testWordWrap7() {
         String rawString = "12345678   23456789   123456789";
         String[] lines = ChatPaginator.wordWrap(rawString, 19);
@@ -116,7 +117,7 @@ public class ChatPaginatorTest {
         assertThat(lines[1], is("123456789"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testWordWrap11() {
         String rawString = ChatColor.RED + "a a a " + ChatColor.BLUE + "a a";
         String[] lines = ChatPaginator.wordWrap(rawString, 9);
@@ -135,7 +136,7 @@ public class ChatPaginatorTest {
         assertThat(lines[1], is("123"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testWordWrap13() {
         String rawString = ChatColor.RED + "123456789 " + ChatColor.RED + ChatColor.BOLD + "123456789 " + ChatColor.RED + "123456789";
         String[] lines = ChatPaginator.wordWrap(rawString, 16);
@@ -146,7 +147,7 @@ public class ChatPaginatorTest {
         assertThat(lines[2], is(ChatColor.RED.toString() + ChatColor.BOLD + ChatColor.RED + "123456789"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testPaginate1() {
         String rawString = "1234 123456789 123456789 123456789";
         ChatPaginator.ChatPage page = ChatPaginator.paginate(rawString, 1, 6, 2);
diff --git a/src/test/java/org/bukkit/CoalTypeTest.java b/src/test/java/org/bukkit/CoalTypeTest.java
index b90f10c4ef89a4c155e6f9a6a3b674d149ac7296..2bee6372255106168b58b67bf54be4565dedee26 100644
--- a/src/test/java/org/bukkit/CoalTypeTest.java
+++ b/src/test/java/org/bukkit/CoalTypeTest.java
@@ -1,8 +1,9 @@
 package org.bukkit;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class CoalTypeTest {
     @Test
diff --git a/src/test/java/org/bukkit/ColorTest.java b/src/test/java/org/bukkit/ColorTest.java
index 70183fdb7f06e6ec3a64d93737f26bcbeb485e84..d3c45873462932854593c679b57c2e1a8f536371 100644
--- a/src/test/java/org/bukkit/ColorTest.java
+++ b/src/test/java/org/bukkit/ColorTest.java
@@ -1,9 +1,13 @@
 package org.bukkit;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 import org.bukkit.configuration.file.YamlConfiguration;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 @SuppressWarnings("javadoc")
 public class ColorTest {
@@ -35,7 +39,7 @@ public class ColorTest {
         new TestColor(0x000000, 0x000000, 0x00, 0x00, 0x00)
     };
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSerialization() throws Throwable {
         for (TestColor testColor : examples) {
             Color base = Color.fromRGB(testColor.rgb);
@@ -52,7 +56,7 @@ public class ColorTest {
     }
 
     // Equality tests
-    @Test
+    @org.junit.jupiter.api.Test
     public void testEqualities() {
         for (TestColor testColor : examples) {
             Color fromRGB = Color.fromRGB(testColor.rgb);
@@ -69,7 +73,7 @@ public class ColorTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testInequalities() {
         for (int i = 1; i < examples.length; i++) {
             TestColor testFrom = examples[i];
@@ -88,7 +92,7 @@ public class ColorTest {
     }
 
     // RGB tests
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRGB() {
         for (TestColor testColor : examples) {
             assertThat(testColor.name, Color.fromRGB(testColor.rgb).asRGB(), is(testColor.rgb));
@@ -98,28 +102,28 @@ public class ColorTest {
         }
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidRGB1() {
-        Color.fromRGB(0x01000000);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(0x01000000));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidRGB2() {
-        Color.fromRGB(Integer.MIN_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(Integer.MIN_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidRGB3() {
-        Color.fromRGB(Integer.MAX_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(Integer.MAX_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidRGB4() {
-        Color.fromRGB(-1);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(-1));
     }
 
     // BGR tests
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBGR() {
         for (TestColor testColor : examples) {
             assertThat(testColor.name, Color.fromRGB(testColor.rgb).asBGR(), is(testColor.bgr));
@@ -129,24 +133,24 @@ public class ColorTest {
         }
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidBGR1() {
-        Color.fromBGR(0x01000000);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(0x01000000));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidBGR2() {
-        Color.fromBGR(Integer.MIN_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(Integer.MIN_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidBGR3() {
-        Color.fromBGR(Integer.MAX_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(Integer.MAX_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidBGR4() {
-        Color.fromBGR(-1);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(-1));
     }
 
     // Red tests
@@ -160,68 +164,68 @@ public class ColorTest {
         }
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidR01() {
-        Color.fromRGB(-1, 0x00, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(-1, 0x00, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidR02() {
-        Color.fromRGB(Integer.MAX_VALUE, 0x00, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(Integer.MAX_VALUE, 0x00, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidR03() {
-        Color.fromRGB(Integer.MIN_VALUE, 0x00, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(Integer.MIN_VALUE, 0x00, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidR04() {
-        Color.fromRGB(0x100, 0x00, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(0x0100, 0x00, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidR05() {
-        Color.fromBGR(0x00, 0x00, -1);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(0x00, 0x00, -1));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidR06() {
-        Color.fromBGR(0x00, 0x00, Integer.MAX_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(0x00, 0x00, Integer.MAX_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidR07() {
-        Color.fromBGR(0x00, 0x00, Integer.MIN_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(0x00, 0x00, Integer.MIN_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidR08() {
-        Color.fromBGR(0x00, 0x00, 0x100);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(0x00, 0x00, 0x100));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidR09() {
-        Color.WHITE.setRed(-1);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setRed(-1));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidR10() {
-        Color.WHITE.setRed(Integer.MAX_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setRed(Integer.MAX_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidR11() {
-        Color.WHITE.setRed(Integer.MIN_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setRed(Integer.MIN_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidR12() {
-        Color.WHITE.setRed(0x100);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setRed(0x100));
     }
 
     // Blue tests
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBlue() {
         for (TestColor testColor : examples) {
             assertThat(testColor.name, Color.fromRGB(testColor.rgb).getBlue(), is(testColor.b));
@@ -231,68 +235,68 @@ public class ColorTest {
         }
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidB01() {
-        Color.fromRGB(0x00, 0x00, -1);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(0x00, 0x00, -1));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidB02() {
-        Color.fromRGB(0x00, 0x00, Integer.MAX_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(0x00, 0x00, Integer.MAX_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidB03() {
-        Color.fromRGB(0x00, 0x00, Integer.MIN_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(0x00, 0x00, Integer.MIN_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidB04() {
-        Color.fromRGB(0x00, 0x00, 0x100);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(0x00, 0x00, 0x100));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidB05() {
-        Color.fromBGR(-1, 0x00, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(-1, 0x00, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidB06() {
-        Color.fromBGR(Integer.MAX_VALUE, 0x00, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(Integer.MAX_VALUE, 0x00, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidB07() {
-        Color.fromBGR(Integer.MIN_VALUE, 0x00, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(Integer.MIN_VALUE, 0x00, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidB08() {
-        Color.fromBGR(0x100, 0x00, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(0x100, 0x00, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidB09() {
-        Color.WHITE.setBlue(-1);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setBlue(-1));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidB10() {
-        Color.WHITE.setBlue(Integer.MAX_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setBlue(Integer.MAX_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidB11() {
-        Color.WHITE.setBlue(Integer.MIN_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setBlue(Integer.MIN_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidB12() {
-        Color.WHITE.setBlue(0x100);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setBlue(0x100));
     }
 
     // Green tests
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGreen() {
         for (TestColor testColor : examples) {
             assertThat(testColor.name, Color.fromRGB(testColor.rgb).getGreen(), is(testColor.g));
@@ -302,63 +306,63 @@ public class ColorTest {
         }
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidG01() {
-        Color.fromRGB(0x00, -1, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(0x00, -1, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidG02() {
-        Color.fromRGB(0x00, Integer.MAX_VALUE, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(0x00, Integer.MAX_VALUE, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidG03() {
-        Color.fromRGB(0x00, Integer.MIN_VALUE, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(0x00, Integer.MIN_VALUE, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidG04() {
-        Color.fromRGB(0x00, 0x100, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromRGB(0x00, 0x100, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidG05() {
-        Color.fromBGR(0x00, -1, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(0x00, -1, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidG06() {
-        Color.fromBGR(0x00, Integer.MAX_VALUE, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(0x00, Integer.MAX_VALUE, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidG07() {
-        Color.fromBGR(0x00, Integer.MIN_VALUE, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(0x00, Integer.MIN_VALUE, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidG08() {
-        Color.fromBGR(0x00, 0x100, 0x00);
+        assertThrows(IllegalArgumentException.class, () -> Color.fromBGR(0x00, 0x100, 0x00));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidG09() {
-        Color.WHITE.setGreen(-1);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setGreen(-1));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidG10() {
-        Color.WHITE.setGreen(Integer.MAX_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setGreen(Integer.MAX_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidG11() {
-        Color.WHITE.setGreen(Integer.MIN_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setGreen(Integer.MIN_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidG12() {
-        Color.WHITE.setGreen(0x100);
+        assertThrows(IllegalArgumentException.class, () -> Color.WHITE.setGreen(0x100));
     }
 }
diff --git a/src/test/java/org/bukkit/CropStateTest.java b/src/test/java/org/bukkit/CropStateTest.java
index 5cd9d6d2d768f72034cac722e11f8835be426b5e..4cbdee087f0c766e95168121b0eaba18b0b4ca8f 100644
--- a/src/test/java/org/bukkit/CropStateTest.java
+++ b/src/test/java/org/bukkit/CropStateTest.java
@@ -1,8 +1,9 @@
 package org.bukkit;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class CropStateTest {
     @Test
diff --git a/src/test/java/org/bukkit/DifficultyTest.java b/src/test/java/org/bukkit/DifficultyTest.java
index d7fe8d39a466a41c92cd928dd78e9d7a4281f825..eb7bd7d36c253912db93c7855ddd13ebe7fe9b70 100644
--- a/src/test/java/org/bukkit/DifficultyTest.java
+++ b/src/test/java/org/bukkit/DifficultyTest.java
@@ -1,8 +1,9 @@
 package org.bukkit;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class DifficultyTest {
     @Test
diff --git a/src/test/java/org/bukkit/DyeColorTest.java b/src/test/java/org/bukkit/DyeColorTest.java
index e56d9439a2c4aa029263d68cb435bec63ce87574..a5104a9c227eee8533c920c6262c2ee2d11eb182 100644
--- a/src/test/java/org/bukkit/DyeColorTest.java
+++ b/src/test/java/org/bukkit/DyeColorTest.java
@@ -1,69 +1,66 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.ArrayList;
-import java.util.List;
 import org.bukkit.material.Colorable;
 import org.bukkit.material.Dye;
 import org.bukkit.material.Wool;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.Arrays;
+import java.util.stream.Stream;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.is;
 
-@RunWith(Parameterized.class)
 public class DyeColorTest {
 
-    @Parameters(name = "{index}: {0}")
-    public static List<Object[]> data() {
-        List<Object[]> list = new ArrayList<Object[]>();
-        for (DyeColor dye : DyeColor.values()) {
-            list.add(new Object[] {dye});
-        }
-        return list;
+    @ParameterizedTest(name = "{index}: {0}")
+    public static Stream<Object[]> data() {
+        return Arrays.stream(DyeColor.values()).map(dye -> new Object[] {dye});
     }
 
-    @Parameter public DyeColor dye;
-
-    @Test
+    @ParameterizedTest
     @SuppressWarnings("deprecation")
-    public void getByData() {
+    @MethodSource("data")
+    public void getByData(DyeColor dye) {
         byte data = dye.getWoolData();
 
         DyeColor byData = DyeColor.getByWoolData(data);
         assertThat(byData, is(dye));
     }
 
-    @Test
-    public void getByWoolData() {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void getByWoolData(DyeColor dye) {
         byte data = dye.getWoolData();
 
         DyeColor byData = DyeColor.getByWoolData(data);
         assertThat(byData, is(dye));
     }
 
-    @Test
-    public void getByDyeData() {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void getByDyeData(DyeColor dye) {
         byte data = dye.getDyeData();
 
         DyeColor byData = DyeColor.getByDyeData(data);
         assertThat(byData, is(dye));
     }
 
-    @Test
-    public void getDyeDyeColor() {
-        testColorable(new Dye(Material.LEGACY_INK_SACK, dye.getDyeData()));
-        testColorable(new Dye(dye));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void getDyeDyeColor(DyeColor dye) {
+        testColorable(dye, new Dye(Material.LEGACY_INK_SACK, dye.getDyeData()));
+        testColorable(dye, new Dye(dye));
     }
 
-    @Test
-    public void getWoolDyeColor() {
-        testColorable(new Wool(Material.LEGACY_WOOL, dye.getWoolData()));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void getWoolDyeColor(DyeColor dye) {
+        testColorable(dye, new Wool(Material.LEGACY_WOOL, dye.getWoolData()));
     }
 
-    private void testColorable(final Colorable colorable) {
-        assertThat(colorable.getColor(), is(this.dye));
+    private void testColorable(final DyeColor dye, final Colorable colorable) {
+        assertThat(colorable.getColor(), is(dye));
     }
 }
diff --git a/src/test/java/org/bukkit/EffectTest.java b/src/test/java/org/bukkit/EffectTest.java
index 759081f15992e07271567d65250f27f14f6c99c3..aaec9611aea814e971516426d157b23016264d8b 100644
--- a/src/test/java/org/bukkit/EffectTest.java
+++ b/src/test/java/org/bukkit/EffectTest.java
@@ -1,8 +1,9 @@
 package org.bukkit;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class EffectTest {
     private static final org.apache.logging.log4j.Logger LOGGER = org.apache.logging.log4j.LogManager.getLogger(); // Paper
diff --git a/src/test/java/org/bukkit/GameModeTest.java b/src/test/java/org/bukkit/GameModeTest.java
index 1c53e8ed8ba2a7fe9a51771b80bd6d0cb358adda..de0279ce97ef0c059b40b4d256dfc1a92458af4d 100644
--- a/src/test/java/org/bukkit/GameModeTest.java
+++ b/src/test/java/org/bukkit/GameModeTest.java
@@ -1,8 +1,9 @@
 package org.bukkit;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class GameModeTest {
     @Test
diff --git a/src/test/java/org/bukkit/GrassSpeciesTest.java b/src/test/java/org/bukkit/GrassSpeciesTest.java
index 39f1b899ea9c5389b42dda058949fcae1e2bbe84..da91e2a7d1f4f6cc96861bd67836191ee6bbaa07 100644
--- a/src/test/java/org/bukkit/GrassSpeciesTest.java
+++ b/src/test/java/org/bukkit/GrassSpeciesTest.java
@@ -1,8 +1,9 @@
 package org.bukkit;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class GrassSpeciesTest {
     @Test
diff --git a/src/test/java/org/bukkit/InstrumentTest.java b/src/test/java/org/bukkit/InstrumentTest.java
index f6d261ae50aa264d4ad35b8e465aba778dcabda4..c3bbdf4826dec5648f54aeb8a5407dbe691d130f 100644
--- a/src/test/java/org/bukkit/InstrumentTest.java
+++ b/src/test/java/org/bukkit/InstrumentTest.java
@@ -1,8 +1,9 @@
 package org.bukkit;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 public class InstrumentTest {
     @Test
diff --git a/src/test/java/org/bukkit/LocationTest.java b/src/test/java/org/bukkit/LocationTest.java
index 887305c05c3e53079347502c187984ca3e42a1f8..29967274356767975b0be693c0207ebb644d5527 100644
--- a/src/test/java/org/bukkit/LocationTest.java
+++ b/src/test/java/org/bukkit/LocationTest.java
@@ -1,18 +1,16 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.ImmutableList;
-import java.util.List;
-import java.util.Random;
 import org.bukkit.util.Vector;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.Random;
+import java.util.stream.Stream;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.closeTo;
+import static org.hamcrest.Matchers.is;
 
-@RunWith(Parameterized.class)
 public class LocationTest {
     private static final double delta = 1.0 / 1000000;
     /**
@@ -36,11 +34,11 @@ public class LocationTest {
      */
     private static final double HALF_HALF_UNIT = Math.sqrt(1 / 4f);
 
-    @Parameters(name = "{index}: {0}")
-    public static List<Object[]> data() {
+    @ParameterizedTest(name = "{index}: {0}")
+    public static Stream<Object[]> data() {
         Random RANDOM = new Random(1L); // Test is deterministic
         int r = 0;
-        return ImmutableList.<Object[]>of(
+        return Stream.of(
             new Object[]{"X",
                 1, 0, 0,
                 270, 0
@@ -146,46 +144,36 @@ public class LocationTest {
         };
     }
 
-    @Parameter(0)
-    public String nane;
-    @Parameter(1)
-    public double x;
-    @Parameter(2)
-    public double y;
-    @Parameter(3)
-    public double z;
-    @Parameter(4)
-    public float yaw;
-    @Parameter(5)
-    public float pitch;
-
-    @Test
-    public void testExpectedPitchYaw() {
-        Location location = getEmptyLocation().setDirection(getVector());
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testExpectedPitchYaw(String name, double x, double y, double z, float yaw, float pitch) {
+        Location location = getEmptyLocation().setDirection(getVector(x, y, z));
 
         assertThat((double) location.getYaw(), is(closeTo(yaw, delta)));
         assertThat((double) location.getPitch(), is(closeTo(pitch, delta)));
     }
 
-    @Test
-    public void testExpectedXYZ() {
-        Vector vector = getLocation().getDirection();
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testExpectedXYZ(String name, double x, double y, double z, float yaw, float pitch) {
+        Vector vector = getLocation(yaw, pitch).getDirection();
 
         assertThat(vector.getX(), is(closeTo(x, delta)));
         assertThat(vector.getY(), is(closeTo(y, delta)));
         assertThat(vector.getZ(), is(closeTo(z, delta)));
     }
 
-    @Test
-    public void testEquals() {
-        Location first = getLocation().add(getVector());
-        Location second = getLocation().add(getVector());
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testEquals(String name, double x, double y, double z, float yaw, float pitch) {
+        Location first = getLocation(yaw, pitch).add(getVector(x, y, z));
+        Location second = getLocation(yaw, pitch).add(getVector(x, y, z));
 
         assertThat(first.hashCode(), is(second.hashCode()));
         assertThat(first, is(second));
     }
 
-    private Vector getVector() {
+    private Vector getVector(double x, double y, double z) {
         return new Vector(x, y, z);
     }
 
@@ -193,7 +181,7 @@ public class LocationTest {
         return new Location(TestWorld.INSTANCE, 0, 0, 0);
     }
 
-    private Location getLocation() {
+    private Location getLocation(float yaw, float pitch) {
         Location location = getEmptyLocation();
         location.setYaw(yaw);
         location.setPitch(pitch);
diff --git a/src/test/java/org/bukkit/MaterialTest.java b/src/test/java/org/bukkit/MaterialTest.java
index 6b0eaaadf9772a4850cb70cea2bfe72a81a47a04..aaf7ef9a392733ea3bc6905080a8b53bb00699f6 100644
--- a/src/test/java/org/bukkit/MaterialTest.java
+++ b/src/test/java/org/bukkit/MaterialTest.java
@@ -1,24 +1,26 @@
 package org.bukkit;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.material.MaterialData;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
 
 public class MaterialTest {
-    @Test
+    @org.junit.jupiter.api.Test
     public void getByName() {
         for (Material material : Material.values()) {
             assertThat(Material.getMaterial(material.toString()), is(material));
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void getByNameNull() {
         assertThat(Material.getMaterial(null), is(nullValue()));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void getData() {
         for (Material material : Material.values()) {
             if (!material.isLegacy()) {
@@ -30,19 +32,19 @@ public class MaterialTest {
         }
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void matchMaterialByNull() {
-        Material.matchMaterial(null);
+        assertThrows(IllegalArgumentException.class, () -> Material.matchMaterial(null));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void matchMaterialByName() {
         for (Material material : Material.values()) {
             assertThat(Material.matchMaterial(material.toString()), is(material));
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void matchMaterialByKey() {
         for (Material material : Material.values()) {
             if (material.isLegacy()) {
@@ -52,7 +54,7 @@ public class MaterialTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void matchMaterialByWrongNamespace() {
         for (Material material : Material.values()) {
             if (material.isLegacy()) {
@@ -62,7 +64,7 @@ public class MaterialTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void matchMaterialByLowerCaseAndSpaces() {
         for (Material material : Material.values()) {
             String name = material.toString().replaceAll("_", " ").toLowerCase(java.util.Locale.ENGLISH);
diff --git a/src/test/java/org/bukkit/NamespacedKeyTest.java b/src/test/java/org/bukkit/NamespacedKeyTest.java
index 9f57889cbb5b805a640597d44ee45ab0a1fdbf2a..89acd6ca5d9318dee78b8044916d949aee2edf92 100644
--- a/src/test/java/org/bukkit/NamespacedKeyTest.java
+++ b/src/test/java/org/bukkit/NamespacedKeyTest.java
@@ -1,84 +1,87 @@
 package org.bukkit;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 
 public class NamespacedKeyTest {
 
     @Test
     public void testValid() {
-        Assert.assertEquals("minecraft:foo", new NamespacedKey("minecraft", "foo").toString());
-        Assert.assertEquals("minecraft:foo/bar", new NamespacedKey("minecraft", "foo/bar").toString());
-        Assert.assertEquals("minecraft:foo/bar_baz", new NamespacedKey("minecraft", "foo/bar_baz").toString());
-        Assert.assertEquals("minecraft:foo/bar_baz-qux", new NamespacedKey("minecraft", "foo/bar_baz-qux").toString());
-        Assert.assertEquals("minecraft:foo/bar_baz-qux.quux", new NamespacedKey("minecraft", "foo/bar_baz-qux.quux").toString());
+        assertEquals("minecraft:foo", new NamespacedKey("minecraft", "foo").toString());
+        assertEquals("minecraft:foo/bar", new NamespacedKey("minecraft", "foo/bar").toString());
+        assertEquals("minecraft:foo/bar_baz", new NamespacedKey("minecraft", "foo/bar_baz").toString());
+        assertEquals("minecraft:foo/bar_baz-qux", new NamespacedKey("minecraft", "foo/bar_baz-qux").toString());
+        assertEquals("minecraft:foo/bar_baz-qux.quux", new NamespacedKey("minecraft", "foo/bar_baz-qux.quux").toString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testValidFromString() {
         NamespacedKey expected = NamespacedKey.minecraft("foo");
-        Assert.assertEquals(expected, NamespacedKey.fromString("foo"));
-        Assert.assertEquals(expected, NamespacedKey.fromString(":foo"));
-        Assert.assertEquals(expected, NamespacedKey.fromString("minecraft:foo"));
-        Assert.assertEquals(new NamespacedKey("foo", "bar"), NamespacedKey.fromString("foo:bar"));
-
-        Assert.assertNull(NamespacedKey.fromString("fOO"));
-        Assert.assertNull(NamespacedKey.fromString(":Foo"));
-        Assert.assertNull(NamespacedKey.fromString("fOO:bar"));
-        Assert.assertNull(NamespacedKey.fromString("minecraft:fOO"));
-        Assert.assertNull(NamespacedKey.fromString("foo:bar:bazz"));
+        assertEquals(expected, NamespacedKey.fromString("foo"));
+        assertEquals(expected, NamespacedKey.fromString(":foo"));
+        assertEquals(expected, NamespacedKey.fromString("minecraft:foo"));
+        assertEquals(new NamespacedKey("foo", "bar"), NamespacedKey.fromString("foo:bar"));
+
+        assertNull(NamespacedKey.fromString("fOO"));
+        assertNull(NamespacedKey.fromString(":Foo"));
+        assertNull(NamespacedKey.fromString("fOO:bar"));
+        assertNull(NamespacedKey.fromString("minecraft:fOO"));
+        assertNull(NamespacedKey.fromString("foo:bar:bazz"));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testFromStringEmptyInput() {
-        NamespacedKey.fromString("");
+        assertThrows(IllegalArgumentException.class, () -> NamespacedKey.fromString(""));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testFromStringNullInput() {
-        NamespacedKey.fromString(null);
+        assertThrows(IllegalArgumentException.class, () -> NamespacedKey.fromString(null));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testEmptyNamespace() {
-        new NamespacedKey("", "foo").toString();
+        assertThrows(IllegalArgumentException.class, () -> new NamespacedKey("", "foo").toString());
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testEmptyKey() {
-        new NamespacedKey("minecraft", "").toString();
+        assertThrows(IllegalArgumentException.class, () -> new NamespacedKey("minecraft", "").toString());
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidNamespace() {
-        new NamespacedKey("minecraft/test", "foo").toString();
+        assertThrows(IllegalArgumentException.class, () -> new NamespacedKey("minecraft/test", "foo").toString());
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidNamespaceCasing() {
-        new NamespacedKey("Minecraft", "foo").toString();
+        assertThrows(IllegalArgumentException.class, () -> new NamespacedKey("Minecraft", "foo").toString());
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidKeyCasing() {
-        new NamespacedKey("minecraft", "Foo").toString();
+        assertThrows(IllegalArgumentException.class, () -> new NamespacedKey("minecraft", "Foo").toString());
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testInvalidKey() {
-        new NamespacedKey("minecraft", "foo!").toString();
+        assertThrows(IllegalArgumentException.class, () -> new NamespacedKey("minecraft", "foo!").toString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBelowLength() {
         new NamespacedKey("loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas",
                 "loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas").toString();
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testAboveLength() {
-        new NamespacedKey("loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas",
+        assertThrows(IllegalArgumentException.class, () -> new NamespacedKey("loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas",
                 "loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas/"
-                + "loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas").toString();
+                + "loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas").toString());
     }
 }
diff --git a/src/test/java/org/bukkit/NoteTest.java b/src/test/java/org/bukkit/NoteTest.java
index 0db4bfa43ae7d941c4be35ff89bdc6ce8471602b..6716547b9d951e3b7607d18dc3c73e8db97dc1ed 100644
--- a/src/test/java/org/bukkit/NoteTest.java
+++ b/src/test/java/org/bukkit/NoteTest.java
@@ -1,10 +1,13 @@
 package org.bukkit;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 import com.google.common.collect.Lists;
 import java.util.Collection;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class NoteTest {
     @Test
@@ -14,7 +17,7 @@ public class NoteTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void verifySharpedData() {
         for (Note.Tone tone : Note.Tone.values()) {
             if (!tone.isSharpable()) return;
@@ -24,7 +27,7 @@ public class NoteTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void verifyUnknownToneData() {
         Collection<Byte> tones = Lists.newArrayList();
         for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) {
@@ -51,55 +54,55 @@ public class NoteTest {
         }
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void createNoteBelowMin() {
-        new Note((byte) -1);
+        assertThrows(IllegalArgumentException.class, () -> new Note((byte) -1));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void createNoteAboveMax() {
-        new Note((byte) 25);
+        assertThrows(IllegalArgumentException.class, () -> new Note((byte) 25));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void createNoteOctaveBelowMax() {
-        new Note((byte) -1, Note.Tone.A, true);
+        assertThrows(IllegalArgumentException.class, () -> new Note((byte) -1, Note.Tone.A, true));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void createNoteOctaveAboveMax() {
-        new Note((byte) 3, Note.Tone.A, true);
+        assertThrows(IllegalArgumentException.class, () -> new Note((byte) 4, Note.Tone.A, true));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void createNoteOctaveNonSharpable() {
         Note note = new Note((byte) 0, Note.Tone.B, true);
         assertFalse(note.isSharped());
         assertThat(note.getTone(), is(Note.Tone.C));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void createNoteFlat() {
         Note note = Note.flat(0, Note.Tone.D);
         assertTrue(note.isSharped());
         assertThat(note.getTone(), is(Note.Tone.C));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void createNoteFlatNonFlattenable() {
         Note note = Note.flat(0, Note.Tone.C);
         assertFalse(note.isSharped());
         assertThat(note.getTone(), is(Note.Tone.B));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testFlatWrapping() {
         Note note = Note.flat(1, Note.Tone.G);
         assertTrue(note.isSharped());
         assertThat(note.getTone(), is(Note.Tone.F));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testFlatWrapping2() {
         Note note = new Note(1, Note.Tone.G, false).flattened();
         assertTrue(note.isSharped());
@@ -114,12 +117,12 @@ public class NoteTest {
         assertEquals(note.getOctave(), 2);
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testSharpWrapping2() {
-        new Note(2, Note.Tone.F, true).sharped();
+        assertThrows(IllegalArgumentException.class, () -> new Note(2, Note.Tone.F, true).sharped());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testHighest() {
         Note note = new Note(2, Note.Tone.F, true);
         assertEquals(note.getId(), (byte) 24);
@@ -131,7 +134,7 @@ public class NoteTest {
         assertEquals(note.getId(), (byte) 0);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void doo() {
         for (int i = 1; i <= 24; i++) {
             Note note = new Note((byte) i);
diff --git a/src/test/java/org/bukkit/TreeSpeciesTest.java b/src/test/java/org/bukkit/TreeSpeciesTest.java
index 51e956cc5ea6f856664c0b85daaf6070073d1ec8..11eddc3fb35376e7fbc97a7fb169473542d62487 100644
--- a/src/test/java/org/bukkit/TreeSpeciesTest.java
+++ b/src/test/java/org/bukkit/TreeSpeciesTest.java
@@ -1,8 +1,11 @@
 package org.bukkit;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class TreeSpeciesTest {
     @Test
diff --git a/src/test/java/org/bukkit/WorldTypeTest.java b/src/test/java/org/bukkit/WorldTypeTest.java
index 3c5f7b8a7062629b3c1ebab365986e42f5284ba5..d393d2c55973169d7ea9237b46cd14cf6e7a6137 100644
--- a/src/test/java/org/bukkit/WorldTypeTest.java
+++ b/src/test/java/org/bukkit/WorldTypeTest.java
@@ -1,8 +1,11 @@
 package org.bukkit;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class WorldTypeTest {
     @Test
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
index bfaacbaa33d05042eb5e8eea46e6a884d40e1aae..7971dcc76ecb0a62f91b558d1981cbd451bb659d 100644
--- a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
+++ b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
@@ -1,6 +1,7 @@
 package org.bukkit.configuration;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
+
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
@@ -11,7 +12,7 @@ import org.bukkit.Material;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.Vector;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public abstract class ConfigurationSectionTest {
     public abstract ConfigurationSection getConfigurationSection();
@@ -88,7 +89,7 @@ public abstract class ConfigurationSectionTest {
         assertArrayEquals(new Object[]{Long.MAX_VALUE, 42, true, section.getConfigurationSection("subsection"), "test"}, deepValues.values().toArray());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testContains() {
         ConfigurationSection section = getConfigurationSection();
 
@@ -120,7 +121,7 @@ public abstract class ConfigurationSectionTest {
         assertFalse(section.contains("notExistingSection", true));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testIsSet() {
         ConfigurationSection section = getConfigurationSection();
 
@@ -141,7 +142,7 @@ public abstract class ConfigurationSectionTest {
         assertEquals(section.getName(), section.getCurrentPath());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetName() {
         ConfigurationSection section = getConfigurationSection().createSection("subsection");
 
@@ -176,7 +177,7 @@ public abstract class ConfigurationSectionTest {
         assertNull(section.getString("doesntExist"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGet_String_Object() {
         ConfigurationSection section = getConfigurationSection();
 
@@ -186,7 +187,7 @@ public abstract class ConfigurationSectionTest {
         assertEquals("Default Value", section.get("doesntExist", "Default Value"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSet() {
         ConfigurationSection section = getConfigurationSection();
 
@@ -235,7 +236,7 @@ public abstract class ConfigurationSectionTest {
         assertNull(section.getString("doesntExist"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetString_String_String() {
         ConfigurationSection section = getConfigurationSection();
         String key = "exists";
@@ -248,7 +249,7 @@ public abstract class ConfigurationSectionTest {
         assertEquals(def, section.getString("doesntExist", def));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testIsString() {
         ConfigurationSection section = getConfigurationSection();
         String key = "exists";
@@ -297,7 +298,7 @@ public abstract class ConfigurationSectionTest {
         assertFalse(section.isInt("doesntExist"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetBoolean_String() {
         ConfigurationSection section = getConfigurationSection();
         String key = "exists";
@@ -334,7 +335,7 @@ public abstract class ConfigurationSectionTest {
         assertFalse(section.isBoolean("doesntExist"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetDouble_String() {
         ConfigurationSection section = getConfigurationSection();
         String key = "exists";
@@ -346,7 +347,7 @@ public abstract class ConfigurationSectionTest {
         assertNull(section.getString("doesntExist"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetDoubleFromInt() {
         ConfigurationSection section = getConfigurationSection();
         String key = "exists";
@@ -358,7 +359,7 @@ public abstract class ConfigurationSectionTest {
         assertNull(section.getString("doesntExist"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetDouble_String_Double() {
         ConfigurationSection section = getConfigurationSection();
         String key = "exists";
@@ -546,7 +547,7 @@ public abstract class ConfigurationSectionTest {
         assertFalse(section.isVector("doesntExist"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetItemStack_String() {
         ConfigurationSection section = getConfigurationSection();
         String key = "exists";
@@ -583,7 +584,7 @@ public abstract class ConfigurationSectionTest {
         assertFalse(section.isItemStack("doesntExist"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetConfigurationSection() {
         ConfigurationSection section = getConfigurationSection();
         String key = "exists";
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationTest.java b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
index 65f6ba389d9d73233714e33f96172d880dcf4116..c0276c177fa856d1281ae51e727e1425749356df 100644
--- a/src/test/java/org/bukkit/configuration/ConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
@@ -1,6 +1,7 @@
 package org.bukkit.configuration;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
+
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -9,7 +10,7 @@ import java.util.Map;
 import java.util.Set;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.util.Vector;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public abstract class ConfigurationTest {
 
@@ -107,7 +108,7 @@ public abstract class ConfigurationTest {
      * Test of addDefaults method, of class Configuration but with existing
      * defaults in a child section.
      */
-    @Test
+    @org.junit.jupiter.api.Test
     public void testAddDefaults_Configuration_WithExisting() {
         Configuration config = getConfig();
         Map<String, Object> values = getTestValues();
@@ -188,7 +189,7 @@ public abstract class ConfigurationTest {
     /**
      * Test of getDefaults method, of class Configuration.
      */
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetDefaults() {
         Configuration config = getConfig();
         Configuration defaults = getConfig();
diff --git a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
index d6a14103642541abae36d2ed9b7a0e9f15ea8c6b..db8808acc5c89015e21f4e3944427d75b8be637b 100644
--- a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
@@ -1,20 +1,20 @@
 package org.bukkit.configuration.file;
 
-import static org.junit.Assert.*;
+import org.bukkit.configuration.MemoryConfigurationTest;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
+
 import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileWriter;
+import java.nio.file.Path;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
-import org.bukkit.configuration.MemoryConfigurationTest;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.TemporaryFolder;
+
+import static org.junit.jupiter.api.Assertions.*;
 
 public abstract class FileConfigurationTest extends MemoryConfigurationTest {
-    @Rule
-    public TemporaryFolder testFolder = new TemporaryFolder();
 
     @Override
     public abstract FileConfiguration getConfig();
@@ -33,10 +33,10 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
 
     public abstract String getTestHeaderKeyCommentResult();
 
-    @Test
-    public void testSave_File() throws Exception {
+    @org.junit.jupiter.api.Test
+    public void testSave_File(@TempDir Path testFolder) throws Exception {
         FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
+        File file = testFolder.resolve("test.config").toFile();
 
         for (Map.Entry<String, Object> entry : getTestValues().entrySet()) {
             config.set(entry.getKey(), entry.getValue());
@@ -47,10 +47,10 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertTrue(file.isFile());
     }
 
-    @Test
-    public void testSave_String() throws Exception {
+    @org.junit.jupiter.api.Test
+    public void testSave_String(@TempDir Path testFolder) throws Exception {
         FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
+        File file = testFolder.resolve("test.config").toFile();
 
         for (Map.Entry<String, Object> entry : getTestValues().entrySet()) {
             config.set(entry.getKey(), entry.getValue());
@@ -61,7 +61,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertTrue(file.isFile());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSaveToString() {
         FileConfiguration config = getConfig();
 
@@ -75,10 +75,10 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(expected, result);
     }
 
-    @Test
-    public void testLoad_File() throws Exception {
+    @org.junit.jupiter.api.Test
+    public void testLoad_File(@TempDir Path testFolder) throws Exception {
         FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
+        File file = testFolder.resolve("test.config").toFile();
         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
         String saved = getTestValuesString();
         Map<String, Object> values = getTestValues();
@@ -98,10 +98,10 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(values.keySet(), config.getKeys(true));
     }
 
-    @Test
-    public void testLoad_String() throws Exception {
+    @org.junit.jupiter.api.Test
+    public void testLoad_String(@TempDir Path testFolder) throws Exception {
         FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
+        File file = testFolder.resolve("test.config").toFile();
         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
         String saved = getTestValuesString();
         Map<String, Object> values = getTestValues();
@@ -121,7 +121,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(values.keySet(), config.getKeys(true));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLoadFromString() throws Exception {
         FileConfiguration config = getConfig();
         Map<String, Object> values = getTestValues();
@@ -137,7 +137,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(saved, config.saveToString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testReloadEmptyConfig() throws Exception {
         FileConfiguration config = getConfig();
 
@@ -154,7 +154,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals("", config.saveToString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testReloadClear() throws Exception {
         // Test for SPIGOT-6274 - load does not clear values
         FileConfiguration config = getConfig();
@@ -194,7 +194,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertFalse(config.getBoolean("test"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testReloadClear3() throws Exception {
         // Test for SPIGOT-6274 - load does not clear values
         FileConfiguration config = getConfig();
@@ -219,7 +219,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertFalse(config.getBoolean("test"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSaveWithComments() {
         FileConfiguration config = getConfig();
         config.options().parseComments(true);
@@ -236,7 +236,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(expected, result);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSaveWithoutComments() {
         FileConfiguration config = getConfig();
         config.options().parseComments(false);
@@ -253,7 +253,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(expected, result);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLoadWithComments() throws Exception {
         FileConfiguration config = getConfig();
         Map<String, Object> values = getTestValues();
@@ -271,7 +271,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(comments + "\n" + saved, config.saveToString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLoadWithoutComments() throws Exception {
         FileConfiguration config = getConfig();
         Map<String, Object> values = getTestValues();
@@ -290,7 +290,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(saved, config.saveToString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSaveWithCommentsHeader() {
         FileConfiguration config = getConfig();
         config.options().parseComments(true);
@@ -308,7 +308,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(expected, result);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLoadWithCommentsHeader() throws Exception {
         FileConfiguration config = getConfig();
         Map<String, Object> values = getTestValues();
@@ -330,7 +330,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(comments + saved, config.saveToString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSaveWithCommentsFooter() {
         FileConfiguration config = getConfig();
         config.options().parseComments(true);
@@ -366,7 +366,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(saved + comments, config.saveToString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLoadWithCommentsInline() throws Exception {
         FileConfiguration config = getConfig();
 
@@ -376,7 +376,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertEquals(Arrays.asList("Test inline"), config.getInlineComments("key2"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSaveWithCommentsInline() {
         FileConfiguration config = getConfig();
 
diff --git a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
index 9f83d16341b4efd5c7150d2ab9abd579f373fa95..c6da050f76d158f88d589a1aab71ac04cc3bb4bc 100644
--- a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
@@ -1,6 +1,6 @@
 package org.bukkit.configuration.file;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -11,7 +11,8 @@ import java.util.Map.Entry;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.MemoryConfiguration;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
 public class YamlConfigurationTest extends FileConfigurationTest {
 
@@ -97,7 +98,7 @@ public class YamlConfigurationTest extends FileConfigurationTest {
         assertEquals(expected, result);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testAnchorNode() throws InvalidConfigurationException {
         YamlConfiguration config = getConfig();
         String content = "effects:\n"
@@ -121,7 +122,7 @@ public class YamlConfigurationTest extends FileConfigurationTest {
         assertEquals(expected, config.saveToString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testMergeNode() throws InvalidConfigurationException {
         YamlConfiguration config = getConfig();
         String content = "effects:\n"
@@ -152,7 +153,7 @@ public class YamlConfigurationTest extends FileConfigurationTest {
     }
 
     @Test
-    @org.junit.Ignore // Paper - ignore test because our fix doesn't work in testing environment
+    @Disabled // Paper - ignore test because our fix doesn't work in testing environment
     public void test100Comments() throws InvalidConfigurationException {
         StringBuilder commentBuilder = new StringBuilder();
         for (int i = 0; i < 100; i++) {
@@ -182,7 +183,7 @@ public class YamlConfigurationTest extends FileConfigurationTest {
         assertEquals(expected, result);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testUnusualMappingKeys() throws InvalidConfigurationException {
         YamlConfiguration config = getConfig();
         String content = "[1]: odd\n"
diff --git a/src/test/java/org/bukkit/conversations/ConversationContextTest.java b/src/test/java/org/bukkit/conversations/ConversationContextTest.java
index 3780a47c1f48d47b39a0e8a36c64044b366f8cc0..8547c0ecffdad049f461a3469be0d3b5709340dd 100644
--- a/src/test/java/org/bukkit/conversations/ConversationContextTest.java
+++ b/src/test/java/org/bukkit/conversations/ConversationContextTest.java
@@ -1,9 +1,9 @@
 package org.bukkit.conversations;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import java.util.HashMap;
 import java.util.Map;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  */
diff --git a/src/test/java/org/bukkit/conversations/ConversationTest.java b/src/test/java/org/bukkit/conversations/ConversationTest.java
index c448dc724d65f4b6a4cf52a6213f712b4c06d82e..759a8f4e3be84bef8c4c38ba838db937f00cb92a 100644
--- a/src/test/java/org/bukkit/conversations/ConversationTest.java
+++ b/src/test/java/org/bukkit/conversations/ConversationTest.java
@@ -1,8 +1,8 @@
 package org.bukkit.conversations;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  */
@@ -56,7 +56,7 @@ public class ConversationTest {
         assertEquals(conversation, forWhom.abandonedConverstion);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testEscapeSequence() {
         FakeConversable forWhom = new FakeConversable();
         Conversation conversation = new Conversation(null, forWhom, new FirstPrompt());
@@ -73,7 +73,7 @@ public class ConversationTest {
         assertEquals(conversation, forWhom.abandonedConverstion);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testNotPlayer() {
         FakeConversable forWhom = new FakeConversable();
         ConversationFactory factory = new ConversationFactory(new TestPlugin("Test"))
diff --git a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
index 6093e9865b004c8fa4aed0bd0c291a4c77ca8b84..45dab3cff3985c74de7dfe6bac4851454b58a7e0 100644
--- a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
+++ b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
@@ -1,13 +1,13 @@
 package org.bukkit.conversations;
 
-import static org.junit.Assert.*;
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.Test;
 
 /**
  */
 public class ValidatingPromptTest {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void TestBooleanPrompt() {
         TestBooleanPrompt prompt = new TestBooleanPrompt();
         assertTrue(prompt.isInputValid(null, "true"));
@@ -27,7 +27,7 @@ public class ValidatingPromptTest {
         assertEquals("foo", prompt.result);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void TestNumericPrompt() {
         TestNumericPrompt prompt = new TestNumericPrompt();
         assertTrue(prompt.isInputValid(null, "1010220"));
@@ -36,7 +36,7 @@ public class ValidatingPromptTest {
         assertEquals(1010220, prompt.result);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void TestRegexPrompt() {
         TestRegexPrompt prompt = new TestRegexPrompt("a.c");
         assertTrue(prompt.isInputValid(null, "abc"));
diff --git a/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java b/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
index b955f6a7adc65a5d1557df3d15fdeb1916ad3cad..9c4693b46f082f1b659c39f0e8c9b4a06f492e43 100644
--- a/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
+++ b/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
@@ -3,39 +3,41 @@ package org.bukkit.entity.memory;
 import java.util.Arrays;
 import java.util.List;
 import org.bukkit.NamespacedKey;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class MemoryKeyTest {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void shouldContainAllMemories() {
         List<MemoryKey> memories = Arrays.asList(MemoryKey.HOME, MemoryKey.JOB_SITE, MemoryKey.MEETING_POINT);
-        Assert.assertTrue(MemoryKey.values().containsAll(memories));
+        assertTrue(MemoryKey.values().containsAll(memories));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void shouldGetMemoryKeyHomeByNamespacedKey() {
-        Assert.assertEquals(MemoryKey.HOME, MemoryKey.getByKey(NamespacedKey.minecraft("home")));
+        assertEquals(MemoryKey.HOME, MemoryKey.getByKey(NamespacedKey.minecraft("home")));
     }
 
     @Test
     public void shouldGetMemoryKeyJobSiteByNamespacedKey() {
-        Assert.assertEquals(MemoryKey.JOB_SITE, MemoryKey.getByKey(NamespacedKey.minecraft("job_site")));
+        assertEquals(MemoryKey.JOB_SITE, MemoryKey.getByKey(NamespacedKey.minecraft("job_site")));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void shouldGetMemoryKeyMeetingPointByNamespacedKey() {
-        Assert.assertEquals(MemoryKey.MEETING_POINT, MemoryKey.getByKey(NamespacedKey.minecraft("meeting_point")));
+        assertEquals(MemoryKey.MEETING_POINT, MemoryKey.getByKey(NamespacedKey.minecraft("meeting_point")));
     }
 
     @Test
     public void shouldReturnNullWhenNamespacedKeyisNotPresentAsMemoryKey() {
-        Assert.assertEquals(null, MemoryKey.getByKey(NamespacedKey.minecraft("not_present")));
+        assertEquals(null, MemoryKey.getByKey(NamespacedKey.minecraft("not_present")));
     }
 
     @Test
     public void shouldReturnNullWhenNamespacedKeyisNull() {
-        Assert.assertNull(MemoryKey.getByKey(null));
+        assertNull(MemoryKey.getByKey(null));
     }
 }
diff --git a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
index dd5fb243b7af23115908a534bec13e8f455f64b2..7632eca361509426bc2f62b9d8f5ae518a0b1fe0 100644
--- a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
+++ b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
@@ -1,11 +1,12 @@
 package org.bukkit.event;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
 import com.google.common.collect.ImmutableList;
 import org.bukkit.event.player.PlayerChatTabCompleteEvent;
 import org.bukkit.plugin.messaging.TestPlayer;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class PlayerChatTabCompleteEventTest {
 
diff --git a/src/test/java/org/bukkit/event/SyntheticEventTest.java b/src/test/java/org/bukkit/event/SyntheticEventTest.java
index d402cb59f508205ebe9ee450594826b04cecb90b..eb647d0ed9d7d7d4467968f61e4a6ba13c29e14b 100644
--- a/src/test/java/org/bukkit/event/SyntheticEventTest.java
+++ b/src/test/java/org/bukkit/event/SyntheticEventTest.java
@@ -5,8 +5,10 @@ import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.SimplePluginManager;
 import org.bukkit.plugin.TestPlugin;
 import org.bukkit.plugin.java.JavaPluginLoader;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 
 public class SyntheticEventTest {
     @SuppressWarnings("deprecation")
@@ -27,7 +29,7 @@ public class SyntheticEventTest {
         pluginManager.registerEvents(impl, plugin);
         pluginManager.callEvent(event);
 
-        Assert.assertEquals(1, impl.callCount);
+        assertEquals(1, impl.callCount);
     }
 
     public abstract static class Base<E extends Event> implements Listener {
diff --git a/src/test/java/org/bukkit/materials/MaterialDataTest.java b/src/test/java/org/bukkit/materials/MaterialDataTest.java
index a935ae4a25b7955416652bf8c4690a804f12e903..d509b9c46b6cff7b20cf69cd7aaaeb6797e14da0 100644
--- a/src/test/java/org/bukkit/materials/MaterialDataTest.java
+++ b/src/test/java/org/bukkit/materials/MaterialDataTest.java
@@ -1,7 +1,8 @@
 package org.bukkit.materials;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.CropState;
 import org.bukkit.Material;
 import org.bukkit.NetherWartsState;
@@ -20,7 +21,7 @@ import org.bukkit.material.Tree;
 import org.bukkit.material.Wood;
 import org.bukkit.material.WoodenStep;
 import org.bukkit.material.types.MushroomBlockTexture;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class MaterialDataTest {
 
@@ -68,7 +69,7 @@ public class MaterialDataTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testWood() {
         Wood wood = new Wood();
         assertThat("Constructed with default wood type", wood.getItemType(), equalTo(Material.LEGACY_WOOD));
@@ -135,7 +136,7 @@ public class MaterialDataTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLeaves() {
         Leaves leaves = new Leaves();
         assertThat("Constructed with default leaf type", leaves.getItemType(), equalTo(Material.LEGACY_LEAVES));
@@ -319,7 +320,7 @@ public class MaterialDataTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testDiode() {
         Diode diode = new Diode();
         assertThat("Constructed with backward compatible diode state", diode.getItemType(), equalTo(Material.LEGACY_DIODE_BLOCK_ON));
diff --git a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
index e8cea99fd0eb966e60b0a8e1ebceca6dce6ff50a..409040293a1b5125990dce0c0cffc495cf3a7fc7 100644
--- a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
+++ b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
@@ -1,9 +1,11 @@
 package org.bukkit.metadata;
 
-import static org.junit.Assert.*;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class FixedMetadataValueTest {
     private Plugin plugin = new TestPlugin("X");
@@ -11,17 +13,17 @@ public class FixedMetadataValueTest {
 
     @Test
     public void testBasic() {
-        subject = new FixedMetadataValue(plugin, new Integer(50));
+        subject = new FixedMetadataValue(plugin, 50);
         assertSame(plugin, subject.getOwningPlugin());
-        assertEquals(new Integer(50), subject.value());
+        assertEquals(50, subject.value());
     }
 
     @Test
     public void testNumberTypes() {
-        subject = new FixedMetadataValue(plugin, new Integer(5));
-        assertEquals(new Integer(5), subject.value());
+        subject = new FixedMetadataValue(plugin, 5);
+        assertEquals(5, subject.value());
         assertEquals(5, subject.asInt());
-        assertEquals(true, subject.asBoolean());
+        assertTrue(subject.asBoolean());
         assertEquals(5, subject.asByte());
         assertEquals(5.0, subject.asFloat(), 0.1e-8);
         assertEquals(5.0D, subject.asDouble(), 0.1e-8D);
diff --git a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
index bc8a18eea6c0c61ad07bdc44b2a7c38f84117da6..d8902fecc3b82e9d18638453d6f9f32c60be7ffa 100644
--- a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
+++ b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
@@ -1,15 +1,15 @@
 package org.bukkit.metadata;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import java.util.concurrent.Callable;
 import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class LazyMetadataValueTest {
     private LazyMetadataValue subject;
     private TestPlugin plugin = new TestPlugin("x");
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLazyInt() {
         int value = 10;
         subject = makeSimpleCallable(value);
@@ -17,7 +17,7 @@ public class LazyMetadataValueTest {
         assertEquals(value, subject.value());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLazyDouble() {
         double value = 10.5;
         subject = makeSimpleCallable(value);
@@ -25,7 +25,7 @@ public class LazyMetadataValueTest {
         assertEquals(value, (Double) subject.value(), 0.01);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLazyString() {
         String value = "TEN";
         subject = makeSimpleCallable(value);
@@ -33,7 +33,7 @@ public class LazyMetadataValueTest {
         assertEquals(value, subject.value());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLazyBoolean() {
         boolean value = false;
         subject = makeSimpleCallable(value);
@@ -41,7 +41,7 @@ public class LazyMetadataValueTest {
         assertEquals(value, subject.value());
     }
 
-    @Test(expected = MetadataEvaluationException.class)
+    @Test
     public void testEvalException() {
         subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_AFTER_FIRST_EVAL, new Callable<Object>() {
             @Override
@@ -49,10 +49,11 @@ public class LazyMetadataValueTest {
                 throw new RuntimeException("Gotcha!");
             }
         });
-        subject.value();
+
+        assertThrows(MetadataEvaluationException.class, () -> subject.value());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testCacheStrategyCacheAfterFirstEval() {
         final Counter counter = new Counter();
         final int value = 10;
@@ -74,7 +75,7 @@ public class LazyMetadataValueTest {
         assertEquals(2, counter.value());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testCacheStrategyNeverCache() {
         final Counter counter = new Counter();
         final int value = 10;
@@ -92,7 +93,7 @@ public class LazyMetadataValueTest {
         assertEquals(3, counter.value());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testCacheStrategyEternally() {
         final Counter counter = new Counter();
         final int value = 10;
diff --git a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
index a9c10a2fd9fb37f2f7223fed138b2e2bfdaaef12..4fda0b5667b9dc5241d95d1e7a4830e99366d0d9 100644
--- a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
@@ -15,10 +15,10 @@
 
 package org.bukkit.metadata;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  */
@@ -30,7 +30,7 @@ public class MetadataConversionTest {
         subject = new FixedMetadataValue(plugin, value);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testFromInt() {
         setSubject(10);
 
@@ -44,7 +44,7 @@ public class MetadataConversionTest {
         assertEquals("10", subject.asString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testFromFloat() {
         setSubject(10.5);
 
@@ -58,7 +58,7 @@ public class MetadataConversionTest {
         assertEquals("10.5", subject.asString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testFromNumericString() {
         setSubject("10");
 
@@ -86,7 +86,7 @@ public class MetadataConversionTest {
         assertEquals("true", subject.asString());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testFromNull() {
         setSubject(null);
 
diff --git a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
index 12373ff16ca71bc437929ea5c4486c2c6bd93d09..d9bfa92c20be27540c4d8a9771738449498f6465 100644
--- a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
@@ -1,11 +1,11 @@
 package org.bukkit.metadata;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import java.util.List;
 import java.util.concurrent.Callable;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class MetadataStoreTest {
     private Plugin pluginX = new TestPlugin("x");
@@ -103,7 +103,7 @@ public class MetadataStoreTest {
         assertEquals(0, subject.getMetadata("subject", "key").size());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testMetadataRemoveForNonExistingPlugin() {
         subject.setMetadata("subject", "key", new FixedMetadataValue(pluginX, 10));
         subject.removeMetadata("subject", "key", pluginY);
diff --git a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
index c1e78568a86525e922a49a802aa5da85b4b6ae4a..a92ba625966e9b1a0521a0ea018e2ff1c16c0bb3 100644
--- a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
@@ -1,9 +1,9 @@
 package org.bukkit.metadata;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class MetadataValueAdapterTest {
     private TestPlugin plugin = new TestPlugin("x");
@@ -15,10 +15,10 @@ public class MetadataValueAdapterTest {
         assertEquals(mv.getOwningPlugin(), this.plugin);
 
         // Check value-getting and invalidation.
-        assertEquals(new Integer(1), mv.value());
-        assertEquals(new Integer(2), mv.value());
+        assertEquals(1, mv.value());
+        assertEquals(2, mv.value());
         mv.invalidate();
-        assertEquals(new Integer(1), mv.value());
+        assertEquals(1, mv.value());
     }
 
     @Test
@@ -35,28 +35,28 @@ public class MetadataValueAdapterTest {
     }
 
     /** Boolean conversion is non-trivial, we want to test it thoroughly. */
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBooleanConversion() {
         // null is False.
-        assertEquals(false, simpleValue(null).asBoolean());
+        assertFalse(simpleValue(null).asBoolean());
 
         // String to boolean.
-        assertEquals(true, simpleValue("True").asBoolean());
-        assertEquals(true, simpleValue("TRUE").asBoolean());
-        assertEquals(false, simpleValue("false").asBoolean());
+        assertTrue(simpleValue("True").asBoolean());
+        assertTrue(simpleValue("TRUE").asBoolean());
+        assertFalse(simpleValue("false").asBoolean());
 
         // Number to boolean.
-        assertEquals(true, simpleValue(1).asBoolean());
-        assertEquals(true, simpleValue(5.0).asBoolean());
-        assertEquals(false, simpleValue(0).asBoolean());
-        assertEquals(false, simpleValue(0.1).asBoolean());
+        assertTrue(simpleValue(1).asBoolean());
+        assertTrue(simpleValue(5.0).asBoolean());
+        assertFalse(simpleValue(0).asBoolean());
+        assertFalse(simpleValue(0.1).asBoolean());
 
         // Boolean as boolean, of course.
-        assertEquals(true, simpleValue(Boolean.TRUE).asBoolean());
-        assertEquals(false, simpleValue(Boolean.FALSE).asBoolean());
+        assertTrue(simpleValue(Boolean.TRUE).asBoolean());
+        assertFalse(simpleValue(Boolean.FALSE).asBoolean());
 
         // any object that is not null and not a Boolean, String, or Number is true.
-        assertEquals(true, simpleValue(new Object()).asBoolean());
+        assertTrue(simpleValue(new Object()).asBoolean());
     }
 
     /** Test String conversions return an empty string when given null. */
diff --git a/src/test/java/org/bukkit/plugin/PluginManagerTest.java b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
index 1941c9f49e9514c1236c5f4ea9f7af47f7be85c5..b10a0e32c3064eeb42a75331283792fa5330f233 100644
--- a/src/test/java/org/bukkit/plugin/PluginManagerTest.java
+++ b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
@@ -1,13 +1,14 @@
 package org.bukkit.plugin;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.TestServer;
 import org.bukkit.event.Event;
 import org.bukkit.event.TestEvent;
 import org.bukkit.permissions.Permission;
-import org.junit.After;
-import org.junit.Test;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.Test;
 
 public class PluginManagerTest {
     private class MutableObject {
@@ -131,12 +132,12 @@ public class PluginManagerTest {
         }
     } */ // Paper
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRemovePermissionByNameLower() {
         this.testRemovePermissionByName("lower");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRemovePermissionByNameUpper() {
         this.testRemovePermissionByName("UPPER");
     }
@@ -150,12 +151,12 @@ public class PluginManagerTest {
         this.testRemovePermissionByPermission("lower");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRemovePermissionByPermissionUpper() {
         this.testRemovePermissionByPermission("UPPER");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRemovePermissionByPermissionCamel() {
         this.testRemovePermissionByPermission("CaMeL");
     }
@@ -176,7 +177,7 @@ public class PluginManagerTest {
         assertThat("Permission \"" + name + "\" was not removed", pm.getPermission(name), is(nullValue()));
     }
 
-    @After
+    @AfterEach
     public void tearDown() {
         pm.clearPlugins();
         assertThat(pm.getPermissions(), is(empty()));
diff --git a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
index 351fc4a9f45745984d1d4811ba836959a3f3eadb..9aa2007f6f5adc77b6f2123dd4b7ad7f3e23cd72 100644
--- a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
+++ b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
@@ -1,7 +1,8 @@
 package org.bukkit.plugin;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
 import org.bukkit.event.EventPriority;
@@ -10,7 +11,7 @@ import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.event.player.PlayerEvent;
 import org.bukkit.event.player.PlayerInteractEvent;
 import org.bukkit.event.player.PlayerMoveEvent;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TimedRegisteredListenerTest {
 
diff --git a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
index 7e2335ed8acc692af1e70eddcf97ee7a56e30f68..e921c4df99b2ae4eefde19bfe39c5dcf16ffc788 100644
--- a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
+++ b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
@@ -1,12 +1,13 @@
 package org.bukkit.plugin.messaging;
 
 import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+
 import java.util.Collection;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.TestPlugin;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class StandardMessengerTest {
     public StandardMessenger getMessenger() {
@@ -18,7 +19,7 @@ public class StandardMessengerTest {
         return new TestPlugin("" + count++);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testIsReservedChannel() {
         Messenger messenger = getMessenger();
 
@@ -44,12 +45,12 @@ public class StandardMessengerTest {
         assertFalse(messenger.isOutgoingChannelRegistered(plugin, "test:foo"));
     }
 
-    @Test(expected = ReservedChannelException.class)
+    @org.junit.jupiter.api.Test
     public void testReservedOutgoingRegistration() {
         Messenger messenger = getMessenger();
         TestPlugin plugin = getPlugin();
 
-        messenger.registerOutgoingPluginChannel(plugin, "minecraft:register");
+        assertThrows(ReservedChannelException.class, () -> messenger.registerOutgoingPluginChannel(plugin, "minecraft:register"));
     }
 
     @Test
@@ -90,22 +91,22 @@ public class StandardMessengerTest {
         assertFalse(listener.hasReceived());
     }
 
-    @Test(expected = ReservedChannelException.class)
+    @Test
     public void testReservedIncomingRegistration() {
         Messenger messenger = getMessenger();
         TestPlugin plugin = getPlugin();
 
-        messenger.registerIncomingPluginChannel(plugin, "minecraft:register", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        assertThrows(ReservedChannelException.class, () -> messenger.registerIncomingPluginChannel(plugin, "minecraft:register", new TestMessageListener("test:foo", "test:bar".getBytes())));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testDuplicateIncomingRegistration() {
         Messenger messenger = getMessenger();
         TestPlugin plugin = getPlugin();
         TestMessageListener listener = new TestMessageListener("test:foo", "test:bar".getBytes());
 
         messenger.registerIncomingPluginChannel(plugin, "test:baz", listener);
-        messenger.registerIncomingPluginChannel(plugin, "test:baz", listener);
+        assertThrows(IllegalArgumentException.class, () -> messenger.registerIncomingPluginChannel(plugin, "test:baz", listener));
     }
 
     @Test
@@ -137,7 +138,7 @@ public class StandardMessengerTest {
         assertTrue(listener2.hasReceived());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testUnregisterIncomingPluginChannel_Plugin() {
         Messenger messenger = getMessenger();
         TestPlugin plugin = getPlugin();
@@ -166,20 +167,20 @@ public class StandardMessengerTest {
         assertFalse(listener2.hasReceived());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetOutgoingChannels() {
         Messenger messenger = getMessenger();
         TestPlugin plugin1 = getPlugin();
         TestPlugin plugin2 = getPlugin();
 
-        assertEquals(messenger.getOutgoingChannels());
+        assertEquals2Collection(messenger.getOutgoingChannels());
 
         messenger.registerOutgoingPluginChannel(plugin1, "test:foo");
         messenger.registerOutgoingPluginChannel(plugin1, "test:bar");
         messenger.registerOutgoingPluginChannel(plugin2, "test:baz");
         messenger.registerOutgoingPluginChannel(plugin2, "test:baz");
 
-        assertEquals(messenger.getOutgoingChannels(), "test:foo", "test:bar", "test:baz");
+        assertEquals2Collection(messenger.getOutgoingChannels(), "test:foo", "test:bar", "test:baz");
     }
 
     @Test
@@ -194,9 +195,9 @@ public class StandardMessengerTest {
         messenger.registerOutgoingPluginChannel(plugin2, "test:baz");
         messenger.registerOutgoingPluginChannel(plugin2, "test:qux");
 
-        assertEquals(messenger.getOutgoingChannels(plugin1), "test:foo", "test:bar");
-        assertEquals(messenger.getOutgoingChannels(plugin2), "test:baz", "test:qux");
-        assertEquals(messenger.getOutgoingChannels(plugin3));
+        assertEquals2Collection(messenger.getOutgoingChannels(plugin1), "test:foo", "test:bar");
+        assertEquals2Collection(messenger.getOutgoingChannels(plugin2), "test:baz", "test:qux");
+        assertEquals2Collection(messenger.getOutgoingChannels(plugin3));
     }
 
     @Test
@@ -205,14 +206,14 @@ public class StandardMessengerTest {
         TestPlugin plugin1 = getPlugin();
         TestPlugin plugin2 = getPlugin();
 
-        assertEquals(messenger.getIncomingChannels());
+        assertEquals2Collection(messenger.getIncomingChannels());
 
         messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
         messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
         messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
         messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
 
-        assertEquals(messenger.getIncomingChannels(), "test:foo", "test:bar", "test:baz");
+        assertEquals2Collection(messenger.getIncomingChannels(), "test:foo", "test:bar", "test:baz");
     }
 
     @Test
@@ -227,12 +228,12 @@ public class StandardMessengerTest {
         messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
         messenger.registerIncomingPluginChannel(plugin2, "test:qux", new TestMessageListener("test:foo", "test:bar".getBytes()));
 
-        assertEquals(messenger.getIncomingChannels(plugin1), "test:foo", "test:bar");
-        assertEquals(messenger.getIncomingChannels(plugin2), "test:baz", "test:qux");
-        assertEquals(messenger.getIncomingChannels(plugin3));
+        assertEquals2Collection(messenger.getIncomingChannels(plugin1), "test:foo", "test:bar");
+        assertEquals2Collection(messenger.getIncomingChannels(plugin2), "test:baz", "test:qux");
+        assertEquals2Collection(messenger.getIncomingChannels(plugin3));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testGetIncomingChannelRegistrations_Plugin() {
         Messenger messenger = getMessenger();
         TestPlugin plugin1 = getPlugin();
@@ -243,9 +244,9 @@ public class StandardMessengerTest {
         PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
         PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:qux", new TestMessageListener("test:foo", "test:bar".getBytes()));
 
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin1), registration1, registration2);
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin2), registration3, registration4);
-        assertEquals(messenger.getIncomingChannels(plugin3));
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations(plugin1), registration1, registration2);
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations(plugin2), registration3, registration4);
+        assertEquals2Collection(messenger.getIncomingChannels(plugin3));
     }
 
     @Test
@@ -258,9 +259,9 @@ public class StandardMessengerTest {
         PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin2, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
         PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
 
-        assertEquals(messenger.getIncomingChannelRegistrations("test:foo"), registration1, registration3);
-        assertEquals(messenger.getIncomingChannelRegistrations("test:bar"), registration2, registration4);
-        assertEquals(messenger.getIncomingChannelRegistrations("test:baz"));
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations("test:foo"), registration1, registration3);
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations("test:bar"), registration2, registration4);
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations("test:baz"));
     }
 
     @Test
@@ -276,29 +277,28 @@ public class StandardMessengerTest {
         PluginMessageListenerRegistration registration5 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
         PluginMessageListenerRegistration registration6 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
 
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin1, "test:foo"), registration1, registration2);
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin1, "test:bar"), registration3);
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin2, "test:bar"), registration4);
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin2, "test:baz"), registration5, registration6);
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin1, "test:baz"));
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin3, "test:qux"));
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations(plugin1, "test:foo"), registration1, registration2);
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations(plugin1, "test:bar"), registration3);
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations(plugin2, "test:bar"), registration4);
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations(plugin2, "test:baz"), registration5, registration6);
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations(plugin1, "test:baz"));
+        assertEquals2Collection(messenger.getIncomingChannelRegistrations(plugin3, "test:qux"));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testInvalidChannel() {
         Messenger messenger = getMessenger();
         TestPlugin plugin = getPlugin();
-
-        messenger.registerOutgoingPluginChannel(plugin, "foo");
+        assertThrows(IllegalArgumentException.class, () -> messenger.registerOutgoingPluginChannel(plugin, "foo"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testValidateAndCorrectChannel() {
-        Assert.assertEquals("bungeecord:main", StandardMessenger.validateAndCorrectChannel("BungeeCord"));
-        Assert.assertEquals("BungeeCord", StandardMessenger.validateAndCorrectChannel("bungeecord:main"));
+        assertEquals("bungeecord:main", StandardMessenger.validateAndCorrectChannel("BungeeCord"));
+        assertEquals("BungeeCord", StandardMessenger.validateAndCorrectChannel("bungeecord:main"));
     }
 
-    private static <T> void assertEquals(Collection<T> actual, T... expected) {
+    private static <T> void assertEquals2Collection(Collection<T> actual, T... expected) {
         assertThat("Size of the array", actual.size(), is(expected.length));
         assertThat(actual, hasItems(expected));
     }
diff --git a/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java b/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
index 7a5b6108d56b8350d1aa419caf25fe6c653066b4..20981f604e1981cca9bc4d9b6c54fa2b3cac0212 100644
--- a/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
+++ b/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
@@ -1,6 +1,6 @@
 package org.bukkit.plugin.messaging;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.entity.Player;
 
 public class TestMessageListener implements PluginMessageListener {
diff --git a/src/test/java/org/bukkit/scoreboard/CriteriaTest.java b/src/test/java/org/bukkit/scoreboard/CriteriaTest.java
index eb94b6f4d58cd9f66b07791c57af7e359992e28c..f241580da31d8a7a62dc5fedf535682c30d136f5 100644
--- a/src/test/java/org/bukkit/scoreboard/CriteriaTest.java
+++ b/src/test/java/org/bukkit/scoreboard/CriteriaTest.java
@@ -4,8 +4,10 @@ import org.bukkit.Material;
 import org.bukkit.Statistic;
 import org.bukkit.TestServer;
 import org.bukkit.entity.EntityType;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 
 public class CriteriaTest {
 
@@ -13,12 +15,12 @@ public class CriteriaTest {
     public void testStatistic() {
         TestServer.getInstance();
 
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.AVIATE_ONE_CM, Material.STONE)); // Generic statistic with block
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.AVIATE_ONE_CM, EntityType.CREEPER)); // Generic statistic with entity type
+        assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.AVIATE_ONE_CM, Material.STONE)); // Generic statistic with block
+        assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.AVIATE_ONE_CM, EntityType.CREEPER)); // Generic statistic with entity type
 
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.ENTITY_KILLED_BY, Material.AMETHYST_SHARD)); // Entity statistic with material
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.MINE_BLOCK, Material.DIAMOND_PICKAXE)); // Block statistic with item
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.BREAK_ITEM, Material.WATER)); // Item statistic with block
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.KILL_ENTITY, Material.STONE)); // Entity statistic with Material
+        assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.ENTITY_KILLED_BY, Material.AMETHYST_SHARD)); // Entity statistic with material
+        assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.MINE_BLOCK, Material.DIAMOND_PICKAXE)); // Block statistic with item
+        assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.BREAK_ITEM, Material.WATER)); // Item statistic with block
+        assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.KILL_ENTITY, Material.STONE)); // Entity statistic with Material
     }
 }
diff --git a/src/test/java/org/bukkit/util/BoundingBoxTest.java b/src/test/java/org/bukkit/util/BoundingBoxTest.java
index 2d50a9ed66d40c9c538f5e767d9e128394f5dc3b..7a90113836b1ced1c3dd7d60a951e8d2fe967324 100644
--- a/src/test/java/org/bukkit/util/BoundingBoxTest.java
+++ b/src/test/java/org/bukkit/util/BoundingBoxTest.java
@@ -1,17 +1,18 @@
 package org.bukkit.util;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import java.util.Map;
 import org.bukkit.Location;
 import org.bukkit.block.BlockFace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class BoundingBoxTest {
 
     private static final double delta = 1.0 / 1000000;
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testConstruction() {
         BoundingBox expected = new BoundingBox(-1, -1, -1, 1, 2, 3);
         assertThat(expected.getMin(), is(new Vector(-1, -1, -1)));
@@ -29,7 +30,7 @@ public class BoundingBoxTest {
         assertThat(BoundingBox.of(new Location(null, 0.0D, 0.5D, 1.0D), 1.0D, 1.5D, 2.0D), is(expected));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testContains() {
         BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
         assertThat(aabb.contains(-0.5D, 0.0D, 0.5D), is(true));
@@ -45,7 +46,7 @@ public class BoundingBoxTest {
         assertThat(aabb.contains(new Vector(-0.5D, -0.5D, -0.5D), new Vector(0.5D, 1.0D, 2.0D)), is(true));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testOverlaps() {
         BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
         assertThat(aabb.contains(aabb), is(true));
@@ -57,7 +58,7 @@ public class BoundingBoxTest {
         assertThat(aabb.overlaps(new Vector(0.5D, 1.5D, 2.5D), new Vector(1, 2, 3)), is(true));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testDegenerate() {
         BoundingBox aabb = new BoundingBox(0, 0, 0, 0, 0, 0);
         assertThat(aabb.getWidthX(), is(0.0D));
@@ -66,7 +67,7 @@ public class BoundingBoxTest {
         assertThat(aabb.getVolume(), is(0.0D));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testShift() {
         BoundingBox aabb = new BoundingBox(0, 0, 0, 1, 1, 1);
         assertThat(aabb.clone().shift(1, 2, 3), is(new BoundingBox(1, 2, 3, 2, 3, 4)));
@@ -84,14 +85,14 @@ public class BoundingBoxTest {
         assertThat(aabb1.clone().union(new Location(null, 1, 2, 3)), is(new BoundingBox(0, 0, 0, 1, 2, 3)));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testIntersection() {
         BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
         assertThat(aabb.clone().intersection(new BoundingBox(-2, -2, -2, 4, 4, 4)), is(aabb));
         assertThat(aabb.clone().intersection(new BoundingBox(-2, -2, -2, 1, 1, 1)), is(new BoundingBox(-1, -1, -1, 1, 1, 1)));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testExpansion() {
         BoundingBox aabb = new BoundingBox(0, 0, 0, 2, 2, 2);
         assertThat(aabb.clone().expand(1, 2, 3, 1, 2, 3), is(new BoundingBox(-1, -2, -3, 3, 4, 5)));
@@ -136,7 +137,7 @@ public class BoundingBoxTest {
         assertThat(aabb.clone().expandDirectional(new Vector(1, 2, 3)), is(new BoundingBox(0, 0, 0, 3, 4, 5)));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRayTrace() {
         BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 1, 1);
 
@@ -194,7 +195,7 @@ public class BoundingBoxTest {
                         is(new RayTraceResult(new Vector(1, 0, -1), BlockFace.EAST))));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSerialization() {
         BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 1, 1);
         Map<String, Object> serialized = aabb.serialize();
diff --git a/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java b/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
index 229c67c769f50ba68b4d9681f984b4bc668619c2..0086ac516acca1893fb559a08a0e162e18e286a9 100644
--- a/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
+++ b/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
@@ -1,21 +1,18 @@
 package org.bukkit.util;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.ImmutableList;
-import java.util.List;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.stream.Stream;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.is;
 
-@RunWith(Parameterized.class)
 public class StringUtilStartsWithTest {
 
-    @Parameters(name = "{index}: {0} startsWith {1} == {2}")
-    public static List<Object[]> data() {
-        return ImmutableList.<Object[]>of(
+    @ParameterizedTest(name = "{index}: {0} startsWith {1} == {2}")
+    public static Stream<Object[]> data() {
+        return Stream.of(
             new Object[] {
                 "Apple",
                 "Apples",
@@ -69,15 +66,9 @@ public class StringUtilStartsWithTest {
         );
     }
 
-    @Parameter(0)
-    public String base;
-    @Parameter(1)
-    public String prefix;
-    @Parameter(2)
-    public boolean result;
-
-    @Test
-    public void testFor() {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testFor(String base, String prefix, boolean result) {
         assertThat(base + " starts with " + prefix + ": " + result, StringUtil.startsWithIgnoreCase(base, prefix), is(result));
     }
 }
diff --git a/src/test/java/org/bukkit/util/StringUtilTest.java b/src/test/java/org/bukkit/util/StringUtilTest.java
index 6476dd2d1b6d37c3390400d8dea94016b309d69f..8616da53e3dd025fab79cd743c9933973c6cba59 100644
--- a/src/test/java/org/bukkit/util/StringUtilTest.java
+++ b/src/test/java/org/bukkit/util/StringUtilTest.java
@@ -1,41 +1,42 @@
 package org.bukkit.util;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import com.google.common.collect.ImmutableList;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class StringUtilTest {
 
-    @Test(expected = NullPointerException.class)
+    @Test
     public void nullPrefixTest() {
-        StringUtil.startsWithIgnoreCase("String", null);
+        assertThrows(NullPointerException.class, () -> StringUtil.startsWithIgnoreCase("String", null));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void nullStringTest() {
-        StringUtil.startsWithIgnoreCase(null, "String");
+        assertThrows(IllegalArgumentException.class, () -> StringUtil.startsWithIgnoreCase(null, "String"));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void nullCollectionTest() {
-        StringUtil.copyPartialMatches("Token", ImmutableList.<String>of(), null);
+        assertThrows(IllegalArgumentException.class, () -> StringUtil.copyPartialMatches("Token", ImmutableList.<String>of(), null));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void nullIterableTest() {
-        StringUtil.copyPartialMatches("Token", null, new ArrayList<String>());
+        assertThrows(IllegalArgumentException.class, () -> StringUtil.copyPartialMatches("Token", null, new ArrayList<String>()));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void nullTokenTest() {
-        StringUtil.copyPartialMatches(null, ImmutableList.<String>of(), new ArrayList<String>());
+        assertThrows(IllegalArgumentException.class, () -> StringUtil.copyPartialMatches(null, ImmutableList.<String>of(), new ArrayList<String>()));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void copyTokenTest() {
         String token = "ab";
         List<String> original = ImmutableList.of("ab12", "aC561", "AB5195", "Ab76", "", "a");
@@ -46,13 +47,13 @@ public class StringUtilTest {
         assertThat(list.size(), is(expected.size() * 2));
     }
 
-    @Test(expected = UnsupportedOperationException.class)
+    @org.junit.jupiter.api.Test
     public void copyUnsupportedTest() {
-        StringUtil.copyPartialMatches("token", ImmutableList.of("token1", "token2"), ImmutableList.of());
+        assertThrows(UnsupportedOperationException.class, () -> StringUtil.copyPartialMatches("token", ImmutableList.of("token1", "token2"), ImmutableList.of()));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void copyNullTest() {
-        StringUtil.copyPartialMatches("token", Arrays.asList("token1", "token2", null), new ArrayList<String>());
+        assertThrows(IllegalArgumentException.class, () -> StringUtil.copyPartialMatches("token", Arrays.asList("token1", "token2", null), new ArrayList<String>()));
     }
 }
diff --git a/src/test/java/org/bukkit/util/VectorTest.java b/src/test/java/org/bukkit/util/VectorTest.java
index 9b846deba8eb3ff43c444da70a9d7ca3d1b43b0a..472b7a08fb90677289d62b4401d15d6399ecfa7b 100644
--- a/src/test/java/org/bukkit/util/VectorTest.java
+++ b/src/test/java/org/bukkit/util/VectorTest.java
@@ -1,8 +1,8 @@
 package org.bukkit.util;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.block.BlockFace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class VectorTest {
 
@@ -14,12 +14,12 @@ public class VectorTest {
         assertTrue(new Vector(1, 0, 0).isNormalized());
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testNullVectorAxis() {
-        new Vector(0, 1, 0).rotateAroundAxis(null, Math.PI);
+        assertThrows(IllegalArgumentException.class, () -> new Vector(0, 1, 0).rotateAroundAxis(null, Math.PI));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBypassingAxisVector() {
         new Vector(0, 1, 0).rotateAroundNonUnitAxis(new Vector(1, 1, 1), Math.PI); // This will result some weird result, but there may be some use for it for some people
     }
@@ -34,7 +34,7 @@ public class VectorTest {
      * As west to east are the x axis in Minecraft, rotating around it from up
      * should lead to up -> south -> down -> north.
      */
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRotationAroundX() {
         Vector vector = BlockFace.UP.getDirection();
         assertEquals(BlockFace.SOUTH.getDirection(), vector.clone().rotateAroundX(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
@@ -47,7 +47,7 @@ public class VectorTest {
      * As up to down are the y axis in Minecraft, rotating around it from up
      * should lead to east (positive x) -> south -> west -> north.
      */
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRotationAroundY() {
         Vector vector = BlockFace.EAST.getDirection();
         assertEquals(BlockFace.NORTH.getDirection(), vector.clone().rotateAroundY(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
@@ -74,7 +74,7 @@ public class VectorTest {
      * As south to north are the z axis in Minecraft, rotating around it from up
      * should lead to up (positive y) -> west -> down -> east.
      */
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRotationAroundZ() {
         Vector vector = BlockFace.UP.getDirection();
         assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundZ(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
@@ -102,7 +102,7 @@ public class VectorTest {
      * vectors have correct angle to each other This will work with any two
      * vectors, as the rotation will keep the angle the same.
      */
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRotationAroundCustomAngle() {
         Vector axis = new Vector(-30, 1, 2000).normalize();
         Vector v = new Vector(53, 12, 98);
@@ -115,7 +115,7 @@ public class VectorTest {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSmallAngle() {
         Vector a = new Vector(-0.13154885489775203, 0.0, 0.12210868381700482);
         Vector b = new Vector(-0.7329152226448059, -0.0, 0.6803199648857117);
diff --git a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
index d3edb72ff83d68b86390b0e9f7e40035482f353a..765035a77081a7da6ce509dd425a0e9e79b3b724 100644
--- a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
+++ b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
@@ -1,33 +1,28 @@
 package org.bukkit.util.io;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import com.google.common.collect.ImmutableList;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
 import org.bukkit.FireworkEffect.Type;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.util.Vector;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
 import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
 
-@RunWith(Parameterized.class)
+import java.io.*;
+import java.util.List;
+import java.util.stream.Stream;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.is;
+
 public class BukkitObjectStreamTest {
 
-    @Parameters(name = "{index}: {0}")
-    public static List<Object[]> data() {
-        return ImmutableList.<Object[]>of(
+    @ParameterizedTest(name = "{index}: {0}")
+    public static Stream<Object[]> data() {
+        return Stream.of(
             new Object[] {
                 Color.class.getName(),
                 "rO0ABXNyADZjb20uZ29vZ2xlLmNvbW1vbi5jb2xsZWN0LkltbXV0YWJsZUxpc3QkU2VyaWFsaXplZEZvcm0AAAAAAAAAAAIAAVsACGVsZW1lbnRzdAATW0xqYXZhL2xhbmcvT2JqZWN0O3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAABXNyABpvcmcuYnVra2l0LnV0aWwuaW8uV3JhcHBlcvJQR+zxEm8FAgABTAADbWFwdAAPTGphdmEvdXRpbC9NYXA7eHBzcgA1Y29tLmdvb2dsZS5jb21tb24uY29sbGVjdC5JbW11dGFibGVNYXAkU2VyaWFsaXplZEZvcm0AAAAAAAAAAAIAAlsABGtleXNxAH4AAVsABnZhbHVlc3EAfgABeHB1cQB+AAMAAAAEdAACPT10AANSRUR0AARCTFVFdAAFR1JFRU51cQB+AAMAAAAEdAAFQ29sb3JzcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAA/3NxAH4AEQAAAP9zcQB+ABEAAAD/c3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARAAAAAHNxAH4AEQAAAIBzcQB+ABEAAACAc3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARAAAAgHNxAH4AEQAAAIBxAH4AGnNxAH4ABXNxAH4ACHVxAH4AAwAAAARxAH4AC3EAfgAMcQB+AA1xAH4ADnVxAH4AAwAAAARxAH4AEHNxAH4AEQAAAP9xAH4AGnEAfgAac3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARAAAA/3EAfgAac3EAfgARAAAApQ==",
@@ -72,17 +67,9 @@ public class BukkitObjectStreamTest {
             });
     }
 
-    @Parameter(0)
-    public String className;
-
-    @Parameter(1)
-    public String preEncoded;
-
-    @Parameter(2)
-    public List<ConfigurationSerializable> object;
-
-    @Test
-    public void checkSerlialization() throws Throwable {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void checkSerlialization(String className, String preEncoded, List<ConfigurationSerializable> object) throws Throwable {
         // If this test fails, you may start your trek to debug by commenting the '@Ignore' on the next method
         // (and of course, you would read those comments too)
         final ByteArrayOutputStream out = new ByteArrayOutputStream();
@@ -102,7 +89,7 @@ public class BukkitObjectStreamTest {
         final byte[] preEncodedArray = Base64Coder.decode(preEncoded);
 
         final Object readBack;
-        final Object preEncoded;
+        final Object preEncoded2;
 
         ObjectInputStream ois = null;
         ObjectInputStream preois = null;
@@ -113,7 +100,7 @@ public class BukkitObjectStreamTest {
             preois = new BukkitObjectInputStream(preIn);
 
             readBack = ois.readObject();
-            preEncoded = preois.readObject();
+            preEncoded2 = preois.readObject();
         } finally {
             if (ois != null) {
                 try {
@@ -130,12 +117,13 @@ public class BukkitObjectStreamTest {
         }
 
         assertThat(object, is(readBack));
-        assertThat(object, is(preEncoded));
+        assertThat(object, is(preEncoded2));
     }
 
-    @Ignore
-    @Test
-    public void preEncoded() throws Throwable {
+    @Disabled
+    @ParameterizedTest
+    @MethodSource("data")
+    public void preEncoded(String className, String preEncoded, List<ConfigurationSerializable> object) throws Throwable {
         // This test is placed in the case that a necessary change is made to change the encoding format
         // Just remove the ignore (or run manually) and it'll give you the new pre-encoded values
 
