From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 03:10:32 -0500
Subject: [PATCH] Make methods static where possible


diff --git a/src/main/java/alternate/current/wire/LevelHelper.java b/src/main/java/alternate/current/wire/LevelHelper.java
index 24d68d725d29602609c4984ae7d5f553274d1b0c..fe5b07be409414e205b63c5eb8995040006486fe 100644
--- a/src/main/java/alternate/current/wire/LevelHelper.java
+++ b/src/main/java/alternate/current/wire/LevelHelper.java
@@ -1,5 +1,6 @@
 package alternate.current.wire;
 
+import net.minecraft.world.level.Level;
 import org.bukkit.event.block.BlockRedstoneEvent;
 
 import net.minecraft.core.BlockPos;
@@ -16,7 +17,7 @@ public class LevelHelper {
 
     static int doRedstoneEvent(@NotNull ServerLevel level, @NotNull BlockPos pos, int prevPower, int newPower) {
         BlockRedstoneEvent event = new BlockRedstoneEvent(level.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), prevPower, newPower);
-        level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
 
         return event.getNewCurrent();
     }
diff --git a/src/main/java/alternate/current/wire/PriorityQueue.java b/src/main/java/alternate/current/wire/PriorityQueue.java
index 6f96df81274109777e2e7679adef9ec5fc0fd002..5fa36d49c1155bec7c9d9afad9b23e367426242c 100644
--- a/src/main/java/alternate/current/wire/PriorityQueue.java
+++ b/src/main/java/alternate/current/wire/PriorityQueue.java
@@ -190,7 +190,7 @@ public class PriorityQueue extends AbstractQueue<Node> {
         linkBetween(prev, node, prev.next_node);
     }
 
-    private void linkBetween(@NotNull Node prev, @NotNull Node node, @NotNull Node next) {
+    private static void linkBetween(@NotNull Node prev, @NotNull Node node, @NotNull Node next) {
         prev.next_node = node;
         node.prev_node = prev;
 
diff --git a/src/main/java/alternate/current/wire/WireHandler.java b/src/main/java/alternate/current/wire/WireHandler.java
index 837c51be8b60f27252e341919eb6039ca645c7c1..71526836cf17aa7e2c144380e458299be61436b5 100644
--- a/src/main/java/alternate/current/wire/WireHandler.java
+++ b/src/main/java/alternate/current/wire/WireHandler.java
@@ -721,7 +721,7 @@ public class WireHandler {
      * Determine the power the given wire receives from connected neighboring wires
      * and update the virtual power accordingly.
      */
-    private void findWirePower(@NotNull WireNode wire, boolean ignoreSearched) {
+    private static void findWirePower(@NotNull WireNode wire, boolean ignoreSearched) {
         wire.connections.forEach(connection -> {
             if (!connection.accept) {
                 return;
@@ -814,7 +814,7 @@ public class WireHandler {
     /**
      * Check if the given wire needs to update its state in the world.
      */
-    private boolean needsUpdate(@NotNull WireNode wire) {
+    private static boolean needsUpdate(@NotNull WireNode wire) {
         return wire.removed || wire.shouldBreak || wire.virtualPower != wire.currentPower;
     }
 
@@ -1024,7 +1024,7 @@ public class WireHandler {
      * ambiguous, use the backup value that was set when the wire was first added to
      * the network.
      */
-    private void findPowerFlow(@NotNull WireNode wire) {
+    private static void findPowerFlow(@NotNull WireNode wire) {
         int flow = FLOW_IN_TO_FLOW_OUT[wire.flowIn];
 
         if (flow >= 0) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java
index 5ea0a2a5c9bdcb7722b7217023155b16e858be35..a9a66cd1cc95bea447c93bde593bf7b924fc78c5 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java
@@ -332,11 +332,11 @@ public final class MCVersionRegistry {
         return DATACONVERTER_VERSIONS_MAJOR.contains(version);
     }
 
-    public String getVersionName(final int version) {
+    public static String getVersionName(final int version) {
         return VERSION_NAMES.get(version);
     }
 
-    public boolean isRegisteredVersion(final int version) {
+    public static boolean isRegisteredVersion(final int version) {
         return VERSION_NAMES.containsKey(version);
     }
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1496.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1496.java
index 12886845e3335d4134c1d8b504b6eee3fd494fca..d354e9b715234ef83078566f1b7ee7ab26be5dab 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1496.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1496.java
@@ -266,7 +266,7 @@ public final class V1496 {
             return this.storage.get(index);
         }
 
-        protected int getStateId(final String name, final boolean persistent, final int distance) {
+        protected static int getStateId(final String name, final boolean persistent, final int distance) {
             return LEAVES_TO_ID.getInt(name) << 5 | (persistent ? 16 : 0) | distance;
         }
 
@@ -301,8 +301,8 @@ public final class V1496 {
                     final boolean notDecayable = properties != null && "false".equals(properties.getString("decayable"));
 
                     this.leaveIds.add(i);
-                    this.stateToIdMap.put(this.getStateId(name, notDecayable, 7), i);
-                    this.palette.setMap(i, this.makeNewLeafTag(name, notDecayable, 7));
+                    this.stateToIdMap.put(Section.getStateId(name, notDecayable, 7), i);
+                    this.palette.setMap(i, LeavesSection.makeNewLeafTag(name, notDecayable, 7));
                 }
 
                 if (LOGS.contains(name)) {
@@ -313,7 +313,7 @@ public final class V1496 {
             return this.leaveIds.isEmpty() && this.logIds.isEmpty();
         }
 
-        private @NotNull MapType<String> makeNewLeafTag(final String name, final boolean notDecayable, final int distance) {
+        private static @NotNull MapType<String> makeNewLeafTag(final String name, final boolean notDecayable, final int distance) {
             final MapType<String> properties = Types.NBT.createEmptyMap();
             final MapType<String> ret = Types.NBT.createEmptyMap();
 
@@ -347,13 +347,13 @@ public final class V1496 {
             final MapType<String> state = this.palette.getMap(id);
             final String name = state.getString("Name");
             final boolean persistent = "true".equals(state.getMap("Properties").getString("persistent"));
-            final int newState = this.getStateId(name, persistent, distance);
+            final int newState = Section.getStateId(name, persistent, distance);
             int newStateId;
             if ((newStateId = this.stateToIdMap.get(newState)) == -1) {
                 newStateId = this.palette.size();
                 this.leaveIds.add(newStateId);
                 this.stateToIdMap.put(newState, newStateId);
-                this.palette.addMap(this.makeNewLeafTag(name, persistent, distance));
+                this.palette.addMap(LeavesSection.makeNewLeafTag(name, persistent, distance));
             }
 
             if (1 << this.storage.getBits() <= newStateId) {
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java
index f70c77c2447d0f645ea91c9bc79ffad7644c2ea1..72b844040687585ed3488d4ab7ec8b1a3fe4e7d6 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java
@@ -514,15 +514,15 @@ public final class StarLightInterface {
         }
     }
 
-    public void scheduleChunkLight(final ChunkPos pos, final Runnable run) {
+    public static void scheduleChunkLight(final ChunkPos pos, final Runnable run) {
         throw new UnsupportedOperationException("No longer implemented, use the new lightQueue field to queue tasks"); // Paper - replace light queue
     }
 
-    public void removeChunkTasks(final ChunkPos pos) {
+    public static void removeChunkTasks(final ChunkPos pos) {
         throw new UnsupportedOperationException("No longer implemented, use the new lightQueue field to queue tasks"); // Paper - replace light queue
     }
 
-    public void propagateChanges() {
+    public static void propagateChanges() {
         throw new UnsupportedOperationException("No longer implemented, task draining is now performed by the light thread"); // Paper - replace light queue
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
index 26bb9a45d4ab571c6c14e02bb7e2b359f9dd6583..f75156ebc4cf71ecc73cdedd02bdc216fce025e6 100644
--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -134,7 +134,7 @@ public class PaperVersionFetcher implements VersionFetcher {
     }
 
     @Nullable
-    private Component getHistory() {
+    private static Component getHistory() {
         final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
         if (data == null) {
             return null;
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
index 594c467682ca749440d42c3683300ecce122eb68..4321538c178da32d514a7998cdea5d8baeaef2ba 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
@@ -555,7 +555,7 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
         }
     }
 
-    private boolean[] readPalette(Palette<BlockState> palette, boolean[] temp, boolean[] global) {
+    private static boolean[] readPalette(Palette<BlockState> palette, boolean[] temp, boolean[] global) {
         if (palette instanceof GlobalPalette) {
             return global;
         }
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java b/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java
index 0c2d982020611cbc1ee7ea107a51ef9ce5a6327f..a147fbd5b176a09a9b0f6f678dd71bdeb6003a1d 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java
@@ -197,7 +197,7 @@ public class PaperMobGoals implements MobGoals {
         return goals;
     }
 
-    private @NotNull GoalSelector getHandle(@NotNull CraftMob mob, @NotNull EnumSet<GoalType> types) {
+    private static @NotNull GoalSelector getHandle(@NotNull CraftMob mob, @NotNull EnumSet<GoalType> types) {
         if (types.contains(GoalType.TARGET)) {
             return mob.getHandle().targetSelector;
         } else {
@@ -205,7 +205,7 @@ public class PaperMobGoals implements MobGoals {
         }
     }
 
-    private @NotNull GoalSelector getHandle(@NotNull CraftMob mob, GoalType type) {
+    private static @NotNull GoalSelector getHandle(@NotNull CraftMob mob, GoalType type) {
         if (type == GoalType.TARGET) {
             return mob.getHandle().targetSelector;
         } else {
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index 3df549e4c45b889553ded2ac9bf8a176339626c2..b11560649e4a5a9932e0595f48243f0d999df8ca 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -73,7 +73,7 @@ public class RAMDetails extends JList<String> {
         setListData(vector);
     }
 
-    public double getAverage(long @NotNull [] tickTimes) {
+    public static double getAverage(long @NotNull [] tickTimes) {
         long total = 0L;
         for (long value : tickTimes) {
             total += value;
diff --git a/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java b/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
index e36b6b841773de81aa3511180ea8aa5b04b6398e..55e53c0f419fb3965cd08b2fe62a2c03e26de95e 100644
--- a/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
+++ b/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
@@ -3,7 +3,6 @@ package com.destroystokyo.paper.io;
 import com.mojang.logging.LogUtils;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.storage.RegionFile;
 import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
@@ -91,11 +90,11 @@ public final class PaperFileIOThread extends QueueExecutorThread {
      * @param chunkZ Chunk's z coordinate
      * @param priority Priority level to try to bump to
      */
-    public void bumpPriority(final ServerLevel world, final int chunkX, final int chunkZ, final int priority) {
+    public static void bumpPriority(final ServerLevel world, final int chunkX, final int chunkZ, final int priority) {
         throw new IllegalStateException("Shouldn't get here, use RegionFileIOThread"); // Paper - rewrite chunk system, fail hard on usage
     }
 
-    public CompoundTag getPendingWrite(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final boolean poiData) {
+    public static CompoundTag getPendingWrite(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final boolean poiData) {
         // Paper start - rewrite chunk system
         return io.papermc.paper.chunk.system.io.RegionFileIOThread.getPendingWrite(
             world, chunkX, chunkZ, poiData ? io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.POI_DATA :
@@ -111,7 +110,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
      * @param chunkZ Chunk's z coordinate
      * @param priority Priority level to set to
      */
-    public void setPriority(final ServerLevel world, final int chunkX, final int chunkZ, final int priority) {
+    public static void setPriority(final ServerLevel world, final int chunkX, final int chunkZ, final int priority) {
         throw new IllegalStateException("Shouldn't get here, use RegionFileIOThread"); // Paper - rewrite chunk system, fail hard on usage
     }
 
@@ -136,14 +135,14 @@ public final class PaperFileIOThread extends QueueExecutorThread {
      * @throws IllegalArgumentException If both {@code poiData} and {@code chunkData} are {@code null}.
      * @throws IllegalStateException If the file io thread has shutdown.
      */
-    public void scheduleSave(final ServerLevel world, final int chunkX, final int chunkZ,
-                             final CompoundTag poiData, final CompoundTag chunkData,
-                             final int priority) throws IllegalArgumentException {
+    public static void scheduleSave(final ServerLevel world, final int chunkX, final int chunkZ,
+                                    final CompoundTag poiData, final CompoundTag chunkData,
+                                    final int priority) throws IllegalArgumentException {
         throw new IllegalStateException("Shouldn't get here, use RegionFileIOThread"); // Paper - rewrite chunk system, fail hard on usage
     }
 
-    private void scheduleWrite(final ChunkDataController dataController, final ServerLevel world,
-                               final int chunkX, final int chunkZ, final CompoundTag data, final int priority, final long writeCounter) {
+    private static void scheduleWrite(final ChunkDataController dataController, final ServerLevel world,
+                                      final int chunkX, final int chunkZ, final CompoundTag data, final int priority, final long writeCounter) {
         throw new IllegalStateException("Shouldn't get here, use RegionFileIOThread"); // Paper - rewrite chunk system, fail hard on usage
     }
 
@@ -159,7 +158,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
                                                                           final int priority, final boolean readPoiData, final boolean readChunkData,
                                                                           final boolean intendingToBlock) {
         final CompletableFuture<ChunkData> future = new CompletableFuture<>();
-        this.loadChunkDataAsync(world, chunkX, chunkZ, priority, future::complete, readPoiData, readChunkData, intendingToBlock);
+        PaperFileIOThread.loadChunkDataAsync(world, chunkX, chunkZ, priority, future::complete, readPoiData, readChunkData, intendingToBlock);
         return future;
     }
 
@@ -190,10 +189,10 @@ public final class PaperFileIOThread extends QueueExecutorThread {
      * @return The {@link PrioritizedTaskQueue.PrioritizedTask} associated with this task. Note that this task does not support
      *                                                          cancellation.
      */
-    public void loadChunkDataAsync(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
-                                   final int priority, final @NotNull Consumer<ChunkData> onComplete,
-                                   final boolean readPoiData, final boolean readChunkData,
-                                   final boolean intendingToBlock) {
+    public static void loadChunkDataAsync(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
+                                          final int priority, final @NotNull Consumer<ChunkData> onComplete,
+                                          final boolean readPoiData, final boolean readChunkData,
+                                          final boolean intendingToBlock) {
         if (!PrioritizedTaskQueue.validPriority(priority)) {
             throw new IllegalArgumentException("Invalid priority: " + priority);
         }
@@ -246,9 +245,9 @@ public final class PaperFileIOThread extends QueueExecutorThread {
     }
 
     // Note: the onComplete may be called asynchronously or synchronously here.
-    private void scheduleRead(final ChunkDataController dataController, final ServerLevel world,
-                              final int chunkX, final int chunkZ, final Consumer<CompoundTag> onComplete, final int priority,
-                              final boolean intendingToBlock) {
+    private static void scheduleRead(final ChunkDataController dataController, final ServerLevel world,
+                                     final int chunkX, final int chunkZ, final Consumer<CompoundTag> onComplete, final int priority,
+                                     final boolean intendingToBlock) {
         throw new IllegalStateException("Shouldn't get here, use RegionFileIOThread"); // Paper - rewrite chunk system, fail hard on usage
     }
 
@@ -268,7 +267,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
      *     Internal api. Do not use.
      * </p>
      */
-    public void runTask(final int priority, final Runnable runnable) {
+    public static void runTask(final int priority, final Runnable runnable) {
         throw new IllegalStateException("Shouldn't get here, use RegionFileIOThread"); // Paper - rewrite chunk system, fail hard on usage
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java b/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
index 489b5eb8116bfdc78fd35e85d4c9de4c8ffcdec2..ba52972687fd4fc45e4a706257b360554d0b5761 100644
--- a/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
+++ b/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
@@ -15,7 +15,7 @@ class PaperServerListPingEventImpl extends PaperServerListPingEvent {
 
     PaperServerListPingEventImpl(@NotNull MinecraftServer server, @NotNull StatusClient client, int protocolVersion, @Nullable CachedServerIcon icon) {
         super(client, server.server.motd(), server.previewsChat(), server.getPlayerCount(), server.getMaxPlayers(),
-                server.getServerModName() + ' ' + server.getServerVersion(), protocolVersion, icon);
+                MinecraftServer.getServerModName() + ' ' + server.getServerVersion(), protocolVersion, icon);
         this.server = server;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java b/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java
index ddc53b2ec1bf4a5c1545d25679dfd1f7a79961ef..04a43c85a62f0e968d6ce980eba1b39c2cb1e395 100644
--- a/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java
+++ b/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java
@@ -899,7 +899,7 @@ public class RedstoneWireTurbo {
         // Adding Bukkit's BlockRedstoneEvent - er.. event.
         if (i != j) {
             BlockRedstoneEvent event = new BlockRedstoneEvent(worldIn.getWorld().getBlockAt(upd.self.getX(), upd.self.getY(), upd.self.getZ()), i, j);
-            worldIn.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
             j = event.getNewCurrent();
         }
 
@@ -935,7 +935,7 @@ public class RedstoneWireTurbo {
      * where earlier shape updates have been suppressed to keep a
      * redstone wire in an invalid state.
      */
-    public void updateNeighborShapes(@NotNull Level level, @NotNull BlockPos pos, @NotNull BlockState state) {
+    public static void updateNeighborShapes(@NotNull Level level, @NotNull BlockPos pos, @NotNull BlockState state) {
         // these updates will be added to the stack and processed after the entire network has updated
         state.updateIndirectNeighbourShapes(level, pos, Block.UPDATE_KNOWN_SHAPE | Block.UPDATE_CLIENTS);
 
diff --git a/src/main/java/com/destroystokyo/paper/util/concurrent/WeakSeqLock.java b/src/main/java/com/destroystokyo/paper/util/concurrent/WeakSeqLock.java
index 4029dc68cf35d63aa70c4a76c35bf65a7fc6358f..3abf67963c1f89483d20b32f6f6c5a9816ba6307 100644
--- a/src/main/java/com/destroystokyo/paper/util/concurrent/WeakSeqLock.java
+++ b/src/main/java/com/destroystokyo/paper/util/concurrent/WeakSeqLock.java
@@ -20,7 +20,7 @@ public final class WeakSeqLock {
         this.lock.lazySet(this.lock.get() + 1);
     }
 
-    public boolean canRead(final long read) {
+    public static boolean canRead(final long read) {
         return (read & 1) == 0;
     }
 
@@ -45,7 +45,7 @@ public final class WeakSeqLock {
         int failures = 0;
         long curr;
 
-        for (curr = this.lock.get(); !this.canRead(curr); curr = this.lock.get()) {
+        for (curr = this.lock.get(); !WeakSeqLock.canRead(curr); curr = this.lock.get()) {
             // without j11, our only backoff is the yield() call...
 
             if (++failures > 5_000) { /* TODO determine a threshold */
diff --git a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
index 28ddab1121e314e82bf764fd89f36714bd7445f8..3a688e0edbcec7eff693796391756ab77d0c27bf 100644
--- a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
+++ b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
@@ -24,6 +24,7 @@ import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.players.PlayerList;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
@@ -313,7 +314,7 @@ public final class ChatProcessor {
 
         private void sendToServer(final ChatType.Bound chatType, final @Nullable Function<Audience, net.minecraft.network.chat.Component> msgFunction) {
             final PlayerChatMessage toConsoleMessage = msgFunction == null ? ChatProcessor.this.message : ChatProcessor.this.message.withUnsignedContent(msgFunction.apply(ChatProcessor.this.server.console));
-            ChatProcessor.this.server.logChatMessage(toConsoleMessage.serverContent(), chatType, ChatProcessor.this.server.getPlayerList().verifyChatTrusted(toConsoleMessage, ChatProcessor.this.player.asChatSender()) ? null : "Not Secure");
+            MinecraftServer.logChatMessage(toConsoleMessage.serverContent(), chatType, PlayerList.verifyChatTrusted(toConsoleMessage, ChatProcessor.this.player.asChatSender()) ? null : "Not Secure");
         }
 
         record ConstantFunction(net.minecraft.network.chat.Component component) implements Function<Audience, net.minecraft.network.chat.Component> {
diff --git a/src/main/java/io/papermc/paper/adventure/providers/ComponentLoggerProviderImpl.java b/src/main/java/io/papermc/paper/adventure/providers/ComponentLoggerProviderImpl.java
index c697910217731ccebf7bb276e7624d6f0c5d2974..0b6ad964361f10878ba0b401d61cd5a8699df8c7 100644
--- a/src/main/java/io/papermc/paper/adventure/providers/ComponentLoggerProviderImpl.java
+++ b/src/main/java/io/papermc/paper/adventure/providers/ComponentLoggerProviderImpl.java
@@ -12,10 +12,10 @@ import org.slf4j.LoggerFactory;
 public class ComponentLoggerProviderImpl implements ComponentLoggerProvider {
     @Override
     public @NotNull ComponentLogger logger(@NotNull LoggerHelper helper, @NotNull String name) {
-        return helper.delegating(LoggerFactory.getLogger(name), this::serialize);
+        return helper.delegating(LoggerFactory.getLogger(name), ComponentLoggerProviderImpl::serialize);
     }
 
-    private @NotNull String serialize(final @NotNull Component message) {
+    private static @NotNull String serialize(final @NotNull Component message) {
         return HexFormattingConverter.SERIALIZER.serialize(GlobalTranslator.render(message, Locale.getDefault()));
     }
 }
diff --git a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
index 5bd346fe0c1f31a31446c287bfd5f4493b970afe..f46c4c07854f4c40eaae7277dd3405e3c2d9ab89 100644
--- a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
@@ -378,21 +378,21 @@ public final class PlayerChunkLoader {
             data.hasSentChunk(chunkX, chunkZ - 1) && data.hasSentChunk(chunkX, chunkZ + 1));
     }
 
-    protected int getMaxConcurrentChunkSends() {
+    protected static int getMaxConcurrentChunkSends() {
         return GlobalConfiguration.get().chunkLoading.maxConcurrentSends;
     }
 
-    protected int getMaxChunkLoads() {
+    protected static int getMaxChunkLoads() {
         double config = GlobalConfiguration.get().chunkLoading.playerMaxConcurrentLoads;
         double max = GlobalConfiguration.get().chunkLoading.globalMaxConcurrentLoads;
         return (int)Math.ceil(Math.min(config * MinecraftServer.getServer().getPlayerCount(), max <= 1.0 ? Double.MAX_VALUE : max));
     }
 
-    protected long getTargetSendPerPlayerAddend() {
+    protected static long getTargetSendPerPlayerAddend() {
         return GlobalConfiguration.get().chunkLoading.targetPlayerChunkSendRate <= 1.0 ? 0L : (long)Math.round(1.0e9 / GlobalConfiguration.get().chunkLoading.targetPlayerChunkSendRate);
     }
 
-    protected long getMaxSendAddend() {
+    protected static long getMaxSendAddend() {
         return GlobalConfiguration.get().chunkLoading.globalMaxChunkSendRate <= 1.0 ? 0L : (long)Math.round(1.0e9 / GlobalConfiguration.get().chunkLoading.globalMaxChunkSendRate);
     }
 
@@ -542,8 +542,8 @@ public final class PlayerChunkLoader {
             return;
         }
 
-        final int maxSends = this.getMaxConcurrentChunkSends();
-        final long nextPlayerDeadline = this.getTargetSendPerPlayerAddend() + time;
+        final int maxSends = PlayerChunkLoader.getMaxConcurrentChunkSends();
+        final long nextPlayerDeadline = PlayerChunkLoader.getTargetSendPerPlayerAddend() + time;
         for (;;) {
             if (this.chunkSendQueue.isEmpty()) {
                 break;
@@ -600,7 +600,7 @@ public final class PlayerChunkLoader {
                 concurrentChunkSends.getAndDecrement();
             });
 
-            nextChunkSend = this.getMaxSendAddend() + time;
+            nextChunkSend = PlayerChunkLoader.getMaxSendAddend() + time;
             if (time < nextChunkSend) {
                 break;
             }
@@ -617,7 +617,7 @@ public final class PlayerChunkLoader {
             return;
         }
 
-        final int maxLoads = this.getMaxChunkLoads();
+        final int maxLoads = PlayerChunkLoader.getMaxChunkLoads();
         final long time = System.nanoTime();
         boolean updatedCounters = false;
         for (;;) {
diff --git a/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java b/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java
index 9b28c8e9e5bc2dfa300f5f7a3a41cc6d6136aeb1..1133dae215af4c276d4eab09d2b01484cd1ffa5a 100644
--- a/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java
+++ b/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java
@@ -58,7 +58,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
 
     protected static final RegionFileType[] CACHED_REGIONFILE_TYPES = RegionFileType.values();
 
-    private @NotNull ChunkDataController getControllerFor(final @NotNull ServerLevel world, final @NotNull RegionFileType type) {
+    private static @NotNull ChunkDataController getControllerFor(final @NotNull ServerLevel world, final @NotNull RegionFileType type) {
         switch (type) {
             case CHUNK_DATA:
                 return world.chunkDataControllerNew;
@@ -305,7 +305,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
     }
 
     @Nullable CompoundTag getPendingWriteInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type) {
-        final ChunkDataController taskController = this.getControllerFor(world, type);
+        final ChunkDataController taskController = RegionFileIOThread.getControllerFor(world, type);
         final ChunkDataTask task = taskController.tasks.get(Long.valueOf(CoordinateUtils.getChunkKey(chunkX, chunkZ)));
 
         if (task == null) {
@@ -331,7 +331,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
     }
 
     PrioritisedExecutor.Priority getPriorityInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type) {
-        final ChunkDataController taskController = this.getControllerFor(world, type);
+        final ChunkDataController taskController = RegionFileIOThread.getControllerFor(world, type);
         final ChunkDataTask task = taskController.tasks.get(Long.valueOf(CoordinateUtils.getChunkKey(chunkX, chunkZ)));
 
         if (task == null) {
@@ -387,7 +387,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
 
     void setPriorityInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type,
                              final PrioritisedExecutor.Priority priority) {
-        final ChunkDataController taskController = this.getControllerFor(world, type);
+        final ChunkDataController taskController = RegionFileIOThread.getControllerFor(world, type);
         final ChunkDataTask task = taskController.tasks.get(Long.valueOf(CoordinateUtils.getChunkKey(chunkX, chunkZ)));
 
         if (task != null) {
@@ -437,7 +437,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
 
     void raisePriorityInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type,
                                final PrioritisedExecutor.Priority priority) {
-        final ChunkDataController taskController = this.getControllerFor(world, type);
+        final ChunkDataController taskController = RegionFileIOThread.getControllerFor(world, type);
         final ChunkDataTask task = taskController.tasks.get(Long.valueOf(CoordinateUtils.getChunkKey(chunkX, chunkZ)));
 
         if (task != null) {
@@ -487,7 +487,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
 
     void lowerPriorityInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type,
                                final PrioritisedExecutor.Priority priority) {
-        final ChunkDataController taskController = this.getControllerFor(world, type);
+        final ChunkDataController taskController = RegionFileIOThread.getControllerFor(world, type);
         final ChunkDataTask task = taskController.tasks.get(Long.valueOf(CoordinateUtils.getChunkKey(chunkX, chunkZ)));
 
         if (task != null) {
@@ -551,7 +551,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
 
     void scheduleSaveInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final CompoundTag data,
                               final @NotNull RegionFileType type, final PrioritisedExecutor.Priority priority) {
-        final ChunkDataController taskController = this.getControllerFor(world, type);
+        final ChunkDataController taskController = RegionFileIOThread.getControllerFor(world, type);
 
         final boolean[] created = new boolean[1];
         final ChunkCoordinate key = new ChunkCoordinate(CoordinateUtils.getChunkKey(chunkX, chunkZ));
@@ -834,7 +834,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
     @NotNull Cancellable loadDataAsyncInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
                                                final @NotNull RegionFileType type, final @NotNull BiConsumer<CompoundTag, Throwable> onComplete,
                                                final boolean intendingToBlock, final PrioritisedExecutor.Priority priority) {
-        final ChunkDataController taskController = this.getControllerFor(world, type);
+        final ChunkDataController taskController = RegionFileIOThread.getControllerFor(world, type);
 
         final ImmediateCallbackCompletion callbackInfo = new ImmediateCallbackCompletion();
 
diff --git a/src/main/java/io/papermc/paper/command/subcommands/ChunkDebugCommand.java b/src/main/java/io/papermc/paper/command/subcommands/ChunkDebugCommand.java
index 628c549b1436c3de75071ecd6182a9beadd4840b..c48e64ad8e059b6b68574c8d1ce62ff12449b104 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/ChunkDebugCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/ChunkDebugCommand.java
@@ -35,9 +35,9 @@ public final class ChunkDebugCommand implements PaperSubcommand {
     @Override
     public boolean execute(final CommandSender sender, final String subCommand, final String[] args) {
         switch (subCommand) {
-            case "debug" -> this.doDebug(sender, args);
-            case "chunkinfo" -> this.doChunkInfo(sender, args);
-            case "holderinfo" -> this.doHolderInfo(sender, args);
+            case "debug" -> ChunkDebugCommand.doDebug(sender, args);
+            case "chunkinfo" -> ChunkDebugCommand.doChunkInfo(sender, args);
+            case "holderinfo" -> ChunkDebugCommand.doHolderInfo(sender, args);
         }
         return true;
     }
@@ -74,7 +74,7 @@ public final class ChunkDebugCommand implements PaperSubcommand {
         return Collections.emptyList();
     }
 
-    private void doChunkInfo(final CommandSender sender, final String[] args) {
+    private static void doChunkInfo(final CommandSender sender, final String[] args) {
         List<org.bukkit.World> worlds;
         if (args.length < 1 || args[0].equals("*")) {
             worlds = Bukkit.getWorlds();
@@ -149,7 +149,7 @@ public final class ChunkDebugCommand implements PaperSubcommand {
         }
     }
 
-    private void doHolderInfo(final CommandSender sender, final String[] args) {
+    private static void doHolderInfo(final CommandSender sender, final String[] args) {
         List<org.bukkit.World> worlds;
         if (args.length < 1 || args[0].equals("*")) {
             worlds = Bukkit.getWorlds();
@@ -232,7 +232,7 @@ public final class ChunkDebugCommand implements PaperSubcommand {
         }
     }
 
-    private void doDebug(final CommandSender sender, final String[] args) {
+    private static void doDebug(final CommandSender sender, final String[] args) {
         if (args.length < 1) {
             sender.sendMessage(text("Use /paper debug [chunks] help for more information on a specific command", RED));
             return;
diff --git a/src/main/java/io/papermc/paper/command/subcommands/DumpItemCommand.java b/src/main/java/io/papermc/paper/command/subcommands/DumpItemCommand.java
index 771503ff637fea10d4d8be0f37f3f146c41791d9..2a28ac8426de5ff36e713d213576311219fe6b27 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/DumpItemCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/DumpItemCommand.java
@@ -27,11 +27,11 @@ import static net.kyori.adventure.text.format.TextDecoration.ITALIC;
 public final class DumpItemCommand implements PaperSubcommand {
     @Override
     public boolean execute(final CommandSender sender, final String subCommand, final String[] args) {
-        this.doDumpItem(sender);
+        DumpItemCommand.doDumpItem(sender);
         return true;
     }
 
-    private void doDumpItem(final CommandSender sender) {
+    private static void doDumpItem(final CommandSender sender) {
         if (!(sender instanceof Player)) {
             sender.sendMessage("Only players can use this command");
             return;
diff --git a/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java b/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
index 4f9b0f8edf3d8acd35491768b6ab1eac9ff602aa..4297332b76c6f1c591361fa298bc5b8745c97ee6 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
@@ -33,7 +33,7 @@ import static net.kyori.adventure.text.format.NamedTextColor.RED;
 public final class EntityCommand implements PaperSubcommand {
     @Override
     public boolean execute(final CommandSender sender, final String subCommand, final String[] args) {
-        this.listEntities(sender, args);
+        EntityCommand.listEntities(sender, args);
         return true;
     }
 
@@ -50,7 +50,7 @@ public final class EntityCommand implements PaperSubcommand {
     /*
      * Ported from MinecraftForge - author: LexManos <LexManos@gmail.com> - License: LGPLv2.1
      */
-    private void listEntities(final CommandSender sender, final String[] args) {
+    private static void listEntities(final CommandSender sender, final String[] args) {
         // help
         if (args.length < 1 || !args[0].toLowerCase(Locale.ENGLISH).equals("list")) {
             sender.sendMessage(text("Use /paper entity [list] help for more information on a specific command", RED));
diff --git a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
index 1010b916cf1ecef6c787896b002424f61b102d63..11dfece2a56d0adb1c4cbcb76269d02d4657dd1d 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
@@ -1,17 +1,12 @@
 package io.papermc.paper.command.subcommands;
 
 import io.papermc.paper.command.PaperSubcommand;
-import java.util.ArrayDeque;
-import java.util.Deque;
 import net.minecraft.server.MCUtil;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.ThreadedLevelLightEngine;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkAccess;
-import net.minecraft.world.level.chunk.LevelChunk;
 import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.entity.Player;
@@ -23,7 +18,6 @@ import org.jetbrains.annotations.NotNull;
 import static net.kyori.adventure.text.Component.text;
 import static net.kyori.adventure.text.format.NamedTextColor.BLUE;
 import static net.kyori.adventure.text.format.NamedTextColor.DARK_AQUA;
-import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
 import static net.kyori.adventure.text.format.NamedTextColor.RED;
 
 @DefaultQualifier(NonNull.class)
@@ -63,15 +57,15 @@ public final class FixLightCommand implements PaperSubcommand {
         ServerPlayer handle = player.getHandle();
         ServerLevel world = (ServerLevel) handle.level;
         ThreadedLevelLightEngine lightengine = world.getChunkSource().getLightEngine();
-        this.starlightFixLight(handle, world, lightengine, radius, post);
+        FixLightCommand.starlightFixLight(handle, world, lightengine, radius, post);
     }
 
-    private void starlightFixLight(
-        final ServerPlayer sender,
-        final ServerLevel world,
-        final ThreadedLevelLightEngine lightengine,
-        final int radius,
-        final @Nullable Runnable done
+    private static void starlightFixLight(
+	    final ServerPlayer sender,
+	    final ServerLevel world,
+	    final ThreadedLevelLightEngine lightengine,
+	    final int radius,
+	    final @Nullable Runnable done
     ) {
         final long start = System.nanoTime();
         final java.util.LinkedHashSet<ChunkPos> chunks = new java.util.LinkedHashSet<>(MCUtil.getSpiralOutChunks(sender.blockPosition(), radius)); // getChunkCoordinates is actually just bad mappings, this function rets position as blockpos
diff --git a/src/main/java/io/papermc/paper/command/subcommands/HeapDumpCommand.java b/src/main/java/io/papermc/paper/command/subcommands/HeapDumpCommand.java
index cd2e4d792e972b8bf1e07b8961594a670ae949cf..6906838ea7315b7cd3374e0b2c1855fee00f36be 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/HeapDumpCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/HeapDumpCommand.java
@@ -18,11 +18,11 @@ import static net.kyori.adventure.text.format.NamedTextColor.YELLOW;
 public final class HeapDumpCommand implements PaperSubcommand {
     @Override
     public boolean execute(final CommandSender sender, final String subCommand, final String[] args) {
-        this.dumpHeap(sender);
+        HeapDumpCommand.dumpHeap(sender);
         return true;
     }
 
-    private void dumpHeap(final CommandSender sender) {
+    private static void dumpHeap(final CommandSender sender) {
         java.nio.file.Path dir = java.nio.file.Paths.get("./dumps");
         String name = "heap-dump-" + DateTimeFormatter.ofPattern("yyyy-MM-dd_HH.mm.ss").format(LocalDateTime.now());
 
diff --git a/src/main/java/io/papermc/paper/command/subcommands/MobcapsCommand.java b/src/main/java/io/papermc/paper/command/subcommands/MobcapsCommand.java
index 2e02d94e2903c48f6d08e743c1cf8bad9f9662df..0babe44ca2045c8f927e15f8d56981dc482c631c 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/MobcapsCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/MobcapsCommand.java
@@ -15,6 +15,7 @@ import net.kyori.adventure.text.TextComponent;
 import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.format.TextColor;
 import net.minecraft.core.Registry;
+import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.MobCategory;
@@ -45,8 +46,8 @@ public final class MobcapsCommand implements PaperSubcommand {
     @Override
     public boolean execute(final CommandSender sender, final String subCommand, final String[] args) {
         switch (subCommand) {
-            case "mobcaps" -> this.printMobcaps(sender, args);
-            case "playermobcaps" -> this.printPlayerMobcaps(sender, args);
+            case "mobcaps" -> MobcapsCommand.printMobcaps(sender, args);
+            case "playermobcaps" -> MobcapsCommand.printPlayerMobcaps(sender, args);
         }
         return true;
     }
@@ -54,13 +55,13 @@ public final class MobcapsCommand implements PaperSubcommand {
     @Override
     public List<String> tabComplete(final CommandSender sender, final String subCommand, final String[] args) {
         return switch (subCommand) {
-            case "mobcaps" -> CommandUtil.getListMatchingLast(sender, args, this.suggestMobcaps(args));
-            case "playermobcaps" -> CommandUtil.getListMatchingLast(sender, args, this.suggestPlayerMobcaps(sender, args));
+            case "mobcaps" -> CommandUtil.getListMatchingLast(sender, args, MobcapsCommand.suggestMobcaps(args));
+            case "playermobcaps" -> CommandUtil.getListMatchingLast(sender, args, MobcapsCommand.suggestPlayerMobcaps(sender, args));
             default -> throw new IllegalArgumentException();
         };
     }
 
-    private List<String> suggestMobcaps(final String[] args) {
+    private static List<String> suggestMobcaps(final String[] args) {
         if (args.length == 1) {
             final List<String> worlds = new ArrayList<>(Bukkit.getWorlds().stream().map(World::getName).toList());
             worlds.add("*");
@@ -70,7 +71,7 @@ public final class MobcapsCommand implements PaperSubcommand {
         return Collections.emptyList();
     }
 
-    private List<String> suggestPlayerMobcaps(final CommandSender sender, final String[] args) {
+    private static List<String> suggestPlayerMobcaps(final CommandSender sender, final String[] args) {
         if (args.length == 1) {
             final List<String> list = new ArrayList<>();
             for (final Player player : Bukkit.getOnlinePlayers()) {
@@ -84,7 +85,7 @@ public final class MobcapsCommand implements PaperSubcommand {
         return Collections.emptyList();
     }
 
-    private void printMobcaps(final CommandSender sender, final String[] args) {
+    private static void printMobcaps(final CommandSender sender, final String[] args) {
         final List<World> worlds;
         if (args.length == 0) {
             if (sender instanceof Player player) {
@@ -140,7 +141,7 @@ public final class MobcapsCommand implements PaperSubcommand {
         }
     }
 
-    private void printPlayerMobcaps(final CommandSender sender, final String[] args) {
+    private static void printPlayerMobcaps(final CommandSender sender, final String[] args) {
         final @Nullable Player player;
         if (args.length == 0) {
             if (sender instanceof Player pl) {
@@ -171,7 +172,7 @@ public final class MobcapsCommand implements PaperSubcommand {
 
         sender.sendMessage(Component.join(JoinConfiguration.noSeparators(), Component.text("Mobcaps for player: "), Component.text(player.getName(), NamedTextColor.GREEN)));
         sender.sendMessage(createMobcapsComponent(
-            category -> level.chunkSource.chunkMap.getMobCountNear(serverPlayer, category),
+            category -> ChunkMap.getMobCountNear(serverPlayer, category),
             category -> level.getWorld().getSpawnLimitUnsafe(org.bukkit.craftbukkit.util.CraftSpawnCategory.toBukkit(category))
         ));
     }
diff --git a/src/main/java/io/papermc/paper/command/subcommands/ReloadCommand.java b/src/main/java/io/papermc/paper/command/subcommands/ReloadCommand.java
index bd68139ae635f2ad7ec8e7a21e0056a139c4c62e..9b01c10cef648aed841b8759a4fd2595b87214d4 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/ReloadCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/ReloadCommand.java
@@ -16,11 +16,11 @@ import static net.kyori.adventure.text.format.NamedTextColor.RED;
 public final class ReloadCommand implements PaperSubcommand {
     @Override
     public boolean execute(final CommandSender sender, final String subCommand, final String[] args) {
-        this.doReload(sender);
+        ReloadCommand.doReload(sender);
         return true;
     }
 
-    private void doReload(final CommandSender sender) {
+    private static void doReload(final CommandSender sender) {
         Command.broadcastCommandMessage(sender, text("Please note that this command is not supported and may cause issues.", RED));
         Command.broadcastCommandMessage(sender, text("If you encounter any issues please use the /stop command to restart your server.", RED));
 
diff --git a/src/main/java/io/papermc/paper/command/subcommands/SyncLoadInfoCommand.java b/src/main/java/io/papermc/paper/command/subcommands/SyncLoadInfoCommand.java
index 1120aef5b0dd983c467167f77245884e1198552a..09f7396612d237c317dba86274e6a167ec50676d 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/SyncLoadInfoCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/SyncLoadInfoCommand.java
@@ -26,7 +26,7 @@ import static net.kyori.adventure.text.format.NamedTextColor.RED;
 public final class SyncLoadInfoCommand implements PaperSubcommand {
     @Override
     public boolean execute(final CommandSender sender, final String subCommand, final String[] args) {
-        this.doSyncLoadInfo(sender, args);
+        SyncLoadInfoCommand.doSyncLoadInfo(sender, args);
         return true;
     }
 
@@ -35,7 +35,7 @@ public final class SyncLoadInfoCommand implements PaperSubcommand {
         return CommandUtil.getListMatchingLast(sender, args, "clear");
     }
 
-    private void doSyncLoadInfo(final CommandSender sender, final String[] args) {
+    private static void doSyncLoadInfo(final CommandSender sender, final String[] args) {
         if (!SyncLoadFinder.ENABLED) {
             sender.sendMessage(text("This command requires the server startup flag '-Dpaper.debug-sync-loads=true' to be set.", RED));
             return;
diff --git a/src/main/java/io/papermc/paper/configuration/Configurations.java b/src/main/java/io/papermc/paper/configuration/Configurations.java
index d98b6e213365a585ef3d47b1ba858bcecf2bc0b9..2bb1b6d89bbed9007565a42eb3c8f94d6144c9dd 100644
--- a/src/main/java/io/papermc/paper/configuration/Configurations.java
+++ b/src/main/java/io/papermc/paper/configuration/Configurations.java
@@ -58,7 +58,7 @@ public abstract class Configurations<G, W> {
         this.worldConfigFileName = worldConfigFileName;
     }
 
-    protected ObjectMapper.Factory.Builder createObjectMapper() {
+    protected static ObjectMapper.Factory.Builder createObjectMapper() {
         return ObjectMapper.factoryBuilder()
             .addConstraint(Constraint.class, new Constraint.Factory())
             .addConstraint(Constraints.Min.class, Number.class, new Constraints.Min.Factory());
@@ -71,7 +71,7 @@ public abstract class Configurations<G, W> {
     protected abstract boolean isConfigType(final Type type);
 
     protected ObjectMapper.Factory.Builder createGlobalObjectMapperFactoryBuilder() {
-        return this.createObjectMapper();
+        return Configurations.createObjectMapper();
     }
 
     @MustBeInvokedByOverriders
@@ -102,7 +102,7 @@ public abstract class Configurations<G, W> {
         return this.initializeGlobalConfiguration(creator(this.globalConfigClass, true));
     }
 
-    private void trySaveFileNode(YamlConfigurationLoader loader, ConfigurationNode node, String filename) throws ConfigurateException {
+    private static void trySaveFileNode(YamlConfigurationLoader loader, ConfigurationNode node, String filename) throws ConfigurateException {
         try {
             loader.save(node);
         } catch (ConfigurateException ex) {
@@ -175,7 +175,7 @@ public abstract class Configurations<G, W> {
     }
 
     protected ObjectMapper.Factory.Builder createWorldObjectMapperFactoryBuilder(final ContextMap contextMap) {
-        return this.createObjectMapper();
+        return Configurations.createObjectMapper();
     }
 
     @MustBeInvokedByOverriders
diff --git a/src/main/java/io/papermc/paper/configuration/serializer/TableSerializer.java b/src/main/java/io/papermc/paper/configuration/serializer/TableSerializer.java
index 346422c5eb791961061cc73b9b827d63bbd67daf..2d200b803badeb1c317b0ae95666357069494091 100644
--- a/src/main/java/io/papermc/paper/configuration/serializer/TableSerializer.java
+++ b/src/main/java/io/papermc/paper/configuration/serializer/TableSerializer.java
@@ -25,13 +25,13 @@ public class TableSerializer implements TypeSerializer<Table<?, ?, ?>> {
     public Table<?, ?, ?> deserialize(final Type type, final ConfigurationNode node) throws SerializationException {
         final Table<?, ?, ?> table = HashBasedTable.create();
         if (!node.empty() && node.isMap()) {
-            this.deserialize0(table, (ParameterizedType) type, node);
+            TableSerializer.deserialize0(table, (ParameterizedType) type, node);
         }
         return table;
     }
 
     @SuppressWarnings("unchecked")
-    private <R, C, V> void deserialize0(final Table<R, C, V> table, final ParameterizedType type, final ConfigurationNode node) throws SerializationException {
+    private static <R, C, V> void deserialize0(final Table<R, C, V> table, final ParameterizedType type, final ConfigurationNode node) throws SerializationException {
         final Type rowType = type.getActualTypeArguments()[ROW_TYPE_ARGUMENT_INDEX];
         final Type columnType = type.getActualTypeArguments()[COLUMN_TYPE_ARGUMENT_INDEX];
         final Type valueType = type.getActualTypeArguments()[VALUE_TYPE_ARGUMENT_INDEX];
@@ -59,12 +59,12 @@ public class TableSerializer implements TypeSerializer<Table<?, ?, ?>> {
     @Override
     public void serialize(final Type type, @Nullable final Table<?, ?, ?> table, final ConfigurationNode node) throws SerializationException {
         if (table != null) {
-            this.serialize0(table, (ParameterizedType) type, node);
+            TableSerializer.serialize0(table, (ParameterizedType) type, node);
         }
     }
 
     @SuppressWarnings({"rawtypes", "unchecked"})
-    private <R, C, V> void serialize0(final Table<R, C, V> table, final ParameterizedType type, final ConfigurationNode node) throws SerializationException {
+    private static <R, C, V> void serialize0(final Table<R, C, V> table, final ParameterizedType type, final ConfigurationNode node) throws SerializationException {
         final Type rowType = type.getActualTypeArguments()[ROW_TYPE_ARGUMENT_INDEX];
         final Type columnType = type.getActualTypeArguments()[COLUMN_TYPE_ARGUMENT_INDEX];
         final Type valueType = type.getActualTypeArguments()[VALUE_TYPE_ARGUMENT_INDEX];
diff --git a/src/main/java/io/papermc/paper/configuration/serializer/collections/MapSerializer.java b/src/main/java/io/papermc/paper/configuration/serializer/collections/MapSerializer.java
index f44d4cb05eab25d79a8ac09b9da981633380c4fc..3e5e94ea11a670a846e18b4da43e09c66d52ce3f 100644
--- a/src/main/java/io/papermc/paper/configuration/serializer/collections/MapSerializer.java
+++ b/src/main/java/io/papermc/paper/configuration/serializer/collections/MapSerializer.java
@@ -81,7 +81,7 @@ public class MapSerializer implements TypeSerializer<Map<?, ?>> {
         return map;
     }
 
-    private @Nullable Object deserialize(Type type, TypeSerializer<?> serializer, String mapPart, ConfigurationNode node, NodePath path) {
+    private static @Nullable Object deserialize(Type type, TypeSerializer<?> serializer, String mapPart, ConfigurationNode node, NodePath path) {
         try {
             return serializer.deserialize(type, node);
         } catch (SerializationException ex) {
@@ -141,7 +141,7 @@ public class MapSerializer implements TypeSerializer<Map<?, ?>> {
     }
 
     @SuppressWarnings({"rawtypes", "unchecked"})
-    private boolean serialize(Type type, TypeSerializer serializer, Object object, String mapPart, ConfigurationNode node, NodePath path) {
+    private static boolean serialize(Type type, TypeSerializer serializer, Object object, String mapPart, ConfigurationNode node, NodePath path) {
         try {
             serializer.serialize(type, object, node);
             return true;
diff --git a/src/main/java/io/papermc/paper/console/BrigadierCommandCompleter.java b/src/main/java/io/papermc/paper/console/BrigadierCommandCompleter.java
index f0a77fd63f31e891c9c02f0e3b4024b5918a56a5..63ebdb1887d314de449602b63ce03add0c9fd493 100644
--- a/src/main/java/io/papermc/paper/console/BrigadierCommandCompleter.java
+++ b/src/main/java/io/papermc/paper/console/BrigadierCommandCompleter.java
@@ -36,22 +36,22 @@ public final class BrigadierCommandCompleter {
         if (this.server.overworld() == null) { // check if overworld is null, as worlds haven't been loaded yet
             return;
         } else if (!io.papermc.paper.configuration.GlobalConfiguration.get().console.enableBrigadierCompletions) {
-            this.addCandidates(candidates, Collections.emptyList(), existing);
+            BrigadierCommandCompleter.addCandidates(candidates, Collections.emptyList(), existing);
             return;
         }
         final CommandDispatcher<CommandSourceStack> dispatcher = this.server.getCommands().getDispatcher();
         final ParseResults<CommandSourceStack> results = dispatcher.parse(prepareStringReader(line.line()), this.commandSourceStack.get());
-        this.addCandidates(
+        BrigadierCommandCompleter.addCandidates(
             candidates,
             dispatcher.getCompletionSuggestions(results, line.cursor()).join().getList(),
             existing
         );
     }
 
-    private void addCandidates(
-        final @NonNull List<Candidate> candidates,
-        final @NonNull List<Suggestion> brigSuggestions,
-        final @NonNull List<Completion> existing
+    private static void addCandidates(
+	    final @NonNull List<Candidate> candidates,
+	    final @NonNull List<Suggestion> brigSuggestions,
+	    final @NonNull List<Completion> existing
     ) {
         final List<Completion> completions = new ArrayList<>();
         brigSuggestions.forEach(it -> completions.add(toCompletion(it)));
diff --git a/src/main/java/io/papermc/paper/logging/ExtraClassInfoLogEvent.java b/src/main/java/io/papermc/paper/logging/ExtraClassInfoLogEvent.java
index d55b3b80667021f6624f2ea7fe8abab96de28dc2..0341cdda366036004a0bb7750df6713e08200d9b 100644
--- a/src/main/java/io/papermc/paper/logging/ExtraClassInfoLogEvent.java
+++ b/src/main/java/io/papermc/paper/logging/ExtraClassInfoLogEvent.java
@@ -25,7 +25,7 @@ public class ExtraClassInfoLogEvent extends DelegateLogEvent {
         return super.getThrownProxy();
     }
 
-    private void rewriteStackTrace(@NotNull ThrowableProxy throwable) {
+    private static void rewriteStackTrace(@NotNull ThrowableProxy throwable) {
         ExtendedStackTraceElement[] stackTrace = throwable.getExtendedStackTrace();
         for (int i = 0; i < stackTrace.length; i++) {
             ExtendedClassInfo classInfo = stackTrace[i].getExtraClassInfo();
diff --git a/src/main/java/io/papermc/paper/util/table/ZeroCollidingReferenceStateTable.java b/src/main/java/io/papermc/paper/util/table/ZeroCollidingReferenceStateTable.java
index 73f532540189c1a05b3ad99d5de8d6fee4b94c85..244fefafedd12a123e6f1fc8449b30c4ecb13af5 100644
--- a/src/main/java/io/papermc/paper/util/table/ZeroCollidingReferenceStateTable.java
+++ b/src/main/java/io/papermc/paper/util/table/ZeroCollidingReferenceStateTable.java
@@ -24,7 +24,7 @@ public final class ZeroCollidingReferenceStateTable {
 
     public ZeroCollidingReferenceStateTable(final StateHolder<?, ?> state, final @NotNull Map<Property<?>, Comparable<?>> this_map) {
         this.this_state = state;
-        this.this_index_table = this.create_table(this_map.keySet());
+        this.this_index_table = ZeroCollidingReferenceStateTable.create_table(this_map.keySet());
 
         int max_id = -1;
         for (final Property<?> property : this_map.keySet()) {
@@ -45,7 +45,7 @@ public final class ZeroCollidingReferenceStateTable {
         final Set<Property<?>> combined = new HashSet<>(table.rowKeySet());
         combined.addAll(this_map.keySet());
 
-        this.index_table = this.create_table(combined);
+        this.index_table = ZeroCollidingReferenceStateTable.create_table(combined);
 
         int max_id = -1;
         for (final Property<?> property : combined) {
@@ -89,7 +89,7 @@ public final class ZeroCollidingReferenceStateTable {
     }
 
 
-    protected long[] create_table(final @NotNull Collection<Property<?>> collection) {
+    protected static long[] create_table(final @NotNull Collection<Property<?>> collection) {
         int max_id = -1;
         for (final Property<?> property : collection) {
             final int id = property.getId();
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 9226a7e26a426a8d4a91c40ed6f2b62355e09f48..f9ff9ad8f3f98eaac4485a47ff992c1e2d57e001 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -27,9 +27,6 @@ import java.net.URL;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.spi.FileSystemProvider;
-import java.security.AccessController;
-import java.security.PrivilegedActionException;
-import java.security.PrivilegedExceptionAction;
 import java.time.Duration;
 import java.time.Instant;
 import java.time.ZonedDateTime;
@@ -47,8 +44,6 @@ import java.util.concurrent.CompletionException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
-import java.util.concurrent.ForkJoinPool;
-import java.util.concurrent.ForkJoinWorkerThread;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -67,7 +62,6 @@ import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.Bootstrap;
-import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.TimeSource;
 import net.minecraft.util.datafix.DataFixers;
@@ -888,13 +882,13 @@ public class Util {
             this.telemetryName = name;
         }
 
-        public void openUrl(URL url) {
+        public static void openUrl(URL url) {
             throw new IllegalStateException("This method is not useful on dedicated servers."); // Paper
         }
 
         public void openUri(URI uri) {
             try {
-                this.openUrl(uri.toURL());
+                OS.openUrl(uri.toURL());
             } catch (MalformedURLException var3) {
                 Util.LOGGER.error("Couldn't open uri '{}'", uri, var3);
             }
@@ -903,7 +897,7 @@ public class Util {
 
         public void openFile(File file) {
             try {
-                this.openUrl(file.toURI().toURL());
+                OS.openUrl(file.toURI().toURL());
             } catch (MalformedURLException var3) {
                 Util.LOGGER.error("Couldn't open file '{}'", file, var3);
             }
@@ -921,7 +915,7 @@ public class Util {
 
         public void openUri(String uri) {
             try {
-                this.openUrl((new URI(uri)).toURL());
+                OS.openUrl((new URI(uri)).toURL());
             } catch (MalformedURLException | IllegalArgumentException | URISyntaxException var3) {
                 Util.LOGGER.error("Couldn't open uri '{}'", uri, var3);
             }
diff --git a/src/main/java/net/minecraft/commands/CommandSourceStack.java b/src/main/java/net/minecraft/commands/CommandSourceStack.java
index 0d140dd7d55407b57fc3394ceb2eba5136e4fcaf..b42b99b3665ec14069748ba1ecf170332d87fc32 100644
--- a/src/main/java/net/minecraft/commands/CommandSourceStack.java
+++ b/src/main/java/net/minecraft/commands/CommandSourceStack.java
@@ -209,7 +209,7 @@ public class CommandSourceStack implements SharedSuggestionProvider, com.destroy
     // CraftBukkit start
     public boolean hasPermission(int i, String bukkitPermission) {
         // World is null when loading functions
-        return ((this.getLevel() == null || !this.getLevel().getCraftServer().ignoreVanillaPermissions) && this.permissionLevel >= i) || this.getBukkitSender().hasPermission(bukkitPermission);
+        return ((this.getLevel() == null || !Level.getCraftServer().ignoreVanillaPermissions) && this.permissionLevel >= i) || this.getBukkitSender().hasPermission(bukkitPermission);
     }
     // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 7c96f7fc5997761426a0c62cad0cab5cc668f282..7640d991e1fb709f2ba1a56812ad394956b863e8 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -107,6 +107,7 @@ import net.minecraft.server.commands.WorldBorderCommand;
 import net.minecraft.server.commands.data.DataCommands;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.profiling.jfr.JvmProfiler;
+import net.minecraft.world.level.Level;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -265,7 +266,7 @@ public class Commands {
         }
 
         // Handle vanilla commands;
-        if (sender.getLevel().getCraftServer().getCommandBlockOverride(args[0])) {
+        if (Level.getCraftServer().getCommandBlockOverride(args[0])) {
             args[0] = "minecraft:" + args[0];
         }
 
@@ -414,7 +415,7 @@ public class Commands {
         });
     }
 
-    private void runSync(ServerPlayer player, Collection<String> bukkit, RootCommandNode<SharedSuggestionProvider> rootcommandnode) {
+    private static void runSync(ServerPlayer player, Collection<String> bukkit, RootCommandNode<SharedSuggestionProvider> rootcommandnode) {
         // Paper end - Async command map building
         new com.destroystokyo.paper.event.brigadier.AsyncPlayerSendCommandsEvent<CommandSourceStack>(player.getBukkitEntity(), (RootCommandNode) rootcommandnode, false).callEvent(); // Paper
         PlayerCommandSendEvent event = new PlayerCommandSendEvent(player.getBukkitEntity(), new LinkedHashSet<>(bukkit));
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index 6b2ef5254adfcc677078493d707806ed813c4a71..8187233b442e5c5810ed01a6c2c60459c4fe322d 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -260,7 +260,7 @@ public class BlockStateParser {
         }
     }
 
-    private CompletableFuture<Suggestions> suggestEquals(SuggestionsBuilder builder) {
+    private static CompletableFuture<Suggestions> suggestEquals(SuggestionsBuilder builder) {
         if (builder.getRemaining().isEmpty()) {
             builder.suggest(String.valueOf('='));
         }
@@ -446,7 +446,7 @@ public class BlockStateParser {
                 }
 
                 this.reader.skipWhitespace();
-                this.suggestions = this::suggestEquals;
+                this.suggestions = BlockStateParser::suggestEquals;
                 if (!this.reader.canRead() || this.reader.peek() != '=') {
                     throw BlockStateParser.ERROR_EXPECTED_VALUE.createWithContext(this.reader, this.id.toString(), s);
                 }
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
index 1b8cc61bacf2256576c5eab5acf91b30c48c5fea..0b83a65959526c1be5541b01cf2f911dc5494d1d 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
@@ -153,7 +153,7 @@ public class EntitySelectorParser {
                 axisalignedbb = null;
             }
         } else {
-            axisalignedbb = this.createAabb(this.deltaX == null ? 0.0D : this.deltaX.doubleValue(), this.deltaY == null ? 0.0D : this.deltaY.doubleValue(), this.deltaZ == null ? 0.0D : this.deltaZ.doubleValue());
+            axisalignedbb = EntitySelectorParser.createAabb(this.deltaX == null ? 0.0D : this.deltaX.doubleValue(), this.deltaY == null ? 0.0D : this.deltaY.doubleValue(), this.deltaZ == null ? 0.0D : this.deltaZ.doubleValue());
         }
 
         Function<Vec3, Vec3> function; // CraftBukkit - decompile error
@@ -171,7 +171,7 @@ public class EntitySelectorParser {
         return new EntitySelector(this.maxResults, this.includesEntities, this.worldLimited, this.predicate, this.distance, function, axisalignedbb, this.order, this.currentEntity, this.playerName, this.entityUUID, this.type, this.usesSelectors);
     }
 
-    private AABB createAabb(double x, double y, double z) {
+    private static AABB createAabb(double x, double y, double z) {
         boolean flag = x < 0.0D;
         boolean flag1 = y < 0.0D;
         boolean flag2 = z < 0.0D;
@@ -187,11 +187,11 @@ public class EntitySelectorParser {
 
     private void finalizePredicates() {
         if (this.rotX != WrappedMinMaxBounds.ANY) {
-            this.predicate = this.predicate.and(this.createRotationPredicate(this.rotX, Entity::getXRot));
+            this.predicate = this.predicate.and(EntitySelectorParser.createRotationPredicate(this.rotX, Entity::getXRot));
         }
 
         if (this.rotY != WrappedMinMaxBounds.ANY) {
-            this.predicate = this.predicate.and(this.createRotationPredicate(this.rotY, Entity::getYRot));
+            this.predicate = this.predicate.and(EntitySelectorParser.createRotationPredicate(this.rotY, Entity::getYRot));
         }
 
         if (!this.level.isAny()) {
@@ -202,7 +202,7 @@ public class EntitySelectorParser {
 
     }
 
-    private Predicate<Entity> createRotationPredicate(WrappedMinMaxBounds angleRange, ToDoubleFunction<Entity> entityToAngle) {
+    private static Predicate<Entity> createRotationPredicate(WrappedMinMaxBounds angleRange, ToDoubleFunction<Entity> entityToAngle) {
         double d0 = (double) Mth.wrapDegrees(angleRange.getMin() == null ? 0.0F : angleRange.getMin().floatValue());
         double d1 = (double) Mth.wrapDegrees(angleRange.getMax() == null ? 359.0F : angleRange.getMax().floatValue());
 
@@ -217,7 +217,7 @@ public class EntitySelectorParser {
     protected void parseSelector(boolean overridePermissions) throws CommandSyntaxException {
         this.usesSelectors = !overridePermissions;
         // CraftBukkit end
-        this.suggestions = this::suggestSelector;
+        this.suggestions = EntitySelectorParser::suggestSelector;
         if (!this.reader.canRead()) {
             throw EntitySelectorParser.ERROR_MISSING_SELECTOR_TYPE.createWithContext(this.reader);
         } else {
@@ -255,7 +255,7 @@ public class EntitySelectorParser {
                 this.predicate = Entity::isAlive;
             }
 
-            this.suggestions = this::suggestOpenOptions;
+            this.suggestions = EntitySelectorParser::suggestOpenOptions;
             if (this.reader.canRead() && this.reader.peek() == '[') {
                 this.reader.skip();
                 this.suggestions = this::suggestOptionsKeyOrClose;
@@ -311,7 +311,7 @@ public class EntitySelectorParser {
                 this.suggestions = EntitySelectorParser.SUGGEST_NOTHING;
                 playerselector_a.handle(this);
                 this.reader.skipWhitespace();
-                this.suggestions = this::suggestOptionsNextOrClose;
+                this.suggestions = EntitySelectorParser::suggestOptionsNextOrClose;
                 if (!this.reader.canRead()) {
                     continue;
                 }
@@ -521,7 +521,7 @@ public class EntitySelectorParser {
         return builder.add(suggestionsbuilder1).buildFuture();
     }
 
-    private CompletableFuture<Suggestions> suggestSelector(SuggestionsBuilder builder, Consumer<SuggestionsBuilder> consumer) {
+    private static CompletableFuture<Suggestions> suggestSelector(SuggestionsBuilder builder, Consumer<SuggestionsBuilder> consumer) {
         SuggestionsBuilder suggestionsbuilder1 = builder.createOffset(builder.getStart() - 1);
 
         EntitySelectorParser.fillSelectorSuggestions(suggestionsbuilder1);
@@ -529,7 +529,7 @@ public class EntitySelectorParser {
         return builder.buildFuture();
     }
 
-    private CompletableFuture<Suggestions> suggestOpenOptions(SuggestionsBuilder builder, Consumer<SuggestionsBuilder> consumer) {
+    private static CompletableFuture<Suggestions> suggestOpenOptions(SuggestionsBuilder builder, Consumer<SuggestionsBuilder> consumer) {
         builder.suggest(String.valueOf('['));
         return builder.buildFuture();
     }
@@ -545,13 +545,13 @@ public class EntitySelectorParser {
         return builder.buildFuture();
     }
 
-    private CompletableFuture<Suggestions> suggestOptionsNextOrClose(SuggestionsBuilder builder, Consumer<SuggestionsBuilder> consumer) {
+    private static CompletableFuture<Suggestions> suggestOptionsNextOrClose(SuggestionsBuilder builder, Consumer<SuggestionsBuilder> consumer) {
         builder.suggest(String.valueOf(','));
         builder.suggest(String.valueOf(']'));
         return builder.buildFuture();
     }
 
-    private CompletableFuture<Suggestions> suggestEquals(SuggestionsBuilder builder, Consumer<SuggestionsBuilder> consumer) {
+    private static CompletableFuture<Suggestions> suggestEquals(SuggestionsBuilder builder, Consumer<SuggestionsBuilder> consumer) {
         builder.suggest(String.valueOf('='));
         return builder.buildFuture();
     }
diff --git a/src/main/java/net/minecraft/core/dispenser/AbstractProjectileDispenseBehavior.java b/src/main/java/net/minecraft/core/dispenser/AbstractProjectileDispenseBehavior.java
index 2542cf94ac76871f4ff02c3524e8606c96f50cc7..147e504ea5eefa1c945f41a39be2ca0896fbb020 100644
--- a/src/main/java/net/minecraft/core/dispenser/AbstractProjectileDispenseBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/AbstractProjectileDispenseBehavior.java
@@ -34,7 +34,7 @@ public abstract class AbstractProjectileDispenseBehavior extends DefaultDispense
 
         BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) enumdirection.getStepX(), (double) ((float) enumdirection.getStepY() + 0.1F), (double) enumdirection.getStepZ()));
         if (!DispenserBlock.eventFired) {
-            worldserver.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
         }
 
         if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
index 9572b5f31009d9d027b7fbacbc5f895a289aa6da..46de38b002f37844d8a9b6b0a681afefca4f8941 100644
--- a/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
@@ -9,6 +9,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.entity.vehicle.ChestBoat;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.DispenserBlock;
 // CraftBukkit start
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -59,7 +60,7 @@ public class BoatDispenseItemBehavior extends DefaultDispenseItemBehavior {
 
         BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d0, d1 + d3, d2));
         if (!DispenserBlock.eventFired) {
-            worldserver.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
         }
 
         if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
index 1e6ba6d9cceda1d4867b183c3dbc03d317ed287f..00c1999278885f882ad34440c6c5e4820828e09a 100644
--- a/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
@@ -32,7 +32,7 @@ public class DefaultDispenseItemBehavior implements DispenseItemBehavior {
         ItemStack itemstack1 = this.execute(pointer, stack);
 
         this.playSound(pointer);
-        this.playAnimation(pointer, enumdirection); // Paper - cache facing direction
+        DefaultDispenseItemBehavior.playAnimation(pointer, enumdirection); // Paper - cache facing direction
         return itemstack1;
     }
 
@@ -75,7 +75,7 @@ public class DefaultDispenseItemBehavior implements DispenseItemBehavior {
 
         BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), CraftVector.toBukkit(entityitem.getDeltaMovement()));
         if (!DispenserBlock.eventFired) {
-            world.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
         }
 
         if (event.isCancelled()) {
@@ -107,7 +107,7 @@ public class DefaultDispenseItemBehavior implements DispenseItemBehavior {
         pointer.getLevel().levelEvent(1000, pointer.getPos(), 0);
     }
 
-    protected void playAnimation(BlockSource pointer, Direction side) {
+    protected static void playAnimation(BlockSource pointer, Direction side) {
         pointer.getLevel().levelEvent(2000, pointer.getPos(), side.get3DDataValue());
     }
 }
diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index e5a6ba8544057e917e72efcdca35ccd0d40c8ce9..0b031d3ae001d2b186d74740dcf9c0462615181d 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -221,7 +221,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
                 if (!DispenserBlock.eventFired) {
-                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -275,7 +275,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
                 if (!DispenserBlock.eventFired) {
-                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -327,7 +327,7 @@ public interface DispenseItemBehavior {
 
                     BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) list.get(0).getBukkitEntity());
                     if (!DispenserBlock.eventFired) {
-                        world.getCraftServer().getPluginManager().callEvent(event);
+                        Level.getCraftServer().getPluginManager().callEvent(event);
                     }
 
                     if (event.isCancelled()) {
@@ -382,7 +382,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) entityhorseabstract.getBukkitEntity());
                 if (!DispenserBlock.eventFired) {
-                    world.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -454,7 +454,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) entityhorsechestedabstract.getBukkitEntity());
                 if (!DispenserBlock.eventFired) {
-                    world.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -490,7 +490,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(enumdirection.getStepX(), enumdirection.getStepY(), enumdirection.getStepZ()));
                 if (!DispenserBlock.eventFired) {
-                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -546,7 +546,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d3, d4, d5));
                 if (!DispenserBlock.eventFired) {
-                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -615,7 +615,7 @@ public interface DispenseItemBehavior {
 
                     BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(x, y, z));
                     if (!DispenserBlock.eventFired) {
-                        worldserver.getCraftServer().getPluginManager().callEvent(event);
+                        Level.getCraftServer().getPluginManager().callEvent(event);
                     }
 
                     if (event.isCancelled()) {
@@ -688,7 +688,7 @@ public interface DispenseItemBehavior {
 
                         BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
                         if (!DispenserBlock.eventFired) {
-                            worldserver.getCraftServer().getPluginManager().callEvent(event);
+                            Level.getCraftServer().getPluginManager().callEvent(event);
                         }
 
                         if (event.isCancelled()) {
@@ -735,7 +735,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
                 if (!DispenserBlock.eventFired) {
-                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -796,7 +796,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
                 if (!DispenserBlock.eventFired) {
-                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -864,7 +864,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D));
                 if (!DispenserBlock.eventFired) {
-                   worldserver.getCraftServer().getPluginManager().callEvent(event);
+                   Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -919,7 +919,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
                 if (!DispenserBlock.eventFired) {
-                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -968,7 +968,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
                 if (!DispenserBlock.eventFired) {
-                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
@@ -1041,7 +1041,7 @@ public interface DispenseItemBehavior {
 
                 BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
                 if (!DispenserBlock.eventFired) {
-                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                 }
 
                 if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
index d110d41338cdfae157afa5ff527815220a336933..613f38a9f84077be3ebbff9292d7400362e853db 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
@@ -16,6 +16,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Shearable;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.BeehiveBlock;
 import net.minecraft.world.level.block.DispenserBlock;
 import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
@@ -41,7 +42,7 @@ public class ShearsDispenseItemBehavior extends OptionalDispenseItemBehavior {
 
         BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
         if (!DispenserBlock.eventFired) {
-            worldserver.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
         }
 
         if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
index 38b5d8f7b66f5130dbd126957a4a1e59ec543e4a..d4f958a063b54c4656c95ac22fc780f3f30a2fb4 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
@@ -8,6 +8,7 @@ import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.context.DirectionalPlaceContext;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.DispenserBlock;
 import org.slf4j.Logger;
 
@@ -38,7 +39,7 @@ public class ShulkerBoxDispenseBehavior extends OptionalDispenseItemBehavior {
 
             BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
             if (!DispenserBlock.eventFired) {
-                pointer.getLevel().getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
             }
 
             if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/network/chat/Component.java b/src/main/java/net/minecraft/network/chat/Component.java
index e16c8642203f55255dc54ab01569f091af530728..911b868376e9d04a2bf03c773242db26d926e7b7 100644
--- a/src/main/java/net/minecraft/network/chat/Component.java
+++ b/src/main/java/net/minecraft/network/chat/Component.java
@@ -378,7 +378,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
             return json.has("separator") ? Optional.of(this.deserialize(json.get("separator"), type, context)) : Optional.empty();
         }
 
-        private void serializeStyle(Style style, JsonObject json, JsonSerializationContext context) {
+        private static void serializeStyle(Style style, JsonObject json, JsonSerializationContext context) {
             JsonElement jsonelement = context.serialize(style);
 
             if (jsonelement.isJsonObject()) {
@@ -399,7 +399,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
             JsonObject jsonobject = new JsonObject();
 
             if (!ichatbasecomponent.getStyle().isEmpty()) {
-                this.serializeStyle(ichatbasecomponent.getStyle(), jsonobject, jsonserializationcontext);
+                Serializer.serializeStyle(ichatbasecomponent.getStyle(), jsonobject, jsonserializationcontext);
             }
 
             if (!ichatbasecomponent.getSiblings().isEmpty()) {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
index b1e326cf4f7fe447f81b588dcb0eda9a435e59a8..455a120b3e06c8ee6c7423a5669ebddbb0ac40af 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
@@ -17,7 +17,7 @@ public class ClientboundBlockEntityDataPacket implements Packet<ClientGamePacket
     private final CompoundTag tag;
 
     public static ClientboundBlockEntityDataPacket create(BlockEntity blockEntity, Function<BlockEntity, CompoundTag> nbtGetter) {
-        return new ClientboundBlockEntityDataPacket(blockEntity.getBlockPos(), blockEntity.getType(), blockEntity.sanitizeSentNbt(nbtGetter.apply(blockEntity))); // Paper - Sanitize sent data
+        return new ClientboundBlockEntityDataPacket(blockEntity.getBlockPos(), blockEntity.getType(), BlockEntity.sanitizeSentNbt(nbtGetter.apply(blockEntity))); // Paper - Sanitize sent data
     }
 
     public static ClientboundBlockEntityDataPacket create(BlockEntity blockEntity) {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index 6fd2818371e94755f56012820c95754126177a2a..4febf527f8d6889f85237ebb17c1099091a6b72c 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -183,7 +183,7 @@ public class ClientboundLevelChunkPacketData {
             CompoundTag compoundTag = blockEntity.getUpdateTag();
             BlockPos blockPos = blockEntity.getBlockPos();
             int i = SectionPos.sectionRelative(blockPos.getX()) << 4 | SectionPos.sectionRelative(blockPos.getZ());
-            blockEntity.sanitizeSentNbt(compoundTag); // Paper - Sanitize sent data
+            BlockEntity.sanitizeSentNbt(compoundTag); // Paper - Sanitize sent data
             return new ClientboundLevelChunkPacketData.BlockEntityInfo(i, blockPos.getY(), blockEntity.getType(), compoundTag.isEmpty() ? null : compoundTag);
         }
     }
diff --git a/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java b/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
index 40beb6e01fbf24799c292079bef89156db7c9fee..2abf47a9c0c208ef366a3b063a9a7443eafc0c42 100644
--- a/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
+++ b/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
@@ -81,7 +81,7 @@ public class EntityDataSerializers {
             return this.readParticle(friendlyByteBuf, friendlyByteBuf.readById(Registry.PARTICLE_TYPE));
         }
 
-        private <T extends ParticleOptions> T readParticle(FriendlyByteBuf buf, ParticleType<T> type) {
+        private static <T extends ParticleOptions> T readParticle(FriendlyByteBuf buf, ParticleType<T> type) {
             return type.getDeserializer().fromNetwork(type, buf);
         }
     };
diff --git a/src/main/java/net/minecraft/server/ChunkSystem.java b/src/main/java/net/minecraft/server/ChunkSystem.java
index d38beb8183470a48c4c927b78fbed243eebcfe71..3a5934ea4afd93c4702311c0a8760709bde8bf04 100644
--- a/src/main/java/net/minecraft/server/ChunkSystem.java
+++ b/src/main/java/net/minecraft/server/ChunkSystem.java
@@ -1,25 +1,18 @@
 package net.minecraft.server;
 
 import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
-import com.destroystokyo.paper.util.SneakyThrow;
-import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
-import io.papermc.paper.util.CoordinateUtils;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.level.TicketType;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
-import org.bukkit.Bukkit;
 import org.slf4j.Logger;
-import java.util.ArrayList;
+
 import java.util.List;
-import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
 
 public final class ChunkSystem {
@@ -125,7 +118,7 @@ public final class ChunkSystem {
     }
 
     public static ChunkHolder getUnloadingChunkHolder(final ServerLevel level, final int chunkX, final int chunkZ) {
-        return level.chunkSource.chunkMap.getUnloadingChunkHolder(chunkX, chunkZ);
+        return ChunkMap.getUnloadingChunkHolder(chunkX, chunkZ);
     }
 
     public static int getSendViewDistance(final ServerPlayer player) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d5729df2fb1d00c035bbcbf980ba6edca5df2d6e..407e73c03d6dad87448c30d11d98d3573ee169ad 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2,9 +2,6 @@ package net.minecraft.server;
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -80,7 +77,6 @@ import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.ServerPlayerGameMode;
-import net.minecraft.server.level.TicketType;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
 import net.minecraft.server.network.ServerConnectionListener;
@@ -104,7 +100,6 @@ import net.minecraft.util.NativeModuleLister;
 import net.minecraft.util.ProgressListener;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.SignatureValidator;
-import net.minecraft.util.Unit;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.profiling.EmptyProfileResults;
 import net.minecraft.util.profiling.ProfileResults;
@@ -153,6 +148,7 @@ import net.minecraft.world.level.storage.loot.PredicateManager;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.generator.ChunkGenerator;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -170,13 +166,6 @@ import net.minecraft.world.level.levelgen.PhantomSpawner;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.presets.WorldPresets;
-import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.Main;
-import org.bukkit.craftbukkit.generator.CustomWorldChunkManager;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
-import org.bukkit.craftbukkit.util.LazyPlayerSet;
-import org.bukkit.event.player.AsyncPlayerChatPreviewEvent;
 import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
 
@@ -565,7 +554,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             org.bukkit.generator.WorldInfo worldInfo = new org.bukkit.craftbukkit.generator.CraftWorldInfo(iworlddataserver, worldSession, org.bukkit.World.Environment.getEnvironment(dimension), worlddimension.typeHolder().value(), worlddimension.generator(), this.registryAccess()); // Paper
             if (biomeProvider == null && gen != null) {
-                biomeProvider = gen.getDefaultBiomeProvider(worldInfo);
+                biomeProvider = ChunkGenerator.getDefaultBiomeProvider(worldInfo);
             }
 
             // Paper start - fix and optimise world upgrading
@@ -601,7 +590,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 // Paper end
             }
 
-            worlddata.setModdedInfo(this.getServerModName(), this.getModdedStatus().shouldReportAsModified());
+            worlddata.setModdedInfo(MinecraftServer.getServerModName(), this.getModdedStatus().shouldReportAsModified());
             this.addLevel(world); // Paper - move up
             this.initWorld(world, worlddata, worldData, worlddata.worldGenSettings());
 
@@ -646,7 +635,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         boolean flag = generatorsettings.isDebug();
         // CraftBukkit start
         if (worldserver.generator != null) {
-            worldserver.getWorld().getPopulators().addAll(worldserver.generator.getDefaultPopulators(worldserver.getWorld()));
+            worldserver.getWorld().getPopulators().addAll(ChunkGenerator.getDefaultPopulators(worldserver.getWorld()));
         }
         WorldBorder worldborder = worldserver.getWorldBorder();
         worldborder.applySettings(iworlddataserver.getWorldBorder()); // CraftBukkit - move up so that WorldBorder is set during WorldInitEvent
@@ -657,7 +646,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 MinecraftServer.setInitialSpawn(worldserver, iworlddataserver, generatorsettings.generateBonusChest(), flag);
                 iworlddataserver.setInitialized(true);
                 if (flag) {
-                    this.setupDebugLevel(this.worldData);
+                    MinecraftServer.setupDebugLevel(this.worldData);
                 }
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.forThrowable(throwable, "Exception initializing level");
@@ -686,7 +675,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             // CraftBukkit start
             if (world.generator != null) {
                 Random rand = new Random(world.getSeed());
-                org.bukkit.Location spawn = world.generator.getFixedSpawnLocation(world.getWorld(), rand);
+                org.bukkit.Location spawn = ChunkGenerator.getFixedSpawnLocation(world.getWorld(), rand);
 
                 if (spawn != null) {
                     if (spawn.getWorld() != world.getWorld()) {
@@ -743,7 +732,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
-    private void setupDebugLevel(WorldData properties) {
+    private static void setupDebugLevel(WorldData properties) {
         properties.setDifficulty(Difficulty.PEACEFUL);
         properties.setDifficultyLocked(true);
         ServerLevelData iworlddataserver = properties.overworldData();
@@ -1197,7 +1186,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             CrashReport crashreport = MinecraftServer.constructOrExtractCrashReport(throwable);
 
             this.fillSystemReport(crashreport.getSystemReport());
-            File file = new File(new File(this.getServerDirectory(), "crash-reports"), "crash-" + Util.getFilenameFormattedDateTime() + "-server.txt");
+            File file = new File(new File(MinecraftServer.getServerDirectory(), "crash-reports"), "crash-" + Util.getFilenameFormattedDateTime() + "-server.txt");
 
             if (crashreport.saveToFile(file)) {
                 MinecraftServer.LOGGER.error("This crash report has been saved to: {}", file.getAbsolutePath());
@@ -1372,7 +1361,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return this.storageSource.getIconFile();
     }
 
-    public File getServerDirectory() {
+    public static File getServerDirectory() {
         return new File(".");
     }
 
@@ -1600,7 +1589,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public File getFile(String path) {
-        return new File(this.getServerDirectory(), path);
+        return new File(MinecraftServer.getServerDirectory(), path);
     }
 
     public final ServerLevel overworld() {
@@ -1653,7 +1642,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     @DontObfuscate
-    public String getServerModName() {
+    public static String getServerModName() {
         return "CatPaper"; // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
@@ -1703,7 +1692,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public abstract SystemReport fillServerSystemReport(SystemReport details);
 
     public ModCheck getModdedStatus() {
-        return ModCheck.identify("vanilla", this::getServerModName, "Server", MinecraftServer.class);
+        return ModCheck.identify("vanilla", MinecraftServer::getServerModName, "Server", MinecraftServer.class);
     }
 
     @Override
@@ -1774,10 +1763,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     public void setDifficultyLocked(boolean locked) {
         this.worldData.setDifficultyLocked(locked);
-        this.getPlayerList().getPlayers().forEach(this::sendDifficultyUpdate);
+        this.getPlayerList().getPlayers().forEach(MinecraftServer::sendDifficultyUpdate);
     }
 
-    private void sendDifficultyUpdate(ServerPlayer player) {
+    private static void sendDifficultyUpdate(ServerPlayer player) {
         LevelData worlddata = player.getLevel().getLevelData();
 
         player.connection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
@@ -1904,7 +1893,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return false;
     }
 
-    public boolean publishServer(@Nullable GameType gameMode, boolean cheatsAllowed, int port) {
+    public static boolean publishServer(@Nullable GameType gameMode, boolean cheatsAllowed, int port) {
         return false;
     }
 
@@ -2003,7 +1992,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return this.fixerUpper;
     }
 
-    public int getSpawnRadius(@Nullable ServerLevel world) {
+    public static int getSpawnRadius(@Nullable ServerLevel world) {
         return world != null ? world.getGameRules().getInt(GameRules.RULE_SPAWN_RADIUS) : 10;
     }
 
@@ -2256,11 +2245,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }
 
             this.dumpGameRules(path.resolve("gamerules.txt"));
-            this.dumpClasspath(path.resolve("classpath.txt"));
+            MinecraftServer.dumpClasspath(path.resolve("classpath.txt"));
             this.dumpMiscStats(path.resolve("stats.txt"));
-            this.dumpThreads(path.resolve("threads.txt"));
+            MinecraftServer.dumpThreads(path.resolve("threads.txt"));
             this.dumpServerProperties(path.resolve("server.properties.txt"));
-            this.dumpNativeModules(path.resolve("modules.txt"));
+            MinecraftServer.dumpNativeModules(path.resolve("modules.txt"));
         } catch (IOException ioexception) {
             MinecraftServer.LOGGER.warn("Failed to save debug report", ioexception);
         }
@@ -2331,7 +2320,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     }
 
-    private void dumpClasspath(Path path) throws IOException {
+    private static void dumpClasspath(Path path) throws IOException {
         BufferedWriter bufferedwriter = Files.newBufferedWriter(path);
 
         try {
@@ -2363,7 +2352,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     }
 
-    private void dumpThreads(Path path) throws IOException {
+    private static void dumpThreads(Path path) throws IOException {
         ThreadMXBean threadmxbean = ManagementFactory.getThreadMXBean();
         ThreadInfo[] athreadinfo = threadmxbean.dumpAllThreads(true, true);
 
@@ -2398,7 +2387,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     }
 
-    private void dumpNativeModules(Path path) throws IOException {
+    private static void dumpNativeModules(Path path) throws IOException {
         BufferedWriter bufferedwriter = Files.newBufferedWriter(path);
 
         label50:
@@ -2582,7 +2571,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return 1000000;
     }
 
-    public void logChatMessage(Component message, ChatType.Bound params, @Nullable String prefix) {
+    public static void logChatMessage(Component message, ChatType.Bound params, @Nullable String prefix) {
         String s1 = params.decorate(message).getString();
 
         if (prefix != null) {
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index fcbb8c9f87d77dc362b8d67e306a90a394142b26..7ee0121cb672b4f623697592ab0becfee885a6b4 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -47,6 +47,7 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.Level;
 import org.slf4j.Logger;
 
 public class PlayerAdvancements {
@@ -291,7 +292,7 @@ public class PlayerAdvancements {
                 boolean announceToChat = advancement.getDisplay() != null && advancement.getDisplay().shouldAnnounceChat();
                 net.kyori.adventure.text.Component message = announceToChat ? io.papermc.paper.adventure.PaperAdventure.asAdventure(Component.translatable("chat.type.advancement." + advancement.getDisplay().getFrame().getName(), this.player.getDisplayName(), advancement.getChatComponent())) : null;
                 org.bukkit.event.player.PlayerAdvancementDoneEvent event = new org.bukkit.event.player.PlayerAdvancementDoneEvent(this.player.getBukkitEntity(), advancement.bukkit, message);
-                this.player.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
                 message = event.message();
                 // Paper end
                 advancement.getRewards().grant(this.player);
diff --git a/src/main/java/net/minecraft/server/commands/TeleportCommand.java b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
index 2fb604632334b23557fd80c46f9ba03c73309940..817849b87ca8b0b8c9253cbf0552f94887f35d65 100644
--- a/src/main/java/net/minecraft/server/commands/TeleportCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
@@ -175,7 +175,7 @@ public class TeleportCommand {
                 // CraftBukkit start - Teleport event
                 Location to = new Location(world.getWorld(), x, y, z, f2, f4);
                 EntityTeleportEvent event = new EntityTeleportEvent(target.getBukkitEntity(), target.getBukkitEntity().getLocation(), to);
-                world.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
                 if (event.isCancelled()) {
                     return;
                 }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index ea22d05ab9483094de943c9f638ade0783597f2c..9206f5e3985a2d253a51f42505f5a11517e08058 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,20 +1,15 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
+
 import java.io.BufferedWriter;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
-import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
@@ -652,7 +647,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         for (i = 0; !flag && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the user banlist, retrying in a few seconds");
-                this.waitForRetry();
+                DedicatedServer.waitForRetry();
             }
 
             flag = OldUsersConverter.convertUserBanlist(this);
@@ -663,7 +658,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         for (i = 0; !flag1 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the ip banlist, retrying in a few seconds");
-                this.waitForRetry();
+                DedicatedServer.waitForRetry();
             }
 
             flag1 = OldUsersConverter.convertIpBanlist(this);
@@ -674,7 +669,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         for (i = 0; !flag2 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the op list, retrying in a few seconds");
-                this.waitForRetry();
+                DedicatedServer.waitForRetry();
             }
 
             flag2 = OldUsersConverter.convertOpsList(this);
@@ -685,7 +680,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         for (i = 0; !flag3 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the whitelist, retrying in a few seconds");
-                this.waitForRetry();
+                DedicatedServer.waitForRetry();
             }
 
             flag3 = OldUsersConverter.convertWhiteList(this);
@@ -696,7 +691,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         for (i = 0; !flag4 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the player save files, retrying in a few seconds");
-                this.waitForRetry();
+                DedicatedServer.waitForRetry();
             }
 
             flag4 = OldUsersConverter.convertPlayers(this);
@@ -705,7 +700,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         return flag || flag1 || flag2 || flag3 || flag4;
     }
 
-    private void waitForRetry() {
+    private static void waitForRetry() {
         try {
             Thread.sleep(5000L);
         } catch (InterruptedException interruptedexception) {
diff --git a/src/main/java/net/minecraft/server/gui/StatsComponent.java b/src/main/java/net/minecraft/server/gui/StatsComponent.java
index 88f10d729aa1e0a01790521821d691a0ecd373a2..a55dbceeb8d3764261c0cfdf74883512809ef82e 100644
--- a/src/main/java/net/minecraft/server/gui/StatsComponent.java
+++ b/src/main/java/net/minecraft/server/gui/StatsComponent.java
@@ -43,14 +43,14 @@ public class StatsComponent extends JComponent {
             tpsAvg[g] = format( tps[g] );
         }
         this.msgs[0] = "Memory use: " + l / 1024L / 1024L + " mb (" + Runtime.getRuntime().freeMemory() * 100L / Runtime.getRuntime().maxMemory() + "% free)";
-        this.msgs[1] = "Avg tick: " + DECIMAL_FORMAT.format(this.getAverage(this.server.tickTimes) * 1.0E-6D) + " ms";
+        this.msgs[1] = "Avg tick: " + DECIMAL_FORMAT.format(StatsComponent.getAverage(this.server.tickTimes) * 1.0E-6D) + " ms";
         this.msgs[2] = "TPS from last 1m, 5m, 15m: " + String.join(", ", tpsAvg);
         // Paper end
         this.values[this.vp++ & 255] = (int)(l * 100L / Runtime.getRuntime().maxMemory());
         this.repaint();
     }
 
-    private double getAverage(long[] values) {
+    private static double getAverage(long[] values) {
         long l = 0L;
 
         for(long m : values) {
diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index 10a5762e3d5540e24839f82ea875b4daeb9f0603..21f7a1c1cb499f1a045dadf230980f7e85bbef19 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -4,17 +4,14 @@ import com.mojang.datafixers.util.Either;
 import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.shorts.ShortOpenHashSet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
-import java.util.ArrayList;
+
 import java.util.BitSet;
 import java.util.List;
-import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
-import java.util.concurrent.atomic.AtomicReferenceArray;
 import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
 import javax.annotation.Nullable;
-import net.minecraft.Util;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.network.protocol.Packet;
@@ -34,10 +31,9 @@ import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
-import net.minecraft.world.level.chunk.ProtoChunk;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 // CraftBukkit start
-import net.minecraft.server.MinecraftServer;
+
 // CraftBukkit end
 
 public class ChunkHolder {
@@ -166,23 +162,23 @@ public class ChunkHolder {
     }
     // CraftBukkit end
 
-    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getFutureIfPresentUnchecked(ChunkStatus leastStatus) {
+    public static CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getFutureIfPresentUnchecked(ChunkStatus leastStatus) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getFutureIfPresent(ChunkStatus leastStatus) {
+    public static CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getFutureIfPresent(ChunkStatus leastStatus) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    public final CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> getTickingChunkFuture() { // Paper - final for inline
+    public static CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> getTickingChunkFuture() { // Paper - final for inline
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    public final CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> getEntityTickingChunkFuture() { // Paper - final for inline
+    public static CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> getEntityTickingChunkFuture() { // Paper - final for inline
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    public final CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> getFullChunkFuture() { // Paper - final for inline
+    public static CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> getFullChunkFuture() { // Paper - final for inline
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
@@ -400,11 +396,11 @@ public class ChunkHolder {
 
     // Paper - rewrite chunk system
 
-    public void replaceProtoChunk(ImposterProtoChunk chunk) {
+    public static void replaceProtoChunk(ImposterProtoChunk chunk) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    public List<Pair<ChunkStatus, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>>> getAllFutures() {
+    public static List<Pair<ChunkStatus, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>>> getAllFutures() {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 6cb6d8c7b6d421bddc5eaa15d5fa56f34e10213c..17082c51d34428e24f2c627dafb6d7fecc2ef3f6 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -4,10 +4,8 @@ import co.aikar.timings.Timing; // Paper
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableList.Builder;
 import com.google.common.collect.Iterables;
-import com.google.common.collect.ComparisonChain; // Paper
 import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
-import com.google.common.collect.Sets;
 import com.google.gson.JsonElement;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Either;
@@ -20,21 +18,13 @@ import it.unimi.dsi.fastutil.longs.Long2ByteMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2LongMap;
 import it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
-import it.unimi.dsi.fastutil.longs.LongIterator;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
-import it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Path;
-import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Locale;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Queue;
@@ -42,7 +32,6 @@ import java.util.Set;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
-import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BooleanSupplier;
@@ -50,7 +39,6 @@ import java.util.function.Consumer;
 import java.util.function.IntFunction;
 import java.util.function.IntSupplier;
 import java.util.function.Supplier;
-import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -61,31 +49,24 @@ import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
-import net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
-import net.minecraft.network.protocol.game.ClientboundSetPassengersPacket;
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.server.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.server.network.ServerPlayerConnection;
-import net.minecraft.util.CsvOutput;
 import net.minecraft.util.Mth;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.util.thread.BlockableEventLoop;
-import net.minecraft.util.thread.ProcessorHandle;
-import net.minecraft.util.thread.ProcessorMailbox;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.chunk.ChunkStatus;
-import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.level.chunk.ProtoChunk;
@@ -98,17 +79,13 @@ import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
 import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
 import net.minecraft.world.level.levelgen.RandomState;
 import net.minecraft.world.level.levelgen.blending.BlendingData;
-import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
-import net.minecraft.world.phys.Vec3;
-import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.commons.lang3.mutable.MutableObject;
 import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
-import org.bukkit.entity.Player;
 // CraftBukkit end
 
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
@@ -187,7 +164,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         return this.entityTrackerTrackRanges[ordinal];
     }
 
-    private int convertSpigotRangeToVanilla(final int vanilla) {
+    private static int convertSpigotRangeToVanilla(final int vanilla) {
         return MinecraftServer.getServer().getScaledTrackingDistance(vanilla);
     }
     // Paper end - use distance map to optimise tracker
@@ -282,7 +259,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         }
     }
 
-    public final ChunkHolder getUnloadingChunkHolder(int chunkX, int chunkZ) {
+    public static ChunkHolder getUnloadingChunkHolder(int chunkX, int chunkZ) {
         return null; // Paper - rewrite chunk system
     }
     // Paper end
@@ -465,7 +442,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         }
     }
 
-    public int getMobCountNear(ServerPlayer entityPlayer, net.minecraft.world.entity.MobCategory mobCategory) {
+    public static int getMobCountNear(ServerPlayer entityPlayer, net.minecraft.world.entity.MobCategory mobCategory) {
         return entityPlayer.mobCounts[mobCategory.ordinal()];
     }
     // Paper end
@@ -515,7 +492,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         // Paper end - rewrite chunk system
     }
 
-    protected IntSupplier getChunkQueueLevel(long pos) {
+    protected static IntSupplier getChunkQueueLevel(long pos) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
@@ -552,14 +529,14 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
     // Paper end
 
-    private CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> getChunkRangeFuture(ChunkPos centerChunk, int margin, IntFunction<ChunkStatus> distanceToStatus) {
+    private static CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> getChunkRangeFuture(ChunkPos centerChunk, int margin, IntFunction<ChunkStatus> distanceToStatus) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
     public ReportedException debugFuturesAndCreateReportedException(IllegalStateException exception, String details) {
         StringBuilder stringbuilder = new StringBuilder();
         Consumer<ChunkHolder> consumer = (playerchunk) -> {
-            playerchunk.getAllFutures().forEach((pair) -> {
+            ChunkHolder.getAllFutures().forEach((pair) -> {
                 ChunkStatus chunkstatus = (ChunkStatus) pair.getFirst();
                 CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = (CompletableFuture) pair.getSecond();
 
@@ -582,12 +559,12 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         return new ReportedException(crashreport);
     }
 
-    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> prepareEntityTickingChunk(ChunkPos pos) {
+    public static CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> prepareEntityTickingChunk(ChunkPos pos) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
     @Nullable
-    ChunkHolder updateChunkScheduling(long pos, int level, @Nullable ChunkHolder holder, int k) {
+    static ChunkHolder updateChunkScheduling(long pos, int level, @Nullable ChunkHolder holder, int k) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
@@ -623,7 +600,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         gameprofilerfiller.pop();
     }
 
-    public boolean hasWork() {
+    public static boolean hasWork() {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
@@ -632,19 +609,19 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     }
 
-    private void scheduleUnload(long pos, ChunkHolder holder) {
+    private static void scheduleUnload(long pos, ChunkHolder holder) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    protected boolean promoteChunkMap() {
+    protected static boolean promoteChunkMap() {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> schedule(ChunkHolder holder, ChunkStatus requiredStatus) {
+    public static CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> schedule(ChunkHolder holder, ChunkStatus requiredStatus) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> scheduleChunkLoad(ChunkPos pos) {
+    private static CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> scheduleChunkLoad(ChunkPos pos) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
@@ -683,7 +660,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         return this.chunkTypeCache.put(pos.toLong(), (byte) (type == ChunkStatus.ChunkType.PROTOCHUNK ? -1 : 1));
     }
 
-    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> scheduleChunkGeneration(ChunkHolder holder, ChunkStatus requiredStatus) {
+    private static CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> scheduleChunkGeneration(ChunkHolder holder, ChunkStatus requiredStatus) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
@@ -712,7 +689,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             // CraftBukkit start - these are spawned serialized (DefinedStructure) and we don't call an add event below at the moment due to ordering complexities
             world.addWorldGenChunkEntities(EntityType.loadEntitiesRecursive(nbt, world).filter((entity) -> {
                 boolean needsRemoval = false;
-                net.minecraft.server.dedicated.DedicatedServer server = world.getCraftServer().getServer();
+                net.minecraft.server.dedicated.DedicatedServer server = Level.getCraftServer().getServer();
                 if (!server.areNpcsEnabled() && entity instanceof net.minecraft.world.entity.npc.Npc) {
                     entity.discard();
                     needsRemoval = true;
@@ -729,7 +706,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     }
 
-    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> protoChunkToFullChunk(ChunkHolder chunkHolder) {
+    private static CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> protoChunkToFullChunk(ChunkHolder chunkHolder) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
@@ -776,11 +753,11 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         return false;
     }
     // Paper end
-    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> prepareTickingChunk(ChunkHolder holder) {
+    public static CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> prepareTickingChunk(ChunkHolder holder) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> prepareAccessibleChunk(ChunkHolder holder) {
+    public static CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> prepareAccessibleChunk(ChunkHolder holder) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
@@ -788,15 +765,15 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         return this.tickingGenerated.get();
     }
 
-    private boolean saveChunkIfNeeded(ChunkHolder chunkHolder) {
+    private static boolean saveChunkIfNeeded(ChunkHolder chunkHolder) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    public boolean save(ChunkAccess chunk) {
+    public static boolean save(ChunkAccess chunk) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    private boolean isExistingChunkFull(ChunkPos pos) {
+    private static boolean isExistingChunkFull(ChunkPos pos) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
@@ -852,7 +829,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         return Iterables.unmodifiableIterable(net.minecraft.server.ChunkSystem.getVisibleChunkHolders(this.level)); // Paper
     }
 
-    void dumpChunks(Writer writer) throws IOException {
+    static void dumpChunks(Writer writer) throws IOException {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
@@ -981,10 +958,10 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     // Paper start - optimise anyPlayerCloseEnoughForSpawning
     final boolean anyPlayerCloseEnoughForSpawning(ChunkPos chunkcoordintpair, boolean reducedRange) {
-        return this.anyPlayerCloseEnoughForSpawning(this.getUpdatingChunkIfPresent(chunkcoordintpair.toLong()), chunkcoordintpair, reducedRange);
+        return ChunkMap.anyPlayerCloseEnoughForSpawning(this.getUpdatingChunkIfPresent(chunkcoordintpair.toLong()), chunkcoordintpair, reducedRange);
     }
 
-    final boolean anyPlayerCloseEnoughForSpawning(ChunkHolder playerchunk, ChunkPos chunkcoordintpair, boolean reducedRange) {
+    static boolean anyPlayerCloseEnoughForSpawning(ChunkHolder playerchunk, ChunkPos chunkcoordintpair, boolean reducedRange) {
         // this function is so hot that removing the map lookup call can have an order of magnitude impact on its performance
         // tested and confirmed via System.nanoTime()
         com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> playersInRange = reducedRange ? playerchunk.playersInMobSpawnRange : playerchunk.playersInChunkTickRange;
@@ -1035,7 +1012,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             while (iterator.hasNext()) {
                 ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
-                if (this.playerIsCloseEnoughForSpawning(entityplayer, pos, 16384.0D)) { // Spigot
+                if (ChunkMap.playerIsCloseEnoughForSpawning(entityplayer, pos, 16384.0D)) { // Spigot
                     builder.add(entityplayer);
                 }
             }
@@ -1044,7 +1021,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         }
     }
 
-    private boolean playerIsCloseEnoughForSpawning(ServerPlayer entityplayer, ChunkPos chunkcoordintpair, double range) { // Spigot
+    private static boolean playerIsCloseEnoughForSpawning(ServerPlayer entityplayer, ChunkPos chunkcoordintpair, double range) { // Spigot
         if (entityplayer.isSpectator()) {
             return false;
         } else {
@@ -1066,9 +1043,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
         if (added) {
             this.playerMap.addPlayer(ChunkPos.asLong(i, j), player, flag1);
-            this.updatePlayerPos(player);
+            ChunkMap.updatePlayerPos(player);
             if (!flag1) {
-                this.distanceManager.addPlayer(SectionPos.of((EntityAccess) player), player);
+                DistanceManager.addPlayer(SectionPos.of((EntityAccess) player), player);
             }
             this.addPlayerToDistanceMaps(player); // Paper - distance maps
         } else {
@@ -1085,7 +1062,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     }
 
-    private SectionPos updatePlayerPos(ServerPlayer player) {
+    private static SectionPos updatePlayerPos(ServerPlayer player) {
         SectionPos sectionposition = SectionPos.of((EntityAccess) player);
 
         player.setLastSectionPos(sectionposition);
@@ -1107,13 +1084,13 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         boolean flag2 = sectionposition.asLong() != sectionposition1.asLong();
 
         if (flag2 || flag != flag1) {
-            this.updatePlayerPos(player);
+            ChunkMap.updatePlayerPos(player);
             if (!flag) {
                 this.distanceManager.removePlayer(sectionposition, player);
             }
 
             if (!flag1) {
-                this.distanceManager.addPlayer(sectionposition1, player);
+                DistanceManager.addPlayer(sectionposition1, player);
             }
 
             if (!flag && flag1) {
@@ -1354,7 +1331,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     /**
      * Returns the ceiling light mask of all sections that are equal or lower to the highest non-empty section.
      */
-    private BitSet ceilingLightMask(final LevelChunk chunk) {
+    private static BitSet ceilingLightMask(final LevelChunk chunk) {
         final net.minecraft.world.level.chunk.LevelChunkSection[] sections = chunk.getSections();
         for (int i = sections.length - 1; i >= 0; i--) {
             if (!sections[i].hasOnlyAir()) {
@@ -1456,7 +1433,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         @Nullable
         @Override
         protected ChunkHolder updateChunkScheduling(long pos, int level, @Nullable ChunkHolder holder, int k) {
-            return ChunkMap.this.updateChunkScheduling(pos, level, holder, k);
+            return ChunkMap.updateChunkScheduling(pos, level, holder, k);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index e5ffd644f47457aee8af862854ab66666d66f48d..f15844862fa8979070add089208ff5ff56afb7ba 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -1,41 +1,22 @@
 package net.minecraft.server.level;
 
-import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.Sets;
-import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.longs.Long2ByteMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2IntMap;
-import it.unimi.dsi.fastutil.longs.Long2IntMaps;
-import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
-import it.unimi.dsi.fastutil.longs.LongIterator;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectSet;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
-import java.util.Iterator;
-import java.util.Objects;
-import java.util.Set;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
 import net.minecraft.core.SectionPos;
 import net.minecraft.util.SortedArraySet;
-import net.minecraft.util.thread.ProcessorHandle;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkStatus;
-import net.minecraft.world.level.chunk.LevelChunk;
 import org.slf4j.Logger;
 
 public abstract class DistanceManager {
@@ -137,7 +118,7 @@ public abstract class DistanceManager {
 
     }
 
-    public void addPlayer(SectionPos pos, ServerPlayer player) {
+    public static void addPlayer(SectionPos pos, ServerPlayer player) {
         ChunkPos chunkcoordintpair = pos.chunk();
         long i = chunkcoordintpair.toLong();
 
@@ -211,7 +192,7 @@ public abstract class DistanceManager {
         // Paper end - use distance map to implement
     }
 
-    public String getDebugStatus() {
+    public static String getDebugStatus() {
         return "No DistanceManager stats available"; // Paper - rewrite chunk system
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 6d1f929eb717f62f0d7ebb9e9b52c3788061e240..cd87d114300134c457a4cdc1b9a87da80199fd47 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -11,7 +11,6 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
-import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
@@ -758,9 +757,9 @@ public class ServerChunkCache extends ChunkSource {
                 // Paper end - optimise chunk tick iteration
                 ChunkPos chunkcoordintpair = chunk1.getPos();
 
-                if ((true || this.level.isNaturalSpawningAllowed(chunkcoordintpair)) && this.chunkMap.anyPlayerCloseEnoughForSpawning(holder, chunkcoordintpair, false)) { // Paper - optimise anyPlayerCloseEnoughForSpawning // Paper - the chunk is known ticking
+                if ((true || this.level.isNaturalSpawningAllowed(chunkcoordintpair)) && ChunkMap.anyPlayerCloseEnoughForSpawning(holder, chunkcoordintpair, false)) { // Paper - optimise anyPlayerCloseEnoughForSpawning // Paper - the chunk is known ticking
                     chunk1.incrementInhabitedTime(j);
-                    if (flag2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkcoordintpair) && this.chunkMap.anyPlayerCloseEnoughForSpawning(holder, chunkcoordintpair, true)) { // Spigot // Paper - optimise anyPlayerCloseEnoughForSpawning & optimise chunk tick iteration
+                    if (flag2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkcoordintpair) && ChunkMap.anyPlayerCloseEnoughForSpawning(holder, chunkcoordintpair, true)) { // Spigot // Paper - optimise anyPlayerCloseEnoughForSpawning & optimise chunk tick iteration
                         NaturalSpawner.spawnForChunk(this.level, chunk1, spawnercreature_d, this.spawnFriendlies, this.spawnEnemies, flag1);
                     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index ed5cbe5dce317b6cc439f157a8f67a03d4ee5aa4..a783c7608dd6242cc1a196862a1c931c75698112 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -4,7 +4,6 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
@@ -34,6 +33,7 @@ import net.minecraft.world.entity.decoration.ItemFrame;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.MapItem;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
@@ -227,7 +227,7 @@ public class ServerEntity {
                 org.bukkit.util.Vector velocity = player.getVelocity();
 
                 PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
-                this.entity.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
                     cancelled = true;
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index af17e62c55c1385b28470866f338c8a7a20492a9..a29f7fcd0ad54e2fcfb0a6be101b1c64716e8cd7 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -67,6 +67,7 @@ import net.minecraft.server.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerScoreboard;
 import net.minecraft.server.level.progress.ChunkProgressListener;
+import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.players.SleepStatus;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
@@ -125,12 +126,10 @@ import net.minecraft.world.level.chunk.storage.EntityStorage;
 import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
-import net.minecraft.world.level.entity.EntityPersistentStorage;
 import net.minecraft.world.level.entity.EntityTickList;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.entity.LevelCallback;
 import net.minecraft.world.level.entity.LevelEntityGetter;
-import net.minecraft.world.level.entity.PersistentEntitySectionManager;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.gameevent.GameEventListener;
@@ -600,7 +599,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
 
         this.sleepStatus = new SleepStatus();
-        this.getCraftServer().addWorld(this.getWorld()); // CraftBukkit
+        Level.getCraftServer().addWorld(this.getWorld()); // CraftBukkit
 
         this.chunkTaskScheduler = new io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler(this, io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.workerThreads); // Paper - rewrite chunk system
         this.entityLookup = new io.papermc.paper.chunk.system.entity.EntityLookup(this, new EntityCallbacks()); // Paper - rewrite chunk system
@@ -1283,7 +1282,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
                 this.serverLevelData.setWorldBorder(worldserver1.getWorldBorder().createSettings());
                 this.serverLevelData.setCustomBossEvents(this.server.getCustomBossEvents().save());
-                this.convertable.saveDataTag(this.server.registryHolder, this.serverLevelData, this.server.getPlayerList().getSingleplayerData());
+                this.convertable.saveDataTag(this.server.registryHolder, this.serverLevelData, PlayerList.getSingleplayerData());
             }
             // CraftBukkit end
         }
@@ -1324,7 +1323,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         this.serverLevelData.setWorldBorder(worldserver1.getWorldBorder().createSettings());
         this.serverLevelData.setCustomBossEvents(this.server.getCustomBossEvents().save());
-        this.convertable.saveDataTag(this.server.registryHolder, this.serverLevelData, this.server.getPlayerList().getSingleplayerData());
+        this.convertable.saveDataTag(this.server.registryHolder, this.serverLevelData, PlayerList.getSingleplayerData());
         // CraftBukkit end
     }
 
@@ -1431,7 +1430,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         if (entity != null) {
             ServerLevel.LOGGER.warn("Force-added player with duplicate UUID {}", player.getUUID().toString());
             entity.unRide();
-            this.removePlayerImmediately((ServerPlayer) entity, Entity.RemovalReason.DISCARDED);
+            ServerLevel.removePlayerImmediately((ServerPlayer) entity, Entity.RemovalReason.DISCARDED);
         }
 
         this.entityLookup.addNewEntity(player); // Paper - rewite chunk system
@@ -1520,7 +1519,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         chunk.unregisterTickContainerFromLevel(this);
     }
 
-    public void removePlayerImmediately(ServerPlayer player, Entity.RemovalReason reason) {
+    public static void removePlayerImmediately(ServerPlayer player, Entity.RemovalReason reason) {
         player.remove(reason);
     }
 
@@ -2146,7 +2145,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         return this.getRaidAt(pos) != null;
     }
 
-    public void onReputationEvent(ReputationEventType interaction, Entity entity, ReputationEventHandler observer) {
+    public static void onReputationEvent(ReputationEventType interaction, Entity entity, ReputationEventHandler observer) {
         observer.onReputationEventFrom(interaction, entity);
     }
 
@@ -2172,7 +2171,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             bufferedwriter.write(String.format(Locale.ROOT, "block_entity_tickers: %d\n", Integer.valueOf(this.blockEntityTickers.size())));
             bufferedwriter.write(String.format(Locale.ROOT, "block_ticks: %d\n", Integer.valueOf(this.getBlockTicks().count())));
             bufferedwriter.write(String.format(Locale.ROOT, "fluid_ticks: %d\n", Integer.valueOf(this.getFluidTicks().count())));
-            bufferedwriter.write("distance_manager: " + playerchunkmap.getDistanceManager().getDebugStatus() + "\n");
+            bufferedwriter.write("distance_manager: " + DistanceManager.getDebugStatus() + "\n");
             bufferedwriter.write(String.format(Locale.ROOT, "pending_tasks: %d\n", Integer.valueOf(this.getChunkSource().getPendingTasksCount())));
         } catch (Throwable throwable) {
             if (bufferedwriter != null) {
@@ -2430,7 +2429,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         org.bukkit.World bworld = worldserver.getWorld();
         org.bukkit.event.world.PortalCreateEvent portalEvent = new org.bukkit.event.world.PortalCreateEvent((List<org.bukkit.block.BlockState>) (List) blockList.getList(), bworld, (entity == null) ? null : entity.getBukkitEntity(), org.bukkit.event.world.PortalCreateEvent.CreateReason.END_PLATFORM);
 
-        worldserver.getCraftServer().getPluginManager().callEvent(portalEvent);
+        Level.getCraftServer().getPluginManager().callEvent(portalEvent);
         if (!portalEvent.isCancelled()) {
             blockList.updateList();
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 02eaa31927ab93168ffbc92954f376314f51f70a..e168aa01a8a1279e30b3e2d8eaffbcd243f01467 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -365,7 +365,7 @@ public class ServerPlayer extends Player {
         BlockPos blockposition = worldserver.getSharedSpawnPos();
 
         if (worldserver.dimensionType().hasSkyLight() && worldserver.serverLevelData.getGameType() != GameType.ADVENTURE) {
-            int i = Math.max(0, this.server.getSpawnRadius(worldserver));
+            int i = Math.max(0, MinecraftServer.getSpawnRadius(worldserver));
             int j = Mth.floor(worldserver.getWorldBorder().getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
 
             if (j < i) {
@@ -379,7 +379,7 @@ public class ServerPlayer extends Player {
             long k = (long) (i * 2 + 1);
             long l = k * k;
             int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
-            int j1 = this.getCoprime(i1);
+            int j1 = ServerPlayer.getCoprime(i1);
             int k1 = RandomSource.create().nextInt(i1);
 
             for (int l1 = 0; l1 < i1; ++l1) {
@@ -402,7 +402,7 @@ public class ServerPlayer extends Player {
         BlockPos blockposition = world.getSharedSpawnPos();
 
         if (world.dimensionType().hasSkyLight() && world.serverLevelData.getGameType() != GameType.ADVENTURE) { // CraftBukkit
-            int i = Math.max(0, this.server.getSpawnRadius(world));
+            int i = Math.max(0, MinecraftServer.getSpawnRadius(world));
             int j = Mth.floor(world.getWorldBorder().getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
 
             if (j < i) {
@@ -416,7 +416,7 @@ public class ServerPlayer extends Player {
             long k = (long) (i * 2 + 1);
             long l = k * k;
             int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
-            int j1 = this.getCoprime(i1);
+            int j1 = ServerPlayer.getCoprime(i1);
             int k1 = RandomSource.create().nextInt(i1);
 
             for (int l1 = 0; l1 < i1; ++l1) {
@@ -442,7 +442,7 @@ public class ServerPlayer extends Player {
 
     }
 
-    private int getCoprime(int horizontalSpawnArea) {
+    private static int getCoprime(int horizontalSpawnArea) {
         return horizontalSpawnArea <= 16 ? horizontalSpawnArea - 1 : 17;
     }
 
@@ -555,7 +555,7 @@ public class ServerPlayer extends Player {
             this.unsetRemoved();
             Vec3 position = null;
             if (this.respawnDimension != null) {
-                world = this.getLevel().getCraftServer().getHandle().getServer().getLevel(this.respawnDimension);
+                world = Level.getCraftServer().getHandle().getServer().getLevel(this.respawnDimension);
                 if (world != null && this.getRespawnPosition() != null) {
                     position = Player.findRespawnPositionAndUseSpawnBlock((ServerLevel) world, this.getRespawnPosition(), this.getRespawnAngle(), false, false).orElse(null);
                 }
@@ -802,7 +802,7 @@ public class ServerPlayer extends Player {
 
     private void updateScoreForCriteria(ObjectiveCriteria criterion, int score) {
         // CraftBukkit - Use our scores instead
-        this.level.getCraftServer().getScoreboardManager().getScoreboardScores(criterion, this.getScoreboardName(), (scoreboardscore) -> {
+        Level.getCraftServer().getScoreboardManager().getScoreboardScores(criterion, this.getScoreboardName(), (scoreboardscore) -> {
             scoreboardscore.setScore(score);
         });
     }
@@ -942,7 +942,7 @@ public class ServerPlayer extends Player {
         // CraftBukkit end
 
         // CraftBukkit - Get our scores instead
-        this.level.getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
+        Level.getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
         LivingEntity entityliving = this.getKillCredit();
 
         if (entityliving != null) {
@@ -981,11 +981,11 @@ public class ServerPlayer extends Player {
             String s1 = entityKilled.getScoreboardName();
 
             // CraftBukkit - Get our scores instead
-            this.level.getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.KILL_COUNT_ALL, s, Score::increment);
+            Level.getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.KILL_COUNT_ALL, s, Score::increment);
             if (entityKilled instanceof Player) {
                 this.awardStat(Stats.PLAYER_KILLS);
                 // CraftBukkit - Get our scores instead
-                this.level.getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.KILL_COUNT_PLAYERS, s, Score::increment);
+                Level.getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.KILL_COUNT_PLAYERS, s, Score::increment);
             } else {
                 this.awardStat(Stats.MOB_KILLS);
             }
@@ -1004,7 +1004,7 @@ public class ServerPlayer extends Player {
 
             if (i >= 0 && i < criterions.length) {
                 // CraftBukkit - Get our scores instead
-                this.level.getCraftServer().getScoreboardManager().getScoreboardScores(criterions[i], playerName, Score::increment);
+                Level.getCraftServer().getScoreboardManager().getScoreboardScores(criterions[i], playerName, Score::increment);
             }
         }
 
@@ -1094,7 +1094,7 @@ public class ServerPlayer extends Player {
         if (resourcekey == LevelStem.END && worldserver != null && worldserver.getTypeKey() == LevelStem.OVERWORLD) { // CraftBukkit
             this.isChangingDimension = true; // CraftBukkit - Moved down from above
             this.unRide();
-            this.getLevel().removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
+            ServerLevel.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
             if (!this.wonGame) {
                 if (level.paperConfig().misc.disableEndCredits) this.seenCredits = true; // Paper - Toggle to always disable end credits
                 this.wonGame = true;
@@ -1153,7 +1153,7 @@ public class ServerPlayer extends Player {
                 PlayerList playerlist = this.server.getPlayerList();
 
                 playerlist.sendPlayerPermissionLevel(this);
-                worldserver1.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
+                ServerLevel.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
                 this.unsetRemoved();
 
                 // CraftBukkit end
@@ -1165,8 +1165,8 @@ public class ServerPlayer extends Player {
                 worldserver1.getProfiler().pop();
                 this.triggerDimensionChangeTriggers(worldserver1);
                 this.connection.send(new ClientboundPlayerAbilitiesPacket(this.getAbilities()));
-                playerlist.sendLevelInfo(this, worldserver);
-                playerlist.sendAllPlayerInfo(this);
+                PlayerList.sendLevelInfo(this, worldserver);
+                PlayerList.sendAllPlayerInfo(this);
                 Iterator iterator = this.getActiveEffects().iterator();
 
                 while (iterator.hasNext()) {
@@ -1182,7 +1182,7 @@ public class ServerPlayer extends Player {
 
                 // CraftBukkit start
                 PlayerChangedWorldEvent changeEvent = new PlayerChangedWorldEvent(this.getBukkitEntity(), worldserver1.getWorld());
-                this.level.getCraftServer().getPluginManager().callEvent(changeEvent);
+                Level.getCraftServer().getPluginManager().callEvent(changeEvent);
                 // CraftBukkit end
             }
             // Paper start
@@ -1398,7 +1398,7 @@ public class ServerPlayer extends Player {
         }
 
         PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed, true);
-        this.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         if (event.isCancelled()) {
             return;
         }
@@ -1637,7 +1637,7 @@ public class ServerPlayer extends Player {
     @Override
     public void awardStat(Stat<?> stat, int amount) {
         this.stats.increment(this, stat, amount);
-        this.level.getCraftServer().getScoreboardManager().getScoreboardScores(stat, this.getScoreboardName(), (scoreboardscore) -> { // CraftBukkit - Get our scores instead
+        Level.getCraftServer().getScoreboardManager().getScoreboardScores(stat, this.getScoreboardName(), (scoreboardscore) -> { // CraftBukkit - Get our scores instead
             scoreboardscore.add(amount);
         });
     }
@@ -1645,7 +1645,7 @@ public class ServerPlayer extends Player {
     @Override
     public void resetStat(Stat<?> stat) {
         this.stats.setValue(this, stat, 0);
-        this.level.getCraftServer().getScoreboardManager().getScoreboardScores(stat, this.getScoreboardName(), Score::reset); // CraftBukkit - Get our scores instead
+        Level.getCraftServer().getScoreboardManager().getScoreboardScores(stat, this.getScoreboardName(), Score::reset); // CraftBukkit - Get our scores instead
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index 0a5f8d990cce5df339fd9b2b0fcb291a20ddad41..0ea6a53f862b7b598accb0ed77faa3e82b38a6c6 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -86,7 +86,7 @@ public class ServerPlayerGameMode {
         } else {
             // CraftBukkit start
             PlayerGameModeChangeEvent event = new PlayerGameModeChangeEvent(this.player.getBukkitEntity(), GameMode.getByValue(gameMode.getId()), cause, cancelMessage); // Paper
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
             if (event.isCancelled()) {
                 return event; // Paper
             }
@@ -366,7 +366,7 @@ public class ServerPlayerGameMode {
                 event.setExpToDrop(nmsBlock.getExpDrop(nmsData, this.level, pos, itemstack, true));
             }
 
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
                 if (isSwordNoBreak) {
@@ -445,7 +445,7 @@ public class ServerPlayerGameMode {
 
                 // Drop event experience
                 if (flag && event != null) {
-                    iblockdata.getBlock().popExperience(this.level, pos, event.getExpToDrop(), this.player); // Paper
+                    Block.popExperience(this.level, pos, event.getExpToDrop(), this.player); // Paper
                 }
                 // Paper start - trigger after items are dropped (check impls of block#playerDestroy)
                 if (mainHandStack != null) {
diff --git a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
index 930422b6e87f3afdb838e8f73ac1c569864c24c9..1c8fce4e3b85dc8884b3e79952061be7c52649fc 100644
--- a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
+++ b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
@@ -1,12 +1,9 @@
 package net.minecraft.server.level;
 
-import com.mojang.datafixers.util.Pair;
+import ca.spottedleaf.starlight.common.light.StarLightInterface;
 import com.mojang.logging.LogUtils;
-import it.unimi.dsi.fastutil.objects.ObjectArrayList;
-import it.unimi.dsi.fastutil.objects.ObjectList;
-import it.unimi.dsi.fastutil.objects.ObjectListIterator;
+
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.IntSupplier;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
@@ -18,7 +15,6 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.DataLayer;
-import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import org.jetbrains.annotations.NotNull;
@@ -30,8 +26,6 @@ import io.papermc.paper.util.CoordinateUtils;
 import java.util.function.Supplier;
 import net.minecraft.world.level.lighting.LayerLightEventListener;
 import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
-import it.unimi.dsi.fastutil.longs.LongArrayList;
-import it.unimi.dsi.fastutil.longs.LongIterator;
 import net.minecraft.world.level.chunk.ChunkStatus;
 // Paper end
 
@@ -216,7 +210,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
 
     protected void updateChunkStatus(ChunkPos pos) {
         if (true) return; // Paper - replace light engine impl
-        this.addTask(pos.x, pos.z, () -> {
+        ThreadedLevelLightEngine.addTask(pos.x, pos.z, () -> {
             return 0;
         }, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.name(() -> {
             super.retainData(pos, false);
@@ -248,7 +242,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
     @Override
     public void enableLightSources(ChunkPos pos, boolean retainData) {
         if (true) return; // Paper - replace light engine impl
-        this.addTask(pos.x, pos.z, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.name(() -> {
+        ThreadedLevelLightEngine.addTask(pos.x, pos.z, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.name(() -> {
             super.enableLightSources(pos, retainData);
         }, () -> {
             return "enableLight " + pos + " " + retainData;
@@ -258,7 +252,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
     @Override
     public void queueSectionData(LightLayer lightType, SectionPos pos, @Nullable DataLayer nibbles, boolean nonEdge) {
         if (true) return; // Paper - replace light engine impl
-        this.addTask(pos.x(), pos.z(), () -> {
+        ThreadedLevelLightEngine.addTask(pos.x(), pos.z(), () -> {
             return 0;
         }, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.name(() -> {
             super.queueSectionData(lightType, pos, nibbles, nonEdge);
@@ -267,18 +261,18 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
         }));
     }
 
-    private void addTask(int x, int z, ThreadedLevelLightEngine.TaskType stage, Runnable task) {
+    private static void addTask(int x, int z, ThreadedLevelLightEngine.TaskType stage, Runnable task) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    private void addTask(int x, int z, IntSupplier completedLevelSupplier, ThreadedLevelLightEngine.TaskType stage, Runnable task) {
+    private static void addTask(int x, int z, IntSupplier completedLevelSupplier, ThreadedLevelLightEngine.TaskType stage, Runnable task) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
     @Override
     public void retainData(ChunkPos pos, boolean retainData) {
         if (true) return; // Paper - replace light engine impl
-        this.addTask(pos.x, pos.z, () -> {
+        ThreadedLevelLightEngine.addTask(pos.x, pos.z, () -> {
             return 0;
         }, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, Util.name(() -> {
             super.retainData(pos, retainData);
@@ -295,7 +289,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
         }, () -> {
             return "retainData: " + chunkPos;
         }), (task) -> {
-            this.addTask(chunkPos.x, chunkPos.z, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, task);
+            ThreadedLevelLightEngine.addTask(chunkPos.x, chunkPos.z, ThreadedLevelLightEngine.TaskType.PRE_UPDATE, task);
         });
     }
 
@@ -322,7 +316,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
                 this.chunkMap.releaseLightTicket(chunkPos);
                 return chunk;
             }, (runnable) -> {
-                this.theLightEngine.scheduleChunkLight(chunkPos, runnable);
+                StarLightInterface.scheduleChunkLight(chunkPos, runnable);
                 this.tryScheduleUpdate();
             }).whenComplete((final @NotNull ChunkAccess c, final @NotNull Throwable throwable) -> {
                 if (throwable != null) {
@@ -337,7 +331,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
         // Paper - rewrite chunk system
     }
 
-    private void runUpdate() {
+    private static void runUpdate() {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
diff --git a/src/main/java/net/minecraft/server/level/Ticket.java b/src/main/java/net/minecraft/server/level/Ticket.java
index 3ce23de3199852aa1d24734b4526a0b1df0ddc11..9032d6b0787acb0c52079d81ac947de9cf81827b 100644
--- a/src/main/java/net/minecraft/server/level/Ticket.java
+++ b/src/main/java/net/minecraft/server/level/Ticket.java
@@ -58,11 +58,11 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
         return this.ticketLevel;
     }
 
-    protected void setCreatedTick(long tickCreated) {
+    protected static void setCreatedTick(long tickCreated) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 
-    protected boolean timedOut(long currentTick) {
+    protected static boolean timedOut(long currentTick) {
         throw new UnsupportedOperationException(); // Paper - rewrite chunk system
     }
 }
diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index 007af8a6c1ccaaf0a3f4ab1b228b8d4bcf871b94..c613c3655543f03d3ebd03a77dc7c3c91fecb7e7 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -41,6 +41,7 @@ import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkSource;
 import net.minecraft.world.level.chunk.ChunkStatus;
+import net.minecraft.world.level.chunk.storage.ChunkStorage;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.gameevent.GameEvent;
@@ -107,7 +108,7 @@ public class WorldGenRegion implements WorldGenLevel {
     }
 
     public boolean isOldChunkAround(ChunkPos chunkPos, int checkRadius) {
-        return this.level.getChunkSource().chunkMap.isOldChunkAround(chunkPos, checkRadius);
+        return ChunkStorage.isOldChunkAround(chunkPos, checkRadius);
     }
 
     public ChunkPos getCenter() {
diff --git a/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java b/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
index 1629d74976fff9ec791343577c8dbe228d99d3c7..01b4e063ed885b16c885d1d11c4a89927c56dd52 100644
--- a/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
+++ b/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
@@ -61,7 +61,7 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
                         break;
                     }
                     s = String.format(Locale.ROOT, "%s\u00a7%d\u00a7%d", com.destroystokyo.paper.network.PaperLegacyStatusClient.getUnformattedMotd(event), Integer.valueOf(event.getNumPlayers()), Integer.valueOf(event.getMaxPlayers()));
-                    this.sendFlushAndClose(channelhandlercontext, this.createReply(s));
+                    LegacyQueryHandler.sendFlushAndClose(channelhandlercontext, LegacyQueryHandler.createReply(s));
                     // Paper end
                     break;
                 case 1:
@@ -78,7 +78,7 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
                     }
                     s = String.format(Locale.ROOT, "\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", new Object[] {Integer.valueOf(event.getProtocolVersion()), minecraftserver.getServerVersion(), event.getMotd(), Integer.valueOf(event.getNumPlayers()), Integer.valueOf(event.getMaxPlayers())}); // CraftBukkit
                     // Paper end
-                    this.sendFlushAndClose(channelhandlercontext, this.createReply(s));
+                    LegacyQueryHandler.sendFlushAndClose(channelhandlercontext, LegacyQueryHandler.createReply(s));
                     break;
                 default:
                 // Paper start - Replace with improved version below
@@ -197,7 +197,7 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
 
         String response = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", Integer.valueOf(event.getProtocolVersion()), event.getVersion(),
             com.destroystokyo.paper.network.PaperLegacyStatusClient.getMotd(event), Integer.valueOf(event.getNumPlayers()), Integer.valueOf(event.getMaxPlayers()));
-        this.sendFlushAndClose(ctx, this.createReply(response));
+        LegacyQueryHandler.sendFlushAndClose(ctx, LegacyQueryHandler.createReply(response));
     }
 
     private void removeHandler(ChannelHandlerContext ctx) {
@@ -218,11 +218,11 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
     }
     // Paper end
 
-    private void sendFlushAndClose(ChannelHandlerContext ctx, ByteBuf buf) {
+    private static void sendFlushAndClose(ChannelHandlerContext ctx, ByteBuf buf) {
         ctx.pipeline().firstContext().writeAndFlush(buf).addListener(ChannelFutureListener.CLOSE);
     }
 
-    private ByteBuf createReply(String s) {
+    private static ByteBuf createReply(String s) {
         ByteBuf bytebuf = Unpooled.buffer();
 
         bytebuf.writeByte(255);
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 56f14298971731918f8a002b6a07b8bbaebe9302..f543b27da238662d3a4187d29cefc3763dbfb98c 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -175,7 +175,6 @@ import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
@@ -224,8 +223,6 @@ import org.bukkit.event.inventory.InventoryCreativeEvent;
 import org.bukkit.event.inventory.InventoryType.SlotType;
 import org.bukkit.event.inventory.SmithItemEvent;
 import org.bukkit.event.player.AsyncPlayerChatEvent;
-import org.bukkit.event.player.PlayerAnimationEvent;
-import org.bukkit.event.player.PlayerAnimationType;
 import org.bukkit.event.player.PlayerChatEvent;
 import org.bukkit.event.player.PlayerCommandPreprocessEvent;
 import org.bukkit.event.player.PlayerInteractAtEntityEvent;
@@ -697,7 +694,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                     // note: only call after setLocation, or else getBoundingBox is wrong
                     AABB newBox = entity.getBoundingBox();
                     if (didCollide || !oldBox.equals(newBox)) {
-                        teleportBack = this.hasNewCollision(worldserver, entity, oldBox, newBox);
+                        teleportBack = ServerGamePacketListenerImpl.hasNewCollision(worldserver, entity, oldBox, newBox);
                     } // else: no collision at all detected, why do we care?
                 }
                 if (teleportBack) { // Paper end - optimise out extra getCubes
@@ -776,7 +773,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
                 this.player.getLevel().getChunkSource().move(this.player);
                 this.player.checkMovementStatistics(this.player.getX() - d0, this.player.getY() - d1, this.player.getZ() - d2);
-                this.clientVehicleIsFloating = d11 >= -0.03125D && !flag1 && !this.server.isFlightAllowed() && !entity.isNoGravity() && this.noBlocksAround(entity);
+                this.clientVehicleIsFloating = d11 >= -0.03125D && !flag1 && !this.server.isFlightAllowed() && !entity.isNoGravity() && ServerGamePacketListenerImpl.noBlocksAround(entity);
                 this.vehicleLastGoodX = entity.getX();
                 this.vehicleLastGoodY = entity.getY();
                 this.vehicleLastGoodZ = entity.getZ();
@@ -785,7 +782,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         }
     }
 
-    private boolean noBlocksAround(Entity entity) {
+    private static boolean noBlocksAround(Entity entity) {
         // Paper start - stop using streams, this is already a known fixed problem in Entity#move
         AABB box = entity.getBoundingBox().inflate(0.0625D).expandTowards(0.0D, -0.55D, 0.0D);
         int minX = Mth.floor(box.minX);
@@ -1559,7 +1556,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                 AABB newBox = this.player.getBoundingBox();
                                 if (didCollide || !axisalignedbb.equals(newBox)) {
                                     // note: only call after setLocation, or else getBoundingBox is wrong
-                                    teleportBack = this.hasNewCollision(worldserver, this.player, axisalignedbb, newBox);
+                                    teleportBack = ServerGamePacketListenerImpl.hasNewCollision(worldserver, this.player, axisalignedbb, newBox);
                                 } // else: no collision at all detected, why do we care?
                             }
                             if (!this.player.noPhysics && !this.player.isSleeping() && teleportBack) { // Paper end - optimise out extra getCubes
@@ -1629,7 +1626,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                 this.player.absMoveTo(d0, d1, d2, f, f1); // Copied from above
                                 // CraftBukkit end
 
-                                this.clientIsFloating = d12 >= -0.03125D && !flag1 && this.player.gameMode.getGameModeForPlayer() != GameType.SPECTATOR && !this.server.isFlightAllowed() && !this.player.getAbilities().mayfly && !this.player.hasEffect(MobEffects.LEVITATION) && !this.player.isFallFlying() && !this.player.isAutoSpinAttack() && this.noBlocksAround(this.player);
+                                this.clientIsFloating = d12 >= -0.03125D && !flag1 && this.player.gameMode.getGameModeForPlayer() != GameType.SPECTATOR && !this.server.isFlightAllowed() && !this.player.getAbilities().mayfly && !this.player.hasEffect(MobEffects.LEVITATION) && !this.player.isFallFlying() && !this.player.isAutoSpinAttack() && ServerGamePacketListenerImpl.noBlocksAround(this.player);
                                 this.player.getLevel().getChunkSource().move(this.player);
                                 this.player.doCheckFallDamage(this.player.getY() - d6, packet.isOnGround());
                                 this.player.setOnGround(packet.isOnGround());
@@ -1650,7 +1647,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     }
 
     // Paper start - optimise out extra getCubes
-    private boolean hasNewCollision(final ServerLevel world, final Entity entity, final AABB oldBox, final AABB newBox) {
+    private static boolean hasNewCollision(final ServerLevel world, final Entity entity, final AABB oldBox, final AABB newBox) {
         final List<AABB> collisions = io.papermc.paper.util.CachedLists.getTempCollisionList();
         try {
             io.papermc.paper.util.CollisionUtil.getCollisions(world, entity, newBox, collisions, false, true,
@@ -2685,7 +2682,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     private CompletableFuture<Component> queryCommandPreview(String query) {
         CommandSourceStack commandlistenerwrapper = this.player.createCommandSourceStack();
         ParseResults<CommandSourceStack> parseresults = this.server.getCommands().getDispatcher().parse(query, commandlistenerwrapper);
-        CompletableFuture<Component> completablefuture = this.getPreviewedArgument(commandlistenerwrapper, PreviewableCommand.of(parseresults));
+        CompletableFuture<Component> completablefuture = ServerGamePacketListenerImpl.getPreviewedArgument(commandlistenerwrapper, PreviewableCommand.of(parseresults));
 
         completablefuture.thenAcceptAsync((ichatbasecomponent) -> {
             if (ichatbasecomponent != null) this.chatPreviewCache.set(query, ichatbasecomponent); // Paper
@@ -2693,7 +2690,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         return completablefuture;
     }
 
-    private CompletableFuture<Component> getPreviewedArgument(CommandSourceStack source, PreviewableCommand<CommandSourceStack> arguments) {
+    private static CompletableFuture<Component> getPreviewedArgument(CommandSourceStack source, PreviewableCommand<CommandSourceStack> arguments) {
         List<PreviewableCommand.Argument<CommandSourceStack>> list = arguments.arguments();
 
         if (list.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index ea9b56fd6ae1d5577da5bd3e0c38abfeec8f3646..1314023a21b18ff84675711d0f974cf34c5520f6 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -13,7 +13,6 @@ import java.time.Duration;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.annotation.Nullable;
-import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.core.UUIDUtil;
@@ -33,6 +32,7 @@ import net.minecraft.network.protocol.login.ServerboundHelloPacket;
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.players.PlayerList;
 import net.minecraft.util.Crypt;
 import net.minecraft.util.CryptException;
 import net.minecraft.util.RandomSource;
@@ -194,7 +194,7 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
             ServerPlayer entityplayer = this.server.getPlayerList().getActivePlayer(this.gameProfile.getId()); // Paper
 
             try {
-                ServerPlayer entityplayer1 = this.server.getPlayerList().getPlayerForLogin(this.gameProfile, s); // CraftBukkit - add player reference
+                ServerPlayer entityplayer1 = PlayerList.getPlayerForLogin(this.gameProfile, s); // CraftBukkit - add player reference
 
                 if (entityplayer != null) {
                     this.state = ServerLoginPacketListenerImpl.State.DELAY_ACCEPT;
@@ -525,7 +525,7 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
         this.disconnect(Component.translatable("multiplayer.disconnect.unexpected_query_response"));
     }
 
-    protected GameProfile createFakeProfile(GameProfile profile) {
+    protected static GameProfile createFakeProfile(GameProfile profile) {
         UUID uuid = UUIDUtil.createOfflinePlayerUUID(profile.getName());
 
         return new GameProfile(uuid, profile.getName());
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index a0c3814f44c9af57e3b2842c89eb18bf0ae3bfee..4a63f6efddbbfe129ced2c10fca8e267fdffb5df 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -113,7 +113,6 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerChangedWorldEvent;
 import org.bukkit.event.player.PlayerJoinEvent;
@@ -278,7 +277,7 @@ public abstract class PlayerList {
         // Spigot - view distance
         playerconnection.send(new ClientboundLoginPacket(player.getId(), worlddata.isHardcore(), player.gameMode.getGameModeForPlayer(), player.gameMode.getPreviousGameModeForPlayer(), this.server.levelKeys(), this.registryHolder, worldserver1.dimensionTypeId(), worldserver1.dimension(), BiomeManager.obfuscateSeed(worldserver1.getSeed()), this.getMaxPlayers(), worldserver1.getChunkSource().chunkMap.playerChunkManager.getTargetSendDistance(), worldserver1.getChunkSource().chunkMap.playerChunkManager.getTargetTickViewDistance(), flag1, !flag, worldserver1.isDebug(), worldserver1.isFlat(), player.getLastDeathLocation())); // Paper - replace old player chunk management
         player.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
-        playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(this.getServer().getServerModName())));
+        playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(MinecraftServer.getServerModName())));
         playerconnection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         playerconnection.send(new ClientboundPlayerAbilitiesPacket(player.getAbilities()));
         playerconnection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
@@ -287,7 +286,7 @@ public abstract class PlayerList {
         this.sendPlayerPermissionLevel(player);
         player.getStats().markAllDirty();
         player.getRecipeBook().sendInitialRecipeBook(player);
-        this.updateEntireScoreboard(worldserver1.getScoreboard(), player);
+        PlayerList.updateEntireScoreboard(worldserver1.getScoreboard(), player);
         this.server.invalidateStatus();
         // Paper start - async load spawn in chunk
         ServerLevel finalWorldserver = worldserver1;
@@ -324,7 +323,7 @@ public abstract class PlayerList {
         return player != null ? player : pendingPlayers.get(uuid);
     }
 
-    void disconnectPendingPlayer(ServerPlayer entityplayer) {
+    static void disconnectPendingPlayer(ServerPlayer entityplayer) {
         Component msg = Component.translatable("multiplayer.disconnect.duplicate_login");
         entityplayer.networkManager.send(new net.minecraft.network.protocol.game.ClientboundDisconnectPacket(msg), net.minecraft.network.PacketSendListener.thenRun(() -> {
             entityplayer.networkManager.disconnect(msg);
@@ -414,7 +413,7 @@ public abstract class PlayerList {
 
         worldserver1 = player.getLevel(); // CraftBukkit - Update in case join event changed it
         // CraftBukkit end
-        this.sendLevelInfo(player, worldserver1);
+        PlayerList.sendLevelInfo(player, worldserver1);
         this.server.getServerResourcePack().ifPresent((minecraftserver_serverresourcepackinfo) -> {
             player.sendTexturePack(minecraftserver_serverresourcepackinfo.url(), minecraftserver_serverresourcepackinfo.hash(), minecraftserver_serverresourcepackinfo.isRequired(), minecraftserver_serverresourcepackinfo.prompt());
         });
@@ -440,7 +439,7 @@ public abstract class PlayerList {
         }
         // Paper end
     }
-    private void mountSavedVehicle(ServerPlayer player, ServerLevel worldserver1, CompoundTag nbttagcompound) {
+    private static void mountSavedVehicle(ServerPlayer player, ServerLevel worldserver1, CompoundTag nbttagcompound) {
         // Paper end
         if (nbttagcompound != null && nbttagcompound.contains("RootVehicle", 10)) {
             CompoundTag nbttagcompound1 = nbttagcompound.getCompound("RootVehicle");
@@ -507,7 +506,7 @@ public abstract class PlayerList {
         PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", player.getName().getString(), s1, Integer.valueOf(player.getId()), worldserver1.serverLevelData.getLevelName(), Double.valueOf(player.getX()), Double.valueOf(player.getY()), Double.valueOf(player.getZ()));
     }
 
-    public void updateEntireScoreboard(ServerScoreboard scoreboard, ServerPlayer player) {
+    public static void updateEntireScoreboard(ServerScoreboard scoreboard, ServerPlayer player) {
         Set<Objective> set = Sets.newHashSet();
         Iterator iterator = scoreboard.getPlayerTeams().iterator();
 
@@ -541,27 +540,27 @@ public abstract class PlayerList {
         world.getWorldBorder().addListener(new BorderChangeListener() {
             @Override
             public void onBorderSizeSet(WorldBorder border, double size) {
-                PlayerList.this.broadcastAll(new ClientboundSetBorderSizePacket(border), border.world); // CraftBukkit
+                PlayerList.broadcastAll(new ClientboundSetBorderSizePacket(border), border.world); // CraftBukkit
             }
 
             @Override
             public void onBorderSizeLerping(WorldBorder border, double fromSize, double toSize, long time) {
-                PlayerList.this.broadcastAll(new ClientboundSetBorderLerpSizePacket(border), border.world); // CraftBukkit
+                PlayerList.broadcastAll(new ClientboundSetBorderLerpSizePacket(border), border.world); // CraftBukkit
             }
 
             @Override
             public void onBorderCenterSet(WorldBorder border, double centerX, double centerZ) {
-                PlayerList.this.broadcastAll(new ClientboundSetBorderCenterPacket(border), border.world); // CraftBukkit
+                PlayerList.broadcastAll(new ClientboundSetBorderCenterPacket(border), border.world); // CraftBukkit
             }
 
             @Override
             public void onBorderSetWarningTime(WorldBorder border, int warningTime) {
-                PlayerList.this.broadcastAll(new ClientboundSetBorderWarningDelayPacket(border), border.world); // CraftBukkit
+                PlayerList.broadcastAll(new ClientboundSetBorderWarningDelayPacket(border), border.world); // CraftBukkit
             }
 
             @Override
             public void onBorderSetWarningBlocks(WorldBorder border, int warningBlockDistance) {
-                PlayerList.this.broadcastAll(new ClientboundSetBorderWarningDistancePacket(border), border.world); // CraftBukkit
+                PlayerList.broadcastAll(new ClientboundSetBorderWarningDistancePacket(border), border.world); // CraftBukkit
             }
 
             @Override
@@ -670,7 +669,7 @@ public abstract class PlayerList {
         }
 
         entityplayer.unRide();
-        worldserver.removePlayerImmediately(entityplayer, Entity.RemovalReason.UNLOADED_WITH_PLAYER);
+        ServerLevel.removePlayerImmediately(entityplayer, Entity.RemovalReason.UNLOADED_WITH_PLAYER);
         entityplayer.getAdvancements().stopListening();
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
@@ -793,7 +792,7 @@ public abstract class PlayerList {
         return entity;
     }
 
-    public ServerPlayer getPlayerForLogin(GameProfile gameprofile, ServerPlayer player) { // CraftBukkit - added EntityPlayer
+    public static ServerPlayer getPlayerForLogin(GameProfile gameprofile, ServerPlayer player) { // CraftBukkit - added EntityPlayer
         /* CraftBukkit startMoved up
         UUID uuid = UUIDUtil.getOrCreatePlayerUUID(gameprofile);
         List<EntityPlayer> list = Lists.newArrayList();
@@ -841,7 +840,7 @@ public abstract class PlayerList {
         entityplayer.stopRiding(); // CraftBukkit
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
-        entityplayer.getLevel().removePlayerImmediately(entityplayer, Entity.RemovalReason.DISCARDED);
+        ServerLevel.removePlayerImmediately(entityplayer, Entity.RemovalReason.DISCARDED);
         BlockPos blockposition = entityplayer.getRespawnPosition();
         float f = entityplayer.getRespawnAngle();
         boolean flag1 = entityplayer.isRespawnForced();
@@ -970,7 +969,7 @@ public abstract class PlayerList {
         entityplayer1.connection.send(new ClientboundSetDefaultSpawnPositionPacket(worldserver1.getSharedSpawnPos(), worldserver1.getSharedSpawnAngle()));
         entityplayer1.connection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         entityplayer1.connection.send(new ClientboundSetExperiencePacket(entityplayer1.experienceProgress, entityplayer1.totalExperience, entityplayer1.experienceLevel));
-        this.sendLevelInfo(entityplayer1, worldserver1);
+        PlayerList.sendLevelInfo(entityplayer1, worldserver1);
         this.sendPlayerPermissionLevel(entityplayer1);
         if (!entityplayer.connection.isDisconnected()) {
             worldserver1.addRespawnedPlayer(entityplayer1);
@@ -988,7 +987,7 @@ public abstract class PlayerList {
         // Paper end
         }
         // Added from changeDimension
-        this.sendAllPlayerInfo(entityplayer); // Update health, etc...
+        PlayerList.sendAllPlayerInfo(entityplayer); // Update health, etc...
         entityplayer.onUpdateAbilities();
         for (MobEffectInstance mobEffect : entityplayer.getActiveEffects()) {
             entityplayer.connection.send(new ClientboundUpdateMobEffectPacket(entityplayer.getId(), mobEffect));
@@ -1066,7 +1065,7 @@ public abstract class PlayerList {
         }
     }
 
-    public void broadcastAll(Packet packet, Level world) {
+    public static void broadcastAll(Packet packet, Level world) {
         for (int i = 0; i < world.players().size(); ++i) {
             ((ServerPlayer) world.players().get(i)).connection.send(packet);
         }
@@ -1279,7 +1278,7 @@ public abstract class PlayerList {
 
     public void reloadWhiteList() {}
 
-    public void sendLevelInfo(ServerPlayer player, ServerLevel world) {
+    public static void sendLevelInfo(ServerPlayer player, ServerLevel world) {
         WorldBorder worldborder = player.level.getWorldBorder(); // CraftBukkit
 
         player.connection.send(new ClientboundInitializeBorderPacket(worldborder));
@@ -1297,7 +1296,7 @@ public abstract class PlayerList {
 
     }
 
-    public void sendAllPlayerInfo(ServerPlayer player) {
+    public static void sendAllPlayerInfo(ServerPlayer player) {
         player.inventoryMenu.sendAllDataToRemote();
         // entityplayer.resetSentInfo();
         player.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
@@ -1355,7 +1354,7 @@ public abstract class PlayerList {
     }
 
     @Nullable
-    public CompoundTag getSingleplayerData() {
+    public static CompoundTag getSingleplayerData() {
         return null;
     }
 
@@ -1437,9 +1436,9 @@ public abstract class PlayerList {
 
     private void broadcastChatMessage(PlayerChatMessage message, Predicate<ServerPlayer> shouldSendFiltered, @Nullable ServerPlayer sender, ChatSender sourceProfile, ChatType.Bound params, @Nullable Function<net.kyori.adventure.audience.Audience, Component> unsignedFunction) {
         // Paper end
-        boolean flag = this.verifyChatTrusted(message, sourceProfile);
+        boolean flag = PlayerList.verifyChatTrusted(message, sourceProfile);
 
-        this.server.logChatMessage((unsignedFunction == null ? message : message.withUnsignedContent(unsignedFunction.apply(this.server.console))).serverContent(), params, flag ? null : "Not Secure"); // Paper
+        MinecraftServer.logChatMessage((unsignedFunction == null ? message : message.withUnsignedContent(unsignedFunction.apply(this.server.console))).serverContent(), params, flag ? null : "Not Secure"); // Paper
         OutgoingPlayerChatMessage outgoingplayerchatmessage = OutgoingPlayerChatMessage.create(message);
         boolean flag1 = message.isFullyFiltered();
         boolean flag2 = false;
@@ -1476,7 +1475,7 @@ public abstract class PlayerList {
 
     }
 
-    public boolean verifyChatTrusted(PlayerChatMessage message, ChatSender profile) { // Paper - private -> public
+    public static boolean verifyChatTrusted(PlayerChatMessage message, ChatSender profile) { // Paper - private -> public
         return !message.hasExpiredServer(Instant.now()) && message.verify(profile);
     }
 
diff --git a/src/main/java/net/minecraft/server/rcon/thread/RconThread.java b/src/main/java/net/minecraft/server/rcon/thread/RconThread.java
index fa12d6659fa302869236afbb95239ab7d1ea6de9..e34eae6ceb7051ea5df7a644c62f838069bff12c 100644
--- a/src/main/java/net/minecraft/server/rcon/thread/RconThread.java
+++ b/src/main/java/net/minecraft/server/rcon/thread/RconThread.java
@@ -52,7 +52,7 @@ public class RconThread extends GenericThread {
                 }
             }
         } finally {
-            this.closeSocket(this.socket);
+            RconThread.closeSocket(this.socket);
         }
 
     }
@@ -96,7 +96,7 @@ public class RconThread extends GenericThread {
     @Override
     public void stop() {
         this.running = false;
-        this.closeSocket(this.socket);
+        RconThread.closeSocket(this.socket);
         super.stop();
 
         for(RconClient rconClient : this.clients) {
@@ -108,7 +108,7 @@ public class RconThread extends GenericThread {
         this.clients.clear();
     }
 
-    private void closeSocket(ServerSocket socket) {
+    private static void closeSocket(ServerSocket socket) {
         LOGGER.debug("closeSocket: {}", (Object)socket);
 
         try {
diff --git a/src/main/java/net/minecraft/stats/ServerRecipeBook.java b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
index d13ed3069e944d138442ea440ac3eaf8d44c18d3..eb8e2c77b819239af9b0e4ac26f151aa300dc28b 100644
--- a/src/main/java/net/minecraft/stats/ServerRecipeBook.java
+++ b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
@@ -107,13 +107,13 @@ public class ServerRecipeBook extends RecipeBook {
         this.setBookSettings(RecipeBookSettings.read(nbt));
         ListTag nbttaglist = nbt.getList("recipes", 8);
 
-        this.loadRecipes(nbttaglist, this::add, recipeManager);
+        ServerRecipeBook.loadRecipes(nbttaglist, this::add, recipeManager);
         ListTag nbttaglist1 = nbt.getList("toBeDisplayed", 8);
 
-        this.loadRecipes(nbttaglist1, this::addHighlight, recipeManager);
+        ServerRecipeBook.loadRecipes(nbttaglist1, this::addHighlight, recipeManager);
     }
 
-    private void loadRecipes(ListTag list, Consumer<Recipe<?>> handler, RecipeManager recipeManager) {
+    private static void loadRecipes(ListTag list, Consumer<Recipe<?>> handler, RecipeManager recipeManager) {
         for (int i = 0; i < list.size(); ++i) {
             String s = list.getString(i);
 
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index ba6ce8a9a520b7c0c1b01a4094edcbd3658ab434..5ed25632ce80bc281fc8faee82b1f9fa1f663d4f 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -20,7 +20,6 @@ import java.io.StringReader;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import net.minecraft.SharedConstants;
@@ -131,7 +130,7 @@ public class ServerStatsCounter extends StatsCounter {
                                         String s2 = (String) iterator1.next();
 
                                         if (nbttagcompound2.contains(s2, 99)) {
-                                            Util.ifElse(this.getStat(statisticwrapper, s2), (statistic) -> {
+                                            Util.ifElse(ServerStatsCounter.getStat(statisticwrapper, s2), (statistic) -> {
                                                 this.stats.put(statistic, nbttagcompound2.getInt(s2));
                                             }, () -> {
                                                 ServerStatsCounter.LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2);
@@ -170,7 +169,7 @@ public class ServerStatsCounter extends StatsCounter {
 
     }
 
-    private <T> Optional<Stat<T>> getStat(StatType<T> type, String id) {
+    private static <T> Optional<Stat<T>> getStat(StatType<T> type, String id) {
         // CraftBukkit - decompile error start
         Optional<ResourceLocation> optional = Optional.ofNullable(ResourceLocation.tryParse(id));
         Registry<T> iregistry = type.getRegistry();
diff --git a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
index 7a4ade1a4190bf4fbb048919ae2be230f7b80fff..c23f1e80e804250a414a9115b77649e8de70d6a4 100644
--- a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
@@ -134,7 +134,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
         try {
             while(!stopCondition.getAsBoolean()) {
                 if (!this.pollTask()) {
-                    this.waitForTasks();
+                    BlockableEventLoop.waitForTasks();
                 }
             }
         } finally {
@@ -143,7 +143,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
 
     }
 
-    protected void waitForTasks() {
+    protected static void waitForTasks() {
         Thread.yield();
         LockSupport.parkNanos("waiting for tasks", 100000L);
     }
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index 038091aac96445c731b05771aac49acbc9c84287..5fe795af04a31f0ca2570cc1d8ab7b65db001fcb 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -287,7 +287,7 @@ public class WorldUpgrader {
         return this.finished;
     }
 
-    public ImmutableSet<ResourceKey<Level>> levels() {
+    public static ImmutableSet<ResourceKey<Level>> levels() {
         throw new AssertionError("Unsupported"); // CraftBukkit
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 3dbbaf1fc409e601cef2f75966081bc1298aec1b..f8363ecbb939f4aa807cc17e455564c0d7863be5 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -245,7 +245,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public @Nullable Throwable addedToWorldStack; // Paper - entity debug
     public CraftEntity getBukkitEntity() {
         if (this.bukkitEntity == null) {
-            this.bukkitEntity = CraftEntity.getEntity(this.level.getCraftServer(), this);
+            this.bukkitEntity = CraftEntity.getEntity(Level.getCraftServer(), this);
         }
         return this.bukkitEntity;
     }
@@ -458,11 +458,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         this.hardCollides = this instanceof Boat
             || this instanceof net.minecraft.world.entity.monster.Shulker
             || this instanceof net.minecraft.world.entity.vehicle.AbstractMinecart
-            || this.shouldHardCollide();
+            || Entity.shouldHardCollide();
     }
 
     // plugins can override
-    protected boolean shouldHardCollide() {
+    protected static boolean shouldHardCollide() {
         return false;
     }
 
@@ -683,7 +683,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         if (pose == this.getPose()) {
             return;
         }
-        this.level.getCraftServer().getPluginManager().callEvent(new EntityPoseChangeEvent(this.getBukkitEntity(), Pose.values()[pose.ordinal()]));
+        Level.getCraftServer().getPluginManager().callEvent(new EntityPoseChangeEvent(this.getBukkitEntity(), Pose.values()[pose.ordinal()]));
         // CraftBukkit end
         this.entityData.set(Entity.DATA_POSE, pose);
     }
@@ -716,7 +716,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
         if (yaw == Float.POSITIVE_INFINITY || yaw == Float.NEGATIVE_INFINITY) {
             if (this instanceof ServerPlayer) {
-                this.level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid yaw");
+                Level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid yaw");
                 ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite yaw (Hacking?)");
             }
             yaw = 0;
@@ -729,7 +729,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
         if (pitch == Float.POSITIVE_INFINITY || pitch == Float.NEGATIVE_INFINITY) {
             if (this instanceof ServerPlayer) {
-                this.level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid pitch");
+                Level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid pitch");
                 ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite pitch (Hacking?)");
             }
             pitch = 0;
@@ -893,7 +893,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 org.bukkit.block.Block damager = (this.lastLavaContact == null) ? null : org.bukkit.craftbukkit.block.CraftBlock.at(level, lastLavaContact);
                 org.bukkit.entity.Entity damagee = this.getBukkitEntity();
                 EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
-                this.level.getCraftServer().getPluginManager().callEvent(combustEvent);
+                Level.getCraftServer().getPluginManager().callEvent(combustEvent);
 
                 if (!combustEvent.isCancelled()) {
                     this.setSecondsOnFire(combustEvent.getDuration(), false);
@@ -920,7 +920,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public void setSecondsOnFire(int i, boolean callEvent) {
         if (callEvent) {
             EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), i);
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
                 return;
@@ -1061,7 +1061,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             this.verticalCollision = movement.y != vec3d1.y;
             this.verticalCollisionBelow = this.verticalCollision && movement.y < 0.0D;
             if (this.horizontalCollision) {
-                this.minorHorizontalCollision = this.isHorizontalCollisionMinor(vec3d1);
+                this.minorHorizontalCollision = Entity.isHorizontalCollisionMinor(vec3d1);
             } else {
                 this.minorHorizontalCollision = false;
             }
@@ -1103,7 +1103,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
                     if (!bl.getType().isAir()) {
                         VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
-                        this.level.getCraftServer().getPluginManager().callEvent(event);
+                        Level.getCraftServer().getPluginManager().callEvent(event);
                     }
                 }
                 // CraftBukkit end
@@ -1225,7 +1225,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         // Paper end - detailed watchdog information
     }
 
-    protected boolean isHorizontalCollisionMinor(Vec3 adjustedMovement) {
+    protected static boolean isHorizontalCollisionMinor(Vec3 adjustedMovement) {
         return false;
     }
 
@@ -1987,7 +1987,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public final Vec3 getViewVector(float tickDelta) {
-        return this.calculateViewVector(this.getViewXRot(tickDelta), this.getViewYRot(tickDelta));
+        return Entity.calculateViewVector(this.getViewXRot(tickDelta), this.getViewYRot(tickDelta));
     }
 
     public float getViewXRot(float tickDelta) {
@@ -1998,7 +1998,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return tickDelta == 1.0F ? this.getYRot() : Mth.lerp(tickDelta, this.yRotO, this.getYRot());
     }
 
-    protected final Vec3 calculateViewVector(float pitch, float yaw) {
+    protected static Vec3 calculateViewVector(float pitch, float yaw) {
         float f2 = pitch * 0.017453292F;
         float f3 = -yaw * 0.017453292F;
         float f4 = Mth.cos(f3);
@@ -2014,7 +2014,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     protected final Vec3 calculateUpVector(float pitch, float yaw) {
-        return this.calculateViewVector(pitch - 90.0F, yaw);
+        return Entity.calculateViewVector(pitch - 90.0F, yaw);
     }
 
     public final Vec3 getEyePosition() {
@@ -2128,14 +2128,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public CompoundTag saveWithoutId(CompoundTag nbt) {
         try {
             if (this.vehicle != null) {
-                nbt.put("Pos", this.newDoubleList(this.vehicle.getX(), this.getY(), this.vehicle.getZ()));
+                nbt.put("Pos", Entity.newDoubleList(this.vehicle.getX(), this.getY(), this.vehicle.getZ()));
             } else {
-                nbt.put("Pos", this.newDoubleList(this.getX(), this.getY(), this.getZ()));
+                nbt.put("Pos", Entity.newDoubleList(this.getX(), this.getY(), this.getZ()));
             }
 
             Vec3 vec3d = this.getDeltaMovement();
 
-            nbt.put("Motion", this.newDoubleList(vec3d.x, vec3d.y, vec3d.z));
+            nbt.put("Motion", Entity.newDoubleList(vec3d.x, vec3d.y, vec3d.z));
 
             // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
             // TODO: make sure this is the best way to address this.
@@ -2148,7 +2148,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             }
             // CraftBukkit end
 
-            nbt.put("Rotation", this.newFloatList(this.getYRot(), this.getXRot()));
+            nbt.put("Rotation", Entity.newFloatList(this.getYRot(), this.getXRot()));
             nbt.putFloat("FallDistance", this.fallDistance);
             nbt.putShort("Fire", (short) this.remainingFireTicks);
             nbt.putShort("Air", (short) this.getAirSupply());
@@ -2251,7 +2251,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 if (originWorld != null) {
                     nbt.putUUID("Paper.OriginWorld", originWorld);
                 }
-                nbt.put("Paper.Origin", this.newDoubleList(origin.getX(), origin.getY(), origin.getZ()));
+                nbt.put("Paper.Origin", Entity.newDoubleList(origin.getX(), origin.getY(), origin.getZ()));
             }
             if (spawnReason != null) {
                 nbt.putString("Paper.SpawnReason", spawnReason.name());
@@ -2460,7 +2460,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     protected abstract void addAdditionalSaveData(CompoundTag nbt);
 
-    protected ListTag newDoubleList(double... values) {
+    protected static ListTag newDoubleList(double... values) {
         ListTag nbttaglist = new ListTag();
         double[] adouble1 = values;
         int i = values.length;
@@ -2474,7 +2474,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return nbttaglist;
     }
 
-    protected ListTag newFloatList(float... values) {
+    protected static ListTag newFloatList(float... values) {
         ListTag nbttaglist = new ListTag();
         float[] afloat1 = values;
         int i = values.length;
@@ -2819,7 +2819,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public Vec3 getLookAngle() {
-        return this.calculateViewVector(this.getXRot(), this.getYRot());
+        return Entity.calculateViewVector(this.getXRot(), this.getYRot());
     }
 
     public Vec3 getHandHoldingItemAngle(Item item) {
@@ -2830,7 +2830,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             boolean flag = entityhuman.getOffhandItem().is(item) && !entityhuman.getMainHandItem().is(item);
             HumanoidArm enummainhand = flag ? entityhuman.getMainArm().getOpposite() : entityhuman.getMainArm();
 
-            return this.calculateViewVector(0.0F, this.getYRot() + (float) (enummainhand == HumanoidArm.RIGHT ? 80 : -80)).scale(0.5D);
+            return Entity.calculateViewVector(0.0F, this.getYRot() + (float) (enummainhand == HumanoidArm.RIGHT ? 80 : -80)).scale(0.5D);
         }
     }
 
@@ -3109,16 +3109,16 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public float getPercentFrozen() {
-        int i = this.getTicksRequiredToFreeze();
+        int i = Entity.getTicksRequiredToFreeze();
 
         return (float) Math.min(this.getTicksFrozen(), i) / (float) i;
     }
 
     public boolean isFullyFrozen() {
-        return this.getTicksFrozen() >= this.getTicksRequiredToFreeze();
+        return this.getTicksFrozen() >= Entity.getTicksRequiredToFreeze();
     }
 
-    public int getTicksRequiredToFreeze() {
+    public static int getTicksRequiredToFreeze() {
         return 140;
     }
 
@@ -3784,7 +3784,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return false;
     }
 
-    public void doEnchantDamageEffects(net.minecraft.world.entity.LivingEntity attacker, Entity target) {
+    public static void doEnchantDamageEffects(net.minecraft.world.entity.LivingEntity attacker, Entity target) {
         if (target instanceof net.minecraft.world.entity.LivingEntity) {
             EnchantmentHelper.doPostHurtEffects((net.minecraft.world.entity.LivingEntity) target, attacker);
         }
@@ -3940,7 +3940,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public boolean isControlledByLocalInstance() {
         Entity entity = this.getControllingPassenger();
 
-        return entity instanceof Player ? ((Player) entity).isLocalPlayer() : !this.level.isClientSide;
+        return entity instanceof Player ? Player.isLocalPlayer() : !this.level.isClientSide;
     }
 
     protected static Vec3 getCollisionHorizontalEscapeVector(double vehicleWidth, double passengerWidth, float passengerYaw) {
diff --git a/src/main/java/net/minecraft/world/entity/EntitySelector.java b/src/main/java/net/minecraft/world/entity/EntitySelector.java
index d4c32274d7c2178756e5ff6e307cf1fe86e09f9d..8275a635de8cfc30e133bd22b6ec9d49752beb94 100644
--- a/src/main/java/net/minecraft/world/entity/EntitySelector.java
+++ b/src/main/java/net/minecraft/world/entity/EntitySelector.java
@@ -57,7 +57,7 @@ public final class EntitySelector {
         return (Predicate) (scoreboardteambase_enumteampush == Team.CollisionRule.NEVER ? Predicates.alwaysFalse() : EntitySelector.NO_SPECTATORS.and((entity1) -> {
             if (!entity1.isCollidable(ignoreClimbing) || !entity1.canCollideWithBukkit(entity) || !entity.canCollideWithBukkit(entity1)) { // CraftBukkit - collidable API // Paper - isCollidable
                 return false;
-            } else if (entity.level.isClientSide && (!(entity1 instanceof Player) || !((Player) entity1).isLocalPlayer())) {
+            } else if (entity.level.isClientSide && (!(entity1 instanceof Player) || !Player.isLocalPlayer())) {
                 return false;
             } else {
                 Team scoreboardteambase1 = entity1.getTeam();
diff --git a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
index 2d1228670696224452cb432e0279456d8c5fe710..4932eb36be6e89f34c906c7e25704661bd96c050 100644
--- a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
+++ b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
@@ -58,7 +58,7 @@ public class ExperienceOrb extends Entity {
             try {
                 this.spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.valueOf(reason);
             } catch (Exception e) {
-                this.level.getCraftServer().getLogger().warning("Invalid spawnReason set for experience orb: " + e.getMessage() + " - " + reason);
+                Level.getCraftServer().getLogger().warning("Invalid spawnReason set for experience orb: " + e.getMessage() + " - " + reason);
             }
         }
     }
@@ -326,7 +326,7 @@ public class ExperienceOrb extends Entity {
 
         if (entry != null) {
             ItemStack itemstack = (ItemStack) entry.getValue();
-            int j = Math.min(this.xpToDurability(this.value), itemstack.getDamageValue());
+            int j = Math.min(ExperienceOrb.xpToDurability(this.value), itemstack.getDamageValue());
             // CraftBukkit start
             org.bukkit.event.player.PlayerItemMendEvent event = CraftEventFactory.callPlayerItemMendEvent(player, this, itemstack, entry.getKey(), j);
             j = event.getRepairAmount();
@@ -336,7 +336,7 @@ public class ExperienceOrb extends Entity {
             // CraftBukkit end
 
             itemstack.setDamageValue(itemstack.getDamageValue() - j);
-            int k = amount - this.durabilityToXp(j);
+            int k = amount - ExperienceOrb.durabilityToXp(j);
             this.value = k; // CraftBukkit - update exp value of orb for PlayerItemMendEvent calls
 
             return k > 0 ? this.repairPlayerItems(player, k) : 0;
@@ -345,11 +345,11 @@ public class ExperienceOrb extends Entity {
         }
     }
 
-    public int durabilityToXp(int repairAmount) {
+    public static int durabilityToXp(int repairAmount) {
         return repairAmount / 2;
     }
 
-    public int xpToDurability(int experienceAmount) {
+    public static int xpToDurability(int experienceAmount) {
         return experienceAmount * 2;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 70864f0155e2e7650b6fd8245f0372ac34b25541..406e43351b377e8aff624ccd0d64781c271fde7b 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -143,7 +143,6 @@ import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
 // CraftBukkit end
 
-import co.aikar.timings.MinecraftTimings; // Paper
 
 public abstract class LivingEntity extends Entity {
 
@@ -468,7 +467,7 @@ public abstract class LivingEntity extends Entity {
             --this.invulnerableTime;
         }
 
-        if (this.isDeadOrDying() && this.level.shouldTickDeath(this)) {
+        if (this.isDeadOrDying() && Level.shouldTickDeath(this)) {
             this.tickDeath();
         }
 
@@ -1266,7 +1265,7 @@ public abstract class LivingEntity extends Entity {
             EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), f, regainReason, isFastRegen); // Paper
             // Suppress during worldgen
             if (this.valid) {
-                this.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
             }
 
             if (!event.isCancelled()) {
@@ -1536,7 +1535,7 @@ public abstract class LivingEntity extends Entity {
             org.bukkit.inventory.EquipmentSlot handSlot = (hand != null) ? org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(hand) : null;
             EntityResurrectEvent event = new EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity(), handSlot);
             event.setCancelled(itemstack == null);
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
                 if (!itemstack1.isEmpty()) {
@@ -2563,7 +2562,7 @@ public abstract class LivingEntity extends Entity {
     @Override
     public abstract void setItemSlot(EquipmentSlot slot, ItemStack stack);
 
-    protected void verifyEquippedItem(ItemStack stack) {
+    protected static void verifyEquippedItem(ItemStack stack) {
         CompoundTag nbttagcompound = stack.getTag();
 
         if (nbttagcompound != null) {
@@ -2848,10 +2847,10 @@ public abstract class LivingEntity extends Entity {
             }
         }
 
-        this.calculateEntityAnimation(this, this instanceof FlyingAnimal);
+        LivingEntity.calculateEntityAnimation(this, this instanceof FlyingAnimal);
     }
 
-    public void calculateEntityAnimation(LivingEntity entity, boolean flutter) {
+    public static void calculateEntityAnimation(LivingEntity entity, boolean flutter) {
         entity.animationSpeedOld = entity.animationSpeed;
         double d0 = entity.getX() - entity.xo;
         double d1 = flutter ? entity.getY() - entity.yo : 0.0D;
@@ -3361,7 +3360,7 @@ public abstract class LivingEntity extends Entity {
         if (!this.level.isClientSide && !this.isDeadOrDying() && !freezeLocked) { // Paper - Freeze Tick Lock API
             i = this.getTicksFrozen();
             if (this.isInPowderSnow && this.canFreeze()) {
-                this.setTicksFrozen(Math.min(this.getTicksRequiredToFreeze(), i + 1));
+                this.setTicksFrozen(Math.min(Entity.getTicksRequiredToFreeze(), i + 1));
             } else {
                 this.setTicksFrozen(Math.max(0, i - 2));
             }
@@ -3856,7 +3855,7 @@ public abstract class LivingEntity extends Entity {
                         org.bukkit.inventory.ItemStack craftItem = CraftItemStack.asBukkitCopy(this.useItem);
                         org.bukkit.inventory.EquipmentSlot hand = org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(enumhand);
                         event = new PlayerItemConsumeEvent((Player) this.getBukkitEntity(), craftItem, hand); // Paper
-                        level.getCraftServer().getPluginManager().callEvent(event);
+                        Level.getCraftServer().getPluginManager().callEvent(event);
 
                         if (event.isCancelled()) {
                         this.stopUsingItem(); // Paper - event is using an item, clear active item to reset its use
@@ -4069,7 +4068,7 @@ public abstract class LivingEntity extends Entity {
                 if (flag1) {
                     if (!(this instanceof ServerPlayer)) {
                         EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), new Location(this.level.getWorld(), d3, d4, d5), new Location(this.level.getWorld(), d0, d6, d2));
-                        this.level.getCraftServer().getPluginManager().callEvent(teleport);
+                        Level.getCraftServer().getPluginManager().callEvent(teleport);
                         if (!teleport.isCancelled()) {
                             Location to = teleport.getTo();
                             this.teleportTo(to.getX(), to.getY(), to.getZ());
@@ -4240,7 +4239,7 @@ public abstract class LivingEntity extends Entity {
     public ItemStack eat(Level world, ItemStack stack) {
         if (stack.isEdible()) {
             world.playSound((net.minecraft.world.entity.player.Player) null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(stack), SoundSource.NEUTRAL, 1.0F, 1.0F + (world.random.nextFloat() - world.random.nextFloat()) * 0.4F);
-            this.addEatEffect(stack, world, this);
+            LivingEntity.addEatEffect(stack, world, this);
             if (!(this instanceof net.minecraft.world.entity.player.Player) || !((net.minecraft.world.entity.player.Player) this).getAbilities().instabuild) {
                 stack.shrink(1);
             }
@@ -4251,7 +4250,7 @@ public abstract class LivingEntity extends Entity {
         return stack;
     }
 
-    private void addEatEffect(ItemStack stack, Level world, LivingEntity targetEntity) {
+    private static void addEatEffect(ItemStack stack, Level world, LivingEntity targetEntity) {
         Item item = stack.getItem();
 
         if (item.isEdible()) {
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index c7a9ed0cab2eec6bf8600574d071f1294177b2ec..0c2d45f521ddd645eb55b2d4eeed8e45a6ef84dd 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -269,14 +269,14 @@ public abstract class Mob extends LivingEntity {
                 reason = this.getTarget().isAlive() ? EntityTargetEvent.TargetReason.FORGOT_TARGET : EntityTargetEvent.TargetReason.TARGET_DIED;
             }
             if (reason == EntityTargetEvent.TargetReason.UNKNOWN) {
-                level.getCraftServer().getLogger().log(java.util.logging.Level.WARNING, "Unknown target reason, please report on the issue tracker", new Exception());
+                Level.getCraftServer().getLogger().log(java.util.logging.Level.WARNING, "Unknown target reason, please report on the issue tracker", new Exception());
             }
             CraftLivingEntity ctarget = null;
             if (entityliving != null) {
                 ctarget = (CraftLivingEntity) entityliving.getBukkitEntity();
             }
             EntityTargetLivingEntityEvent event = new EntityTargetLivingEntityEvent(this.getBukkitEntity(), ctarget, reason);
-            level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
             if (event.isCancelled()) {
                 return false;
             }
@@ -736,12 +736,12 @@ public abstract class Mob extends LivingEntity {
                 SwordItem itemsword = (SwordItem) newStack.getItem();
                 SwordItem itemsword1 = (SwordItem) oldStack.getItem();
 
-                return itemsword.getDamage() != itemsword1.getDamage() ? itemsword.getDamage() > itemsword1.getDamage() : this.canReplaceEqualItem(newStack, oldStack);
+                return itemsword.getDamage() != itemsword1.getDamage() ? itemsword.getDamage() > itemsword1.getDamage() : Mob.canReplaceEqualItem(newStack, oldStack);
             }
         } else if (newStack.getItem() instanceof BowItem && oldStack.getItem() instanceof BowItem) {
-            return this.canReplaceEqualItem(newStack, oldStack);
+            return Mob.canReplaceEqualItem(newStack, oldStack);
         } else if (newStack.getItem() instanceof CrossbowItem && oldStack.getItem() instanceof CrossbowItem) {
-            return this.canReplaceEqualItem(newStack, oldStack);
+            return Mob.canReplaceEqualItem(newStack, oldStack);
         } else if (newStack.getItem() instanceof ArmorItem) {
             if (EnchantmentHelper.hasBindingCurse(oldStack)) {
                 return false;
@@ -751,7 +751,7 @@ public abstract class Mob extends LivingEntity {
                 ArmorItem itemarmor = (ArmorItem) newStack.getItem();
                 ArmorItem itemarmor1 = (ArmorItem) oldStack.getItem();
 
-                return itemarmor.getDefense() != itemarmor1.getDefense() ? itemarmor.getDefense() > itemarmor1.getDefense() : (itemarmor.getToughness() != itemarmor1.getToughness() ? itemarmor.getToughness() > itemarmor1.getToughness() : this.canReplaceEqualItem(newStack, oldStack));
+                return itemarmor.getDefense() != itemarmor1.getDefense() ? itemarmor.getDefense() > itemarmor1.getDefense() : (itemarmor.getToughness() != itemarmor1.getToughness() ? itemarmor.getToughness() > itemarmor1.getToughness() : Mob.canReplaceEqualItem(newStack, oldStack));
             }
         } else {
             if (newStack.getItem() instanceof DiggerItem) {
@@ -767,7 +767,7 @@ public abstract class Mob extends LivingEntity {
                         return itemtool.getAttackDamage() > itemtool1.getAttackDamage();
                     }
 
-                    return this.canReplaceEqualItem(newStack, oldStack);
+                    return Mob.canReplaceEqualItem(newStack, oldStack);
                 }
             }
 
@@ -775,7 +775,7 @@ public abstract class Mob extends LivingEntity {
         }
     }
 
-    public boolean canReplaceEqualItem(ItemStack newStack, ItemStack oldStack) {
+    public static boolean canReplaceEqualItem(ItemStack newStack, ItemStack oldStack) {
         return newStack.getDamageValue() >= oldStack.getDamageValue() && (!newStack.hasTag() || oldStack.hasTag()) ? (newStack.hasTag() && oldStack.hasTag() ? newStack.getTag().getAllKeys().stream().anyMatch((s) -> {
             return !s.equals("Damage");
         }) && !oldStack.getTag().getAllKeys().stream().anyMatch((s) -> {
@@ -927,11 +927,11 @@ public abstract class Mob extends LivingEntity {
         float f2 = (float) (Mth.atan2(d1, d0) * 57.2957763671875D) - 90.0F;
         float f3 = (float) (-(Mth.atan2(d2, d3) * 57.2957763671875D));
 
-        this.setXRot(this.rotlerp(this.getXRot(), f3, maxPitchChange));
-        this.setYRot(this.rotlerp(this.getYRot(), f2, maxYawChange));
+        this.setXRot(Mob.rotlerp(this.getXRot(), f3, maxPitchChange));
+        this.setYRot(Mob.rotlerp(this.getYRot(), f2, maxYawChange));
     }
 
-    private float rotlerp(float from, float to, float max) {
+    private static float rotlerp(float from, float to, float max) {
         float f3 = Mth.wrapDegrees(to - from);
 
         if (f3 > max) {
@@ -1007,7 +1007,7 @@ public abstract class Mob extends LivingEntity {
 
     @Override
     public void setItemSlot(EquipmentSlot slot, ItemStack stack) {
-        this.verifyEquippedItem(stack);
+        LivingEntity.verifyEquippedItem(stack);
         switch (slot.getType()) {
             case HAND:
                 this.onEquipItem(slot, (ItemStack) this.handItems.set(slot.getIndex(), stack), stack);
@@ -1426,7 +1426,7 @@ public abstract class Mob extends LivingEntity {
             if (!this.isAlive() || !this.leashHolder.isAlive()) {
                 // Paper start - drop leash variable
                 EntityUnleashEvent event = new EntityUnleashEvent(this.getBukkitEntity(), (!this.isAlive()) ? UnleashReason.PLAYER_UNLEASH : UnleashReason.HOLDER_GONE, true);
-                this.level.getCraftServer().getPluginManager().callEvent(event); // CraftBukkit
+                Level.getCraftServer().getPluginManager().callEvent(event); // CraftBukkit
                 this.dropLeash(true, event.isDropLeash());
                 // Paper end
             }
@@ -1622,7 +1622,7 @@ public abstract class Mob extends LivingEntity {
                 this.maybeDisableShield(entityhuman, this.getMainHandItem(), entityhuman.isUsingItem() ? entityhuman.getUseItem() : ItemStack.EMPTY);
             }
 
-            this.doEnchantDamageEffects(this, target);
+            Entity.doEnchantDamageEffects(this, target);
             this.setLastHurtMob(target);
         }
 
@@ -1675,7 +1675,7 @@ public abstract class Mob extends LivingEntity {
         super.removeAfterChangingDimensions();
         // Paper start - drop leash variable
         EntityUnleashEvent event = new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN, false);
-        this.level.getCraftServer().getPluginManager().callEvent(event); // CraftBukkit
+        Level.getCraftServer().getPluginManager().callEvent(event); // CraftBukkit
         this.dropLeash(true, event.isDropLeash());
         // Paper end
         this.getAllSlots().forEach((itemstack) -> {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
index 098253e92bd95159de93fbbdf95daee341fc5752..ad8ced79ebabfca4daa9a66171dea54604112e78 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
@@ -25,6 +25,7 @@ import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.ProjectileWeaponItem;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.Vec3;
 
@@ -105,7 +106,7 @@ public class BehaviorUtils {
         entityitem.setDefaultPickUpDelay();
         // CraftBukkit start
         org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(entity.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
-        entityitem.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         if (event.isCancelled()) {
             return;
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java b/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
index 17c76c310435f501d350bd99debacd242739196e..a036bbd254090bce1a52e0d1ba2acb096bd5757a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
@@ -53,7 +53,7 @@ public class HarvestFarmland extends Behavior<Villager> {
                 for (int j = -1; j <= 1; ++j) {
                     for (int k = -1; k <= 1; ++k) {
                         blockposition_mutableblockposition.set(entity.getX() + (double) i, entity.getY() + (double) j, entity.getZ() + (double) k);
-                        if (this.validPos(blockposition_mutableblockposition, world)) {
+                        if (HarvestFarmland.validPos(blockposition_mutableblockposition, world)) {
                             this.validFarmlandAroundVillager.add(new BlockPos(blockposition_mutableblockposition));
                         }
                     }
@@ -70,7 +70,7 @@ public class HarvestFarmland extends Behavior<Villager> {
         return this.validFarmlandAroundVillager.isEmpty() ? null : (BlockPos) this.validFarmlandAroundVillager.get(world.getRandom().nextInt(this.validFarmlandAroundVillager.size()));
     }
 
-    private boolean validPos(BlockPos pos, ServerLevel world) {
+    private static boolean validPos(BlockPos pos, ServerLevel world) {
         BlockState iblockdata = world.getBlockState(pos);
         Block block = iblockdata.getBlock();
         Block block1 = world.getBlockState(pos.below()).getBlock();
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
index 4abfeffa72bc70fd26908252ed596e816b4b9eb2..d7c25c3f30961d792d1d9ec32306d0874c8d0d0e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
@@ -3,7 +3,6 @@ package net.minecraft.world.entity.ai.behavior;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Sets;
 import java.util.Iterator;
-import java.util.List;
 import java.util.Objects;
 import java.util.Set;
 import javax.annotation.Nullable;
@@ -15,6 +14,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.DoorBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.pathfinder.Node;
@@ -68,10 +68,10 @@ public class InteractWithDoor extends Behavior<LivingEntity> {
         })) {
             DoorBlock blockdoor = (DoorBlock) iblockdata.getBlock();
 
-            if (!blockdoor.isOpen(iblockdata)) {
+            if (!DoorBlock.isOpen(iblockdata)) {
                 // CraftBukkit start - entities opening doors
                 org.bukkit.event.entity.EntityInteractEvent event = new org.bukkit.event.entity.EntityInteractEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(entity.level, blockposition));
-                entity.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
                 if (event.isCancelled()) {
                     return;
                 }
@@ -79,7 +79,7 @@ public class InteractWithDoor extends Behavior<LivingEntity> {
                 blockdoor.setOpen(entity, world, iblockdata, blockposition, true);
             }
 
-            this.rememberDoorToClose(world, entity, blockposition);
+            InteractWithDoor.rememberDoorToClose(world, entity, blockposition);
         }
 
         BlockPos blockposition1 = pathpoint1.asBlockPos();
@@ -90,16 +90,16 @@ public class InteractWithDoor extends Behavior<LivingEntity> {
         })) {
             DoorBlock blockdoor1 = (DoorBlock) iblockdata1.getBlock();
 
-            if (!blockdoor1.isOpen(iblockdata1)) {
+            if (!DoorBlock.isOpen(iblockdata1)) {
                 // CraftBukkit start - entities opening doors
                 org.bukkit.event.entity.EntityInteractEvent event = new org.bukkit.event.entity.EntityInteractEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(entity.level, blockposition1));
-                entity.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
                 if (event.isCancelled()) {
                     return;
                 }
                 // CraftBukkit end
                 blockdoor1.setOpen(entity, world, iblockdata1, blockposition1, true);
-                this.rememberDoorToClose(world, entity, blockposition1);
+                InteractWithDoor.rememberDoorToClose(world, entity, blockposition1);
             }
         }
 
@@ -129,7 +129,7 @@ public class InteractWithDoor extends Behavior<LivingEntity> {
                         } else {
                             DoorBlock blockdoor = (DoorBlock) iblockdata.getBlock();
 
-                            if (!blockdoor.isOpen(iblockdata)) {
+                            if (!DoorBlock.isOpen(iblockdata)) {
                                 iterator.remove();
                             } else if (InteractWithDoor.areOtherMobsComingThroughDoor(world, entity, blockposition)) {
                                 iterator.remove();
@@ -183,7 +183,7 @@ public class InteractWithDoor extends Behavior<LivingEntity> {
         return doorPos.dimension() != world.dimension() || !doorPos.pos().closerToCenterThan(entity.position(), 2.0D);
     }
 
-    private void rememberDoorToClose(ServerLevel world, LivingEntity entity, BlockPos pos) {
+    private static void rememberDoorToClose(ServerLevel world, LivingEntity entity, BlockPos pos) {
         Brain<?> behaviorcontroller = entity.getBrain();
         GlobalPos globalpos = GlobalPos.of(world.dimension(), pos);
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
index 46e33f1c6d2397af02bb6bbf035c1c92512a6cbc..680898640e382463e36b3e69ba20ffe491dc4b4a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
@@ -112,7 +112,7 @@ public class PrepareRamNearestTarget<E extends PathfinderMob> extends Behavior<E
                     }
 
                     if (time - ((Long) this.reachedRamPositionTimestamp.get()).longValue() >= (long) this.ramPrepareTime) {
-                        entity.getBrain().setMemory(MemoryModuleType.RAM_TARGET, this.getEdgeOfBlock(blockposition, ((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTargetPosition())); // CraftBukkit - decompile error
+                        entity.getBrain().setMemory(MemoryModuleType.RAM_TARGET, PrepareRamNearestTarget.getEdgeOfBlock(blockposition, ((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTargetPosition())); // CraftBukkit - decompile error
                         world.playSound((Player) null, (Entity) entity, (SoundEvent) this.getPrepareRamSound.apply(entity), SoundSource.HOSTILE, 1.0F, entity.getVoicePitch());
                         this.ramCandidate = Optional.empty();
                     }
@@ -122,7 +122,7 @@ public class PrepareRamNearestTarget<E extends PathfinderMob> extends Behavior<E
         }
     }
 
-    private Vec3 getEdgeOfBlock(BlockPos start, BlockPos end) {
+    private static Vec3 getEdgeOfBlock(BlockPos start, BlockPos end) {
         double d0 = 0.5D;
         double d1 = 0.5D * (double) Mth.sign((double) (end.getX() - start.getX()));
         double d2 = 0.5D * (double) Mth.sign((double) (end.getZ() - start.getZ()));
@@ -133,7 +133,7 @@ public class PrepareRamNearestTarget<E extends PathfinderMob> extends Behavior<E
     private Optional<BlockPos> calculateRammingStartPosition(PathfinderMob entity, LivingEntity target) {
         BlockPos blockposition = target.blockPosition();
 
-        if (!this.isWalkableBlock(entity, blockposition)) {
+        if (!PrepareRamNearestTarget.isWalkableBlock(entity, blockposition)) {
             return Optional.empty();
         } else {
             List<BlockPos> list = Lists.newArrayList();
@@ -148,7 +148,7 @@ public class PrepareRamNearestTarget<E extends PathfinderMob> extends Behavior<E
 
                 while (true) {
                     if (i < this.maxRamDistance) {
-                        if (this.isWalkableBlock(entity, blockposition_mutableblockposition.move(enumdirection))) {
+                        if (PrepareRamNearestTarget.isWalkableBlock(entity, blockposition_mutableblockposition.move(enumdirection))) {
                             ++i;
                             continue;
                         }
@@ -176,7 +176,7 @@ public class PrepareRamNearestTarget<E extends PathfinderMob> extends Behavior<E
         }
     }
 
-    private boolean isWalkableBlock(PathfinderMob entity, BlockPos target) {
+    private static boolean isWalkableBlock(PathfinderMob entity, BlockPos target) {
         return entity.getNavigation().isStableDestination(target) && entity.getPathfindingMalus(WalkNodeEvaluator.getBlockPathTypeStatic(entity.level, target.mutable())) == 0.0F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java
index 9367ef8d70c9517be6bfbf41378286957d0baf62..860b9c2a676b9e83ff5585f74050c26dbbfbedaa 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java
@@ -81,7 +81,7 @@ public class RamTarget extends Behavior<Goat> {
             livingEntity.knockback((double)(h * g) * this.getKnockbackForce.applyAsDouble(goat), this.ramDirection.x(), this.ramDirection.z(), goat); // Paper
             this.finishRam(serverLevel, goat);
             serverLevel.playSound((Player)null, goat, this.getImpactSound.apply(goat), SoundSource.HOSTILE, 1.0F, 1.0F);
-        } else if (this.hasRammedHornBreakingBlock(serverLevel, goat)) {
+        } else if (RamTarget.hasRammedHornBreakingBlock(serverLevel, goat)) {
             serverLevel.playSound((Player)null, goat, this.getImpactSound.apply(goat), SoundSource.HOSTILE, 1.0F, 1.0F);
             boolean bl = goat.dropHorn();
             if (bl) {
@@ -100,7 +100,7 @@ public class RamTarget extends Behavior<Goat> {
 
     }
 
-    private boolean hasRammedHornBreakingBlock(ServerLevel world, Goat goat) {
+    private static boolean hasRammedHornBreakingBlock(ServerLevel world, Goat goat) {
         Vec3 vec3 = goat.getDeltaMovement().multiply(1.0D, 0.0D, 1.0D).normalize();
         BlockPos blockPos = new BlockPos(goat.position().add(vec3));
         return world.getBlockState(blockPos).is(BlockTags.SNAPS_GOAT_HORN) || world.getBlockState(blockPos.above()).is(BlockTags.SNAPS_GOAT_HORN);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
index b3adff55870c673d753f05dee4540bef0d142c7b..f9c107ae51dce38bbc950b6d2832ca9ee5206688 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
@@ -29,11 +29,11 @@ public class VillagerMakeLove extends Behavior<Villager> {
     }
 
     protected boolean checkExtraStartConditions(ServerLevel world, Villager entity) {
-        return this.isBreedingPossible(entity);
+        return VillagerMakeLove.isBreedingPossible(entity);
     }
 
     protected boolean canStillUse(ServerLevel worldserver, Villager entityvillager, long i) {
-        return i <= this.birthTimestamp && this.isBreedingPossible(entityvillager);
+        return i <= this.birthTimestamp && VillagerMakeLove.isBreedingPossible(entityvillager);
     }
 
     protected void start(ServerLevel worldserver, Villager entityvillager, long i) {
@@ -71,10 +71,10 @@ public class VillagerMakeLove extends Behavior<Villager> {
             world.broadcastEntityEvent(second, (byte) 13);
             world.broadcastEntityEvent(first, (byte) 13);
         } else {
-            Optional<Villager> optional1 = this.breed(world, first, second);
+            Optional<Villager> optional1 = VillagerMakeLove.breed(world, first, second);
 
             if (optional1.isPresent()) {
-                this.giveBedToChild(world, (Villager) optional1.get(), (BlockPos) optional.get());
+                VillagerMakeLove.giveBedToChild(world, (Villager) optional1.get(), (BlockPos) optional.get());
             } else {
                 world.getPoiManager().release((BlockPos) optional.get());
                 DebugPackets.sendPoiTicketCountPacket(world, (BlockPos) optional.get());
@@ -87,7 +87,7 @@ public class VillagerMakeLove extends Behavior<Villager> {
         entityvillager.getBrain().eraseMemory(MemoryModuleType.BREED_TARGET);
     }
 
-    private boolean isBreedingPossible(Villager villager) {
+    private static boolean isBreedingPossible(Villager villager) {
         Brain<Villager> behaviorcontroller = villager.getBrain();
         Optional<AgeableMob> optional = behaviorcontroller.getMemory(MemoryModuleType.BREED_TARGET).filter((entityageable) -> {
             return entityageable.getType() == EntityType.VILLAGER;
@@ -100,17 +100,17 @@ public class VillagerMakeLove extends Behavior<Villager> {
         return world.getPoiManager().take((holder) -> {
             return holder.is(PoiTypes.HOME);
         }, (holder, blockposition) -> {
-            return this.canReach(villager, blockposition, holder);
+            return VillagerMakeLove.canReach(villager, blockposition, holder);
         }, villager.blockPosition(), 48);
     }
 
-    private boolean canReach(Villager villager, BlockPos pos, Holder<PoiType> poiType) {
+    private static boolean canReach(Villager villager, BlockPos pos, Holder<PoiType> poiType) {
         Path pathentity = villager.getNavigation().createPath(pos, ((PoiType) poiType.value()).validRange());
 
         return pathentity != null && pathentity.canReach();
     }
 
-    private Optional<Villager> breed(ServerLevel world, Villager parent, Villager partner) {
+    private static Optional<Villager> breed(ServerLevel world, Villager parent, Villager partner) {
         Villager entityvillager2 = parent.getBreedOffspring(world, partner);
 
         if (entityvillager2 == null) {
@@ -131,7 +131,7 @@ public class VillagerMakeLove extends Behavior<Villager> {
         }
     }
 
-    private void giveBedToChild(ServerLevel world, Villager child, BlockPos pos) {
+    private static void giveBedToChild(ServerLevel world, Villager child, BlockPos pos) {
         GlobalPos globalpos = GlobalPos.of(world.dimension(), pos);
 
         child.getBrain().setMemory(MemoryModuleType.HOME, globalpos); // CraftBukkit - decompile error
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java b/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
index 915fda62af3ab94d3cfa5834a9659157c019fb51..92e5e8f6e53bf0c63c1792e15bf1487c47a9a23a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
@@ -31,7 +31,7 @@ public class WorkAtComposter extends WorkAtPoi {
             BlockState iblockdata = world.getBlockState(globalpos.pos());
 
             if (iblockdata.is(Blocks.COMPOSTER)) {
-                this.makeBread(entity);
+                WorkAtComposter.makeBread(entity);
                 this.compostItems(world, entity, globalpos, iblockdata);
             }
 
@@ -69,7 +69,7 @@ public class WorkAtComposter extends WorkAtPoi {
                     for (int l1 = 0; l1 < k1; ++l1) {
                         iblockdata1 = ComposterBlock.insertItem(iblockdata1, world, itemstack, blockposition, entity); // CraftBukkit
                         if (((Integer) iblockdata1.getValue(ComposterBlock.LEVEL)).intValue() == 7) {
-                            this.spawnComposterFillEffects(world, composterState, blockposition, iblockdata1);
+                            WorkAtComposter.spawnComposterFillEffects(world, composterState, blockposition, iblockdata1);
                             return;
                         }
                     }
@@ -77,14 +77,14 @@ public class WorkAtComposter extends WorkAtPoi {
             }
         }
 
-        this.spawnComposterFillEffects(world, composterState, blockposition, iblockdata1);
+        WorkAtComposter.spawnComposterFillEffects(world, composterState, blockposition, iblockdata1);
     }
 
-    private void spawnComposterFillEffects(ServerLevel world, BlockState oldState, BlockPos pos, BlockState newState) {
+    private static void spawnComposterFillEffects(ServerLevel world, BlockState oldState, BlockPos pos, BlockState newState) {
         world.levelEvent(1500, pos, newState != oldState ? 1 : 0);
     }
 
-    private void makeBread(Villager entity) {
+    private static void makeBread(Villager entity) {
         SimpleContainer inventorysubcontainer = entity.getInventory();
 
         if (inventorysubcontainer.countItem(Items.BREAD) <= 36) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
index 7dc8cc93e8da37e1096c3263c1c8fc55bbf60401..c82947e1a8ab0fa732af72d4611943a007017398 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
@@ -8,6 +8,7 @@ import net.minecraft.world.entity.TamableAnimal;
 import net.minecraft.world.entity.ai.navigation.FlyingPathNavigation;
 import net.minecraft.world.entity.ai.navigation.GroundPathNavigation;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.LeavesBlock;
 import net.minecraft.world.level.block.state.BlockState;
@@ -129,7 +130,7 @@ public class FollowOwnerGoal extends Goal {
             CraftEntity entity = this.tamable.getBukkitEntity();
             Location to = new Location(entity.getWorld(), (double) x + 0.5D, (double) y, (double) z + 0.5D, this.tamable.getYRot(), this.tamable.getXRot());
             EntityTeleportEvent event = new EntityTeleportEvent(entity, entity.getLocation(), to);
-            this.tamable.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
             if (event.isCancelled()) {
                 return false;
             }
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
index 268b7457c2a93af6d36c1c5f623c5856f94a7af1..cbb44877f33bbeb7766909c54e226e3bd2e24096 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
@@ -33,7 +33,7 @@ public class PanicGoal extends Goal {
             return false;
         } else {
             if (this.mob.isOnFire()) {
-                BlockPos blockposition = this.lookForWater(this.mob.level, this.mob, 5);
+                BlockPos blockposition = PanicGoal.lookForWater(this.mob.level, this.mob, 5);
 
                 if (blockposition != null) {
                     this.posX = (double) blockposition.getX();
@@ -91,7 +91,7 @@ public class PanicGoal extends Goal {
     }
 
     @Nullable
-    protected BlockPos lookForWater(BlockGetter world, Entity entity, int rangeX) {
+    protected static BlockPos lookForWater(BlockGetter world, Entity entity, int rangeX) {
         BlockPos blockposition = entity.blockPosition();
 
         return !world.getBlockState(blockposition).getCollisionShape(world, blockposition).isEmpty() ? null : (BlockPos) BlockPos.findClosestMatch(entity.blockPosition(), rangeX, 1, (blockposition1) -> {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
index bd0cbf4390fc7d00b4bd5008cdf8f6f49df4f69b..f1e4f0649d588c2469451ba647e75aa96121bb2c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
@@ -2,7 +2,6 @@ package net.minecraft.world.entity.ai.goal;
 
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.ItemParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
@@ -18,7 +17,6 @@ import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.chunk.ChunkAccess;
-import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.phys.Vec3;
 // CraftBukkit start
 import org.bukkit.craftbukkit.block.CraftBlock;
@@ -106,7 +104,7 @@ public class RemoveBlockGoal extends MoveToBlockGoal {
             if (this.ticksSinceReachedGoal > 60) {
                 // CraftBukkit start - Step on eggs
                 EntityInteractEvent event = new EntityInteractEvent(this.removerMob.getBukkitEntity(), CraftBlock.at(world, blockposition1));
-                world.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) event);
+                Level.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) event);
 
                 if (event.isCancelled()) {
                     return;
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
index 719f5679a73a3e12f1d04aebb6d73383ba1b615c..5c06b858e80671854032c27f7c4cdb12cd95de0f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -19,7 +19,6 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.function.DoublePredicate;
 import java.util.function.Predicate;
-import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import net.minecraft.core.UUIDUtil;
 import net.minecraft.util.RandomSource;
@@ -127,7 +126,7 @@ public class GossipContainer {
     public void add(UUID target, GossipType type, int value) {
         GossipContainer.EntityGossips entityGossips = this.getOrCreate(target);
         entityGossips.entries.mergeInt(type, value, (left, right) -> {
-            return this.mergeValuesForAddition(type, left, right);
+            return GossipContainer.mergeValuesForAddition(type, left, right);
         });
         entityGossips.makeSureValueIsntTooLowOrTooHigh(type);
         if (entityGossips.isEmpty()) {
@@ -182,7 +181,7 @@ public class GossipContainer {
         return Math.max(left, right);
     }
 
-    private int mergeValuesForAddition(GossipType type, int left, int right) {
+    private static int mergeValuesForAddition(GossipType type, int left, int right) {
         int i = left + right;
         return i > type.max ? Math.max(type.max, left) : i;
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/targeting/TargetingConditions.java b/src/main/java/net/minecraft/world/entity/ai/targeting/TargetingConditions.java
index a7575b5ef56af6f53448d391abb4956e130148ca..49b19a429f0789c81806ba3750fffcf1cb0449ee 100644
--- a/src/main/java/net/minecraft/world/entity/ai/targeting/TargetingConditions.java
+++ b/src/main/java/net/minecraft/world/entity/ai/targeting/TargetingConditions.java
@@ -76,7 +76,7 @@ public class TargetingConditions {
 
                 if (this.range > 0.0D) {
                     double d = this.testInvisible ? targetEntity.getVisibilityPercent(baseEntity) : 1.0D;
-                    double e = Math.max((this.useFollowRange ? this.getFollowRange(baseEntity) : this.range) * d, 2.0D); // Paper
+                    double e = Math.max((this.useFollowRange ? TargetingConditions.getFollowRange(baseEntity) : this.range) * d, 2.0D); // Paper
                     double f = baseEntity.distanceToSqr(targetEntity.getX(), targetEntity.getY(), targetEntity.getZ());
                     if (f > e * e) {
                         return false;
@@ -103,7 +103,7 @@ public class TargetingConditions {
         return this;
     }
 
-    private double getFollowRange(LivingEntity entityliving) {
+    private static double getFollowRange(LivingEntity entityliving) {
         net.minecraft.world.entity.ai.attributes.AttributeInstance attributeinstance = entityliving.getAttribute(net.minecraft.world.entity.ai.attributes.Attributes.FOLLOW_RANGE);
         return attributeinstance == null ? 16.0D : attributeinstance.getValue();
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/VillageSiege.java b/src/main/java/net/minecraft/world/entity/ai/village/VillageSiege.java
index fed09b886f4fa0006d160e5f2abb00dfee45434d..43564342960940fe5483f14202c79bf088d2f4f0 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/VillageSiege.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/VillageSiege.java
@@ -92,7 +92,7 @@ public class VillageSiege implements CustomSpawner {
                         this.spawnX = blockposition.getX() + Mth.floor(Mth.cos(f) * 32.0F);
                         this.spawnY = blockposition.getY();
                         this.spawnZ = blockposition.getZ() + Mth.floor(Mth.sin(f) * 32.0F);
-                        if (this.findRandomSpawnPos(world, new BlockPos(this.spawnX, this.spawnY, this.spawnZ)) != null) {
+                        if (VillageSiege.findRandomSpawnPos(world, new BlockPos(this.spawnX, this.spawnY, this.spawnZ)) != null) {
                             this.nextSpawnTime = 0;
                             this.zombiesToSpawn = 20;
                             break;
@@ -108,7 +108,7 @@ public class VillageSiege implements CustomSpawner {
     }
 
     private void trySpawn(ServerLevel world) {
-        Vec3 vec3d = this.findRandomSpawnPos(world, new BlockPos(this.spawnX, this.spawnY, this.spawnZ));
+        Vec3 vec3d = VillageSiege.findRandomSpawnPos(world, new BlockPos(this.spawnX, this.spawnY, this.spawnZ));
 
         if (vec3d != null) {
             Zombie entityzombie;
@@ -128,7 +128,7 @@ public class VillageSiege implements CustomSpawner {
     }
 
     @Nullable
-    private Vec3 findRandomSpawnPos(ServerLevel world, BlockPos pos) {
+    private static Vec3 findRandomSpawnPos(ServerLevel world, BlockPos pos) {
         for (int i = 0; i < 10; ++i) {
             int j = pos.getX() + world.random.nextInt(16) - 8;
             int k = pos.getZ() + world.random.nextInt(16) - 8;
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index 204bdfa22b2ef770379bb50c41a347bed823f665..4143b2b090ed1bb896b19095b656fdedee35f2b5 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -4,8 +4,7 @@ import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.longs.Long2ByteMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
+
 import java.nio.file.Path;
 import java.util.Comparator;
 import java.util.List;
@@ -335,14 +334,14 @@ public class PoiManager extends SectionStorage<PoiSection> {
         Util.ifElse(this.getOrLoad(sectionPos.asLong()), (poiSet) -> {
             poiSet.refresh((biConsumer) -> {
                 if (mayHavePoi(chunkSection)) {
-                    this.updateFromSection(chunkSection, sectionPos, biConsumer);
+                    PoiManager.updateFromSection(chunkSection, sectionPos, biConsumer);
                 }
 
             });
         }, () -> {
             if (mayHavePoi(chunkSection)) {
                 PoiSection poiSection = this.getOrCreate(sectionPos.asLong());
-                this.updateFromSection(chunkSection, sectionPos, poiSection::add);
+                PoiManager.updateFromSection(chunkSection, sectionPos, poiSection::add);
             }
 
         });
@@ -352,7 +351,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         return chunkSection.maybeHas(PoiTypes.ALL_STATES::contains);
     }
 
-    private void updateFromSection(LevelChunkSection chunkSection, SectionPos sectionPos, BiConsumer<BlockPos, Holder<PoiType>> biConsumer) {
+    private static void updateFromSection(LevelChunkSection chunkSection, SectionPos sectionPos, BiConsumer<BlockPos, Holder<PoiType>> biConsumer) {
         sectionPos.blocksInside().forEach((pos) -> {
             BlockState blockState = chunkSection.getBlockState(SectionPos.sectionRelative(pos.getX()), SectionPos.sectionRelative(pos.getY()), SectionPos.sectionRelative(pos.getZ()));
             PoiTypes.forState(blockState).ifPresent((poiType) -> {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 7c789e22570086e24fcd2a6625e4b787e6247a88..300f66912fa043a9a049ced223a9d49a7f968611 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -5,7 +5,6 @@ import java.util.Comparator;
 import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Objects;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.function.Predicate;
@@ -246,7 +245,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         boolean flag = target.hurt(DamageSource.sting(this), (float) ((int) this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
 
         if (flag) {
-            this.doEnchantDamageEffects(this, target);
+            Entity.doEnchantDamageEffects(this, target);
             if (target instanceof LivingEntity) {
                 ((LivingEntity) target).setStingerCount(((LivingEntity) target).getStingerCount() + 1);
                 byte b0 = 0;
@@ -275,14 +274,14 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         super.tick();
         if (this.hasNectar() && this.getCropsGrownSincePollination() < 10 && this.random.nextFloat() < 0.05F) {
             for (int i = 0; i < this.random.nextInt(2) + 1; ++i) {
-                this.spawnFluidParticle(this.level, this.getX() - 0.30000001192092896D, this.getX() + 0.30000001192092896D, this.getZ() - 0.30000001192092896D, this.getZ() + 0.30000001192092896D, this.getY(0.5D), ParticleTypes.FALLING_NECTAR);
+                Bee.spawnFluidParticle(this.level, this.getX() - 0.30000001192092896D, this.getX() + 0.30000001192092896D, this.getZ() - 0.30000001192092896D, this.getZ() + 0.30000001192092896D, this.getY(0.5D), ParticleTypes.FALLING_NECTAR);
             }
         }
 
         this.updateRollAmount();
     }
 
-    private void spawnFluidParticle(Level world, double lastX, double x, double lastZ, double z, double y, ParticleOptions effect) {
+    private static void spawnFluidParticle(Level world, double lastX, double x, double lastZ, double z, double y, ParticleOptions effect) {
         world.addParticle(effect, Mth.lerp(world.random.nextDouble(), lastX, x), y, Mth.lerp(world.random.nextDouble(), lastZ, z), 0.0D, 0.0D, 0.0D);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 15e08e9fddbde3a2caa07fd987f529eef80458f2..4957414a0f3dabd5eaacce0889ea57dad3d469a8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -2,7 +2,6 @@ package net.minecraft.world.entity.animal;
 
 import java.util.Iterator;
 import java.util.List;
-import java.util.Objects;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -618,7 +617,7 @@ public class Cat extends TamableAnimal {
                 // CraftBukkit start
                 ItemEntity entityitem = new ItemEntity(this.cat.level, (double) blockposition_mutableblockposition.getX() - (double) Mth.sin(this.cat.yBodyRot * 0.017453292F), (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + (double) Mth.cos(this.cat.yBodyRot * 0.017453292F), itemstack);
                 org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.cat.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
-                entityitem.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
                 if (event.isCancelled()) {
                     continue;
                 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index 3217447c36f6ba757900e4376b2761070912ef0c..01e2a6d01543b3579667ff34e2c76b127e94f502 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -187,7 +187,7 @@ public class Dolphin extends WaterAnimal {
         boolean flag = target.hurt(DamageSource.mobAttack(this), (float) ((int) this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
 
         if (flag) {
-            this.doEnchantDamageEffects(this, target);
+            Entity.doEnchantDamageEffects(this, target);
             this.playSound(SoundEvents.DOLPHIN_ATTACK, 1.0F, 1.0F);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index 5bbde809b12029d5da8dec14cbb1046ef3c24e7f..1fa0a8bf7701630bb4ffd16399369232b2da9ca2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -211,7 +211,7 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
             double d2 = Math.max(0.0D, 1.0D - d1);
 
             target.setDeltaMovement(target.getDeltaMovement().add(0.0D, 0.4000000059604645D * d2, 0.0D));
-            this.doEnchantDamageEffects(this, target);
+            Entity.doEnchantDamageEffects(this, target);
         }
 
         this.playSound(SoundEvents.IRON_GOLEM_ATTACK, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index fa345c090b517c2a2571149de01b13ef2eb399b9..4f4ed3cee5b14878d86923cf8c185fa4cd272819 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -143,7 +143,7 @@ public class MushroomCow extends Cow implements Shearable {
                     this.level.addParticle(ParticleTypes.SMOKE, this.getX() + this.random.nextDouble() / 2.0D, this.getY(0.5D), this.getZ() + this.random.nextDouble() / 2.0D, 0.0D, this.random.nextDouble() / 5.0D, 0.0D);
                 }
             } else {
-                Optional<Pair<MobEffect, Integer>> optional = this.getEffectFromItemStack(itemstack);
+                Optional<Pair<MobEffect, Integer>> optional = MushroomCow.getEffectFromItemStack(itemstack);
 
                 if (!optional.isPresent()) {
                     return InteractionResult.PASS;
@@ -245,7 +245,7 @@ public class MushroomCow extends Cow implements Shearable {
 
     }
 
-    private Optional<Pair<MobEffect, Integer>> getEffectFromItemStack(ItemStack flower) {
+    private static Optional<Pair<MobEffect, Integer>> getEffectFromItemStack(ItemStack flower) {
         Item item = flower.getItem();
 
         if (item instanceof BlockItem) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index 4919f1f0c3ce746e9780e3c211c0e6adf0000777..625a15e3a0ce25222b8d93b94540ade081faf84e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -165,7 +165,7 @@ public class Rabbit extends Animal {
     public void setJumping(boolean jumping) {
         super.setJumping(jumping);
         if (jumping) {
-            this.playSound(this.getJumpSound(), this.getSoundVolume(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) * 0.8F);
+            this.playSound(Rabbit.getJumpSound(), this.getSoundVolume(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) * 0.8F);
         }
 
     }
@@ -296,7 +296,7 @@ public class Rabbit extends Animal {
         this.moreCarrotTicks = nbt.getInt("MoreCarrotTicks");
     }
 
-    protected SoundEvent getJumpSound() {
+    protected static SoundEvent getJumpSound() {
         return SoundEvents.RABBIT_JUMP;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index 7b5e4cee51342df55340a20f1af626040ec43f04..59e9b105ea50327e09649895354a4bf6190b8a81 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -348,7 +348,7 @@ public class Sheep extends Animal implements Shearable {
     public void ate() {
         // CraftBukkit start
         SheepRegrowWoolEvent event = new SheepRegrowWoolEvent((org.bukkit.entity.Sheep) this.getBukkitEntity());
-        this.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
 
         if (event.isCancelled()) return;
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index 7fd5f643ef7a3f3cbce15c80d3495fb07224e734..7896b7e4dbb7fa387cf1e4ba3abdcfd7dcdc5046 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -401,7 +401,7 @@ public class Turtle extends Animal {
             if (!this.shouldPanic()) {
                 return false;
             } else {
-                BlockPos blockposition = this.lookForWater(this.mob.level, this.mob, 7);
+                BlockPos blockposition = PanicGoal.lookForWater(this.mob.level, this.mob, 7);
 
                 if (blockposition != null) {
                     this.posX = (double) blockposition.getX();
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index 923fe785b9fcba30cc2f04025df1ca767285177b..19eb7e05b0b40032f078790dafe52a8ec8ab1b4d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -336,7 +336,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
         boolean flag = target.hurt(DamageSource.mobAttack(this), (float) ((int) this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
 
         if (flag) {
-            this.doEnchantDamageEffects(this, target);
+            Entity.doEnchantDamageEffects(this, target);
         }
 
         return flag;
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index 8a36d37790ae81b43688066d0f99fd94cbb72b43..3ff22d9e4fa3350613595ec9a396f093fc2a26fd 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -30,14 +30,7 @@ import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntityDimensions;
-import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.EquipmentSlot;
-import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MoverType;
-import net.minecraft.world.entity.PathfinderMob;
-import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.*;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -173,7 +166,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
             }
         }
 
-        this.calculateEntityAnimation(this, false);
+        LivingEntity.calculateEntityAnimation(this, false);
     }
 
     @Override
@@ -309,7 +302,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
         ItemStack itemstack = player.getItemInHand(hand);
         ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
 
-        if (this.isDancing() && this.isDuplicationItem(itemstack) && this.canDuplicate()) {
+        if (this.isDancing() && Allay.isDuplicationItem(itemstack) && this.canDuplicate()) {
             // CraftBukkit start - handle cancel duplication
             Allay allay = this.duplicateAllay();
             if (allay == null) {
@@ -318,14 +311,14 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
             // CraftBukkit end
             this.level.broadcastEntityEvent(this, (byte) 18);
             this.level.playSound(player, (Entity) this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.removeInteractionItem(player, itemstack);
+            Allay.removeInteractionItem(player, itemstack);
             return InteractionResult.SUCCESS;
         } else if (itemstack1.isEmpty() && !itemstack.isEmpty()) {
             ItemStack itemstack2 = itemstack.copy();
 
             itemstack2.setCount(1);
             this.setItemInHand(InteractionHand.MAIN_HAND, itemstack2);
-            this.removeInteractionItem(player, itemstack);
+            Allay.removeInteractionItem(player, itemstack);
             this.level.playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
             this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID()); // CraftBukkit - decompile error
             return InteractionResult.SUCCESS;
@@ -517,7 +510,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
 
     }
 
-    private boolean isDuplicationItem(ItemStack stack) {
+    private static boolean isDuplicationItem(ItemStack stack) {
         return Allay.DUPLICATION_ITEM.test(stack);
     }
 
@@ -543,7 +536,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
         return ((Boolean) this.entityData.get(Allay.DATA_CAN_DUPLICATE)).booleanValue();
     }
 
-    private void removeInteractionItem(Player player, ItemStack stack) {
+    private static void removeInteractionItem(Player player, ItemStack stack) {
         if (!player.getAbilities().instabuild) {
             stack.shrink(1);
         }
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index c8751c646198874ddb9d02501a4ecae0f0ed81f6..e6ca05792685add0a772b6cfaa47a93094a6b973 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -313,7 +313,7 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
         boolean flag = target.hurt(DamageSource.mobAttack(this), (float) ((int) this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
 
         if (flag) {
-            this.doEnchantDamageEffects(this, target);
+            Entity.doEnchantDamageEffects(this, target);
             this.playSound(SoundEvents.AXOLOTL_ATTACK, 1.0F, 1.0F);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
index 3dd4e6d622a6daafa00ae971edd88a147e34beef..9ddb6977b22a265800a58517cb1e4a822e2c3100 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -134,7 +134,7 @@ public class Tadpole extends AbstractFish {
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
         ItemStack itemstack = player.getItemInHand(hand);
 
-        if (this.isFood(itemstack)) {
+        if (Tadpole.isFood(itemstack)) {
             this.feed(player, itemstack);
             return InteractionResult.sidedSuccess(this.level.isClientSide);
         } else {
@@ -183,17 +183,17 @@ public class Tadpole extends AbstractFish {
         return SoundEvents.BUCKET_FILL_TADPOLE;
     }
 
-    private boolean isFood(ItemStack stack) {
+    private static boolean isFood(ItemStack stack) {
         return Frog.TEMPTATION_ITEM.test(stack);
     }
 
     private void feed(Player player, ItemStack stack) {
-        this.usePlayerItem(player, stack);
+        Tadpole.usePlayerItem(player, stack);
         this.ageUp(AgeableMob.getSpeedUpSecondsWhenFeeding(this.getTicksLeftUntilAdult()));
         this.level.addParticle(ParticleTypes.HAPPY_VILLAGER, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), 0.0D, 0.0D, 0.0D);
     }
 
-    private void usePlayerItem(Player player, ItemStack stack) {
+    private static void usePlayerItem(Player player, ItemStack stack) {
         if (!player.getAbilities().instabuild) {
             stack.shrink(1);
         }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
index 60b81ffb59d3f214678e7cccd9965bdb577230b7..ac156d5db5c846951987772da907c70c39345d68 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
@@ -30,7 +30,7 @@ public abstract class AbstractChestedHorse extends AbstractHorse {
 
     @Override
     protected void randomizeAttributes(RandomSource random) {
-        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue((double)this.generateRandomMaxHealth(random));
+        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue((double) AbstractHorse.generateRandomMaxHealth(random));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index 3d3d14b5dfd8bf08f3d3e31d6e044c12e1e2565e..4295eb54c4a5c0f1c5eed46db6fc8873aa6ed947 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -783,7 +783,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
                     this.setIsJumping(false);
                 }
 
-                this.calculateEntityAnimation(this, false);
+                LivingEntity.calculateEntityAnimation(this, false);
                 this.tryCheckInsideBlocks();
             } else {
                 this.flyingSpeed = 0.02F;
@@ -867,13 +867,13 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
     }
 
     protected void setOffspringAttributes(AgeableMob mate, AbstractHorse child) {
-        double d0 = this.getAttributeBaseValue(Attributes.MAX_HEALTH) + mate.getAttributeBaseValue(Attributes.MAX_HEALTH) + (double) this.generateRandomMaxHealth(this.random);
+        double d0 = this.getAttributeBaseValue(Attributes.MAX_HEALTH) + mate.getAttributeBaseValue(Attributes.MAX_HEALTH) + (double) AbstractHorse.generateRandomMaxHealth(this.random);
 
         child.getAttribute(Attributes.MAX_HEALTH).setBaseValue(d0 / 3.0D);
-        double d1 = this.getAttributeBaseValue(Attributes.JUMP_STRENGTH) + mate.getAttributeBaseValue(Attributes.JUMP_STRENGTH) + this.generateRandomJumpStrength(this.random);
+        double d1 = this.getAttributeBaseValue(Attributes.JUMP_STRENGTH) + mate.getAttributeBaseValue(Attributes.JUMP_STRENGTH) + AbstractHorse.generateRandomJumpStrength(this.random);
 
         child.getAttribute(Attributes.JUMP_STRENGTH).setBaseValue(d1 / 3.0D);
-        double d2 = this.getAttributeBaseValue(Attributes.MOVEMENT_SPEED) + mate.getAttributeBaseValue(Attributes.MOVEMENT_SPEED) + this.generateRandomSpeed(this.random);
+        double d2 = this.getAttributeBaseValue(Attributes.MOVEMENT_SPEED) + mate.getAttributeBaseValue(Attributes.MOVEMENT_SPEED) + AbstractHorse.generateRandomSpeed(this.random);
 
         child.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(d2 / 3.0D);
     }
@@ -984,15 +984,15 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
 
     }
 
-    protected float generateRandomMaxHealth(RandomSource random) {
+    protected static float generateRandomMaxHealth(RandomSource random) {
         return 15.0F + (float) random.nextInt(8) + (float) random.nextInt(9);
     }
 
-    protected double generateRandomJumpStrength(RandomSource random) {
+    protected static double generateRandomJumpStrength(RandomSource random) {
         return 0.4000000059604645D + random.nextDouble() * 0.2D + random.nextDouble() * 0.2D + random.nextDouble() * 0.2D;
     }
 
-    protected double generateRandomSpeed(RandomSource random) {
+    protected static double generateRandomSpeed(RandomSource random) {
         return (0.44999998807907104D + random.nextDouble() * 0.3D + random.nextDouble() * 0.3D + random.nextDouble() * 0.3D) * 0.25D;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
index 68887c1a475c119d061c8325136c5245011cdcbb..6ebbd5f13147935cbf652a50165797c86bb58749 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
@@ -82,12 +82,12 @@ public class SkeletonTrapGoal extends Goal {
             entityskeleton.setItemSlot(EquipmentSlot.HEAD, new ItemStack(Items.IRON_HELMET));
         }
 
-        entityskeleton.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getMainHandItem()), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
-        entityskeleton.setItemSlot(EquipmentSlot.HEAD, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getItemBySlot(EquipmentSlot.HEAD)), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
+        entityskeleton.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), SkeletonTrapGoal.disenchant(entityskeleton.getMainHandItem()), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
+        entityskeleton.setItemSlot(EquipmentSlot.HEAD, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), SkeletonTrapGoal.disenchant(entityskeleton.getItemBySlot(EquipmentSlot.HEAD)), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
         return entityskeleton;
     }
 
-    private ItemStack disenchant(ItemStack stack) {
+    private static ItemStack disenchant(ItemStack stack) {
         stack.removeTagKey("Enchantments");
         return stack;
     }
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
index b7587cbed0e9af5e16283e4f86ba633940506f38..cbefe5eb8834b6b66b16df30c5b9e9e0ec944211 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
@@ -127,7 +127,7 @@ public class EndCrystal extends Entity {
                 if (!source.isExplosion()) {
                     // CraftBukkit start
                     ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 6.0F, false);
-                    this.level.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                     if (event.isCancelled()) {
                         this.unsetRemoved();
                         return false;
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
index 85329b6cb81e7a0f5678d5bd50c48dc2029a7184..30fd31b51f2915593f4326905b174f53d1647a85 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -354,7 +354,7 @@ public class EnderDragon extends Mob implements Enemy {
                     }
 
                     double[] adouble1 = this.getLatencyPos(12 + k * 2, 1.0F);
-                    float f16 = this.getYRot() * 0.017453292F + this.rotWrap(adouble1[0] - adouble[0]) * 0.017453292F;
+                    float f16 = this.getYRot() * 0.017453292F + EnderDragon.rotWrap(adouble1[0] - adouble[0]) * 0.017453292F;
 
                     f3 = Mth.sin(f16);
                     f4 = Mth.cos(f16);
@@ -406,7 +406,7 @@ public class EnderDragon extends Mob implements Enemy {
             } else if (this.tickCount % 10 == 0 && this.getHealth() < this.getMaxHealth()) {
                 // CraftBukkit start
                 EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), 1.0F, EntityRegainHealthEvent.RegainReason.ENDER_CRYSTAL);
-                this.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (!event.isCancelled()) {
                     this.setHealth((float) (this.getHealth() + event.getAmount()));
@@ -452,7 +452,7 @@ public class EnderDragon extends Mob implements Enemy {
                 entity.push(d2 / d4 * 4.0D, 0.20000000298023224D, d3 / d4 * 4.0D);
                 if (!this.phaseManager.getCurrentPhase().isSitting() && ((LivingEntity) entity).getLastHurtByMobTimestamp() < entity.tickCount - 2) {
                     entity.hurt(DamageSource.mobAttack(this), 5.0F);
-                    this.doEnchantDamageEffects(this, entity);
+                    Entity.doEnchantDamageEffects(this, entity);
                 }
             }
         }
@@ -467,13 +467,13 @@ public class EnderDragon extends Mob implements Enemy {
 
             if (entity instanceof LivingEntity) {
                 entity.hurt(DamageSource.mobAttack(this), 10.0F);
-                this.doEnchantDamageEffects(this, entity);
+                Entity.doEnchantDamageEffects(this, entity);
             }
         }
 
     }
 
-    private float rotWrap(double yawDegrees) {
+    private static float rotWrap(double yawDegrees) {
         return (float) Mth.wrapDegrees(yawDegrees);
     }
 
@@ -675,7 +675,7 @@ public class EnderDragon extends Mob implements Enemy {
             if (this.dragonDeathTime == 1 && !this.isSilent()) {
                 // CraftBukkit start - Use relative location for far away sounds
                 // this.world.b(1028, this.getChunkCoordinates(), 0);
-                int viewDistance = ((ServerLevel) this.level).getCraftServer().getViewDistance() * 16;
+                int viewDistance = Level.getCraftServer().getViewDistance() * 16;
                 for (net.minecraft.server.level.ServerPlayer player : (List<net.minecraft.server.level.ServerPlayer>) ((ServerLevel)level).players()) {
                     double deltaX = this.getX() - player.getX();
                     double deltaZ = this.getZ() - player.getZ();
@@ -834,7 +834,7 @@ public class EnderDragon extends Mob implements Enemy {
                     pathpoint1 = pathNode;
                 }
 
-                return this.reconstructPath(pathpoint2, pathpoint1);
+                return EnderDragon.reconstructPath(pathpoint2, pathpoint1);
             }
 
             if (pathpoint4.distanceTo(pathpoint1) < pathpoint3.distanceTo(pathpoint1)) {
@@ -896,11 +896,11 @@ public class EnderDragon extends Mob implements Enemy {
                 pathpoint3 = pathNode;
             }
 
-            return this.reconstructPath(pathpoint2, pathpoint3);
+            return EnderDragon.reconstructPath(pathpoint2, pathpoint3);
         }
     }
 
-    private Path reconstructPath(Node unused, Node node) {
+    private static Path reconstructPath(Node unused, Node node) {
         List<Node> list = Lists.newArrayList();
         Node pathpoint2 = node;
 
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java
index 3fcce40c489a6ca5deb7be2cd4ae52e7dd82f613..adaded988fef65931a0c74b710c60ffaf5f6ec18 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java
@@ -3,6 +3,7 @@ package net.minecraft.world.entity.boss.enderdragon.phases;
 import com.mojang.logging.LogUtils;
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+import net.minecraft.world.level.Level;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -35,7 +36,7 @@ public class EnderDragonPhaseManager {
                     (this.currentPhase == null) ? null : CraftEnderDragon.getBukkitPhase(this.currentPhase.getPhase()),
                     CraftEnderDragon.getBukkitPhase(type)
             );
-            this.dragon.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
             if (event.isCancelled()) {
                 return;
             }
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index b7537299fa57f4c7b11927a0127856b2d6d80079..5b56b7edd6b753d510246a047758208ff5944a4e 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -47,9 +47,7 @@ import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerBossEvent;
-import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
@@ -226,10 +224,10 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
                 float f = (float) (Mth.atan2(d6, d4) * 57.2957763671875D) - 90.0F;
                 float f1 = (float) (-(Mth.atan2(d5, d7) * 57.2957763671875D));
 
-                this.xRotHeads[i] = this.rotlerp(this.xRotHeads[i], f1, 40.0F);
-                this.yRotHeads[i] = this.rotlerp(this.yRotHeads[i], f, 10.0F);
+                this.xRotHeads[i] = WitherBoss.rotlerp(this.xRotHeads[i], f1, 40.0F);
+                this.yRotHeads[i] = WitherBoss.rotlerp(this.yRotHeads[i], f, 10.0F);
             } else {
-                this.yRotHeads[i] = this.rotlerp(this.yRotHeads[i], this.yBodyRot, 10.0F);
+                this.yRotHeads[i] = WitherBoss.rotlerp(this.yRotHeads[i], this.yBodyRot, 10.0F);
             }
         }
 
@@ -266,7 +264,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
                 // CraftBukkit start
                 // this.level.explode(this, this.getX(), this.getEyeY(), this.getZ(), 7.0F, false, explosion_effect);
                 ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 7.0F, false);
-                this.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (!event.isCancelled()) {
                     this.level.explode(this, this.getX(), this.getEyeY(), this.getZ(), event.getRadius(), event.getFire(), explosion_effect);
@@ -276,7 +274,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
                 if (!this.isSilent()) {
                     // CraftBukkit start - Use relative location for far away sounds
                     // this.world.globalLevelEvent(1023, new BlockPosition(this), 0);
-                    int viewDistance = ((ServerLevel) this.level).getCraftServer().getViewDistance() * 16;
+                    int viewDistance = Level.getCraftServer().getViewDistance() * 16;
                     for (ServerPlayer player : (List<ServerPlayer>)this.level.players()) { // Paper
                         double deltaX = this.getX() - player.getX();
                         double deltaZ = this.getZ() - player.getZ();
@@ -449,7 +447,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
         }
     }
 
-    private float rotlerp(float prevAngle, float desiredAngle, float maxDifference) {
+    private static float rotlerp(float prevAngle, float desiredAngle, float maxDifference) {
         float f3 = Mth.wrapDegrees(desiredAngle - prevAngle);
 
         if (f3 > maxDifference) {
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index c40c0f2d07cc0a1dda4b43b181b2a22deeac6524..56260d2ae2b016706ce6063da3e9bbeb80683e1a 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -34,7 +34,6 @@ import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LightLayer;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.PushReaction;
@@ -187,7 +186,7 @@ public class ArmorStand extends LivingEntity {
     @Override
     public void setItemSlot(net.minecraft.world.entity.EquipmentSlot enumitemslot, ItemStack itemstack, boolean silent) {
         // CraftBukkit end
-        this.verifyEquippedItem(itemstack);
+        LivingEntity.verifyEquippedItem(itemstack);
         switch (enumitemslot.getType()) {
             case HAND:
                 this.onEquipItem(enumitemslot, (ItemStack) this.handItems.set(enumitemslot.getIndex(), itemstack), itemstack, silent); // CraftBukkit
@@ -448,7 +447,7 @@ public class ArmorStand extends LivingEntity {
             EquipmentSlot slot1 = CraftEquipmentSlot.getSlot(slot);
             EquipmentSlot hand1 = CraftEquipmentSlot.getHand(hand);
             PlayerArmorStandManipulateEvent armorStandManipulateEvent = new PlayerArmorStandManipulateEvent(player1,self,playerHeldItem,armorStandItem,slot1,hand1);
-            this.level.getCraftServer().getPluginManager().callEvent(armorStandManipulateEvent);
+            Level.getCraftServer().getPluginManager().callEvent(armorStandManipulateEvent);
 
             if (armorStandManipulateEvent.isCancelled()) {
                 return true;
@@ -770,7 +769,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public void setSmall(boolean small) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 1, small)));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(ArmorStand.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 1, small)));
     }
 
     public boolean isSmall() {
@@ -778,7 +777,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public void setShowArms(boolean showArms) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 4, showArms)));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(ArmorStand.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 4, showArms)));
     }
 
     public boolean isShowArms() {
@@ -786,7 +785,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public void setNoBasePlate(boolean hideBasePlate) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 8, hideBasePlate)));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(ArmorStand.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 8, hideBasePlate)));
     }
 
     public boolean isNoBasePlate() {
@@ -794,14 +793,14 @@ public class ArmorStand extends LivingEntity {
     }
 
     public void setMarker(boolean marker) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 16, marker)));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(ArmorStand.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 16, marker)));
     }
 
     public boolean isMarker() {
         return (((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS)).intValue() & 16) != 0;
     }
 
-    private byte setBit(byte value, int bitField, boolean set) {
+    private static byte setBit(byte value, int bitField, boolean set) {
         if (set) {
             value = (byte) (value | bitField);
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/decoration/HangingEntity.java b/src/main/java/net/minecraft/world/entity/decoration/HangingEntity.java
index 334a47b5e0d205c57dfcbb17168cbd3f21d15606..11f4573c65539d41a29f3bd1252c2e17e24d218a 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/HangingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/HangingEntity.java
@@ -133,7 +133,7 @@ public abstract class HangingEntity extends Entity {
                     }
 
                     HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), cause);
-                    this.level.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     if (this.isRemoved() || event.isCancelled()) {
                         return;
@@ -211,7 +211,7 @@ public abstract class HangingEntity extends Entity {
                     event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), source.isExplosion() ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.DEFAULT);
                 }
 
-                this.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (this.isRemoved() || event.isCancelled()) {
                     return true;
@@ -235,7 +235,7 @@ public abstract class HangingEntity extends Entity {
             // CraftBukkit start - fire break events
             // TODO - Does this need its own cause? Seems to only be triggered by pistons
             HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.PHYSICS);
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (this.isRemoved() || event.isCancelled()) {
                 return;
diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index fcc5444a1268931a0fd2df1e6bbbc17cfd5a61e0..99257f207a69a5e716846704856b5eb764514eb7 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -410,7 +410,7 @@ public class ItemEntity extends Entity {
             // Paper start
             if (this.pickupDelay <= 0) {
                 PlayerAttemptPickupItemEvent attemptEvent = new PlayerAttemptPickupItemEvent((org.bukkit.entity.Player) player.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
-                this.level.getCraftServer().getPluginManager().callEvent(attemptEvent);
+                Level.getCraftServer().getPluginManager().callEvent(attemptEvent);
 
                 flyAtPlayer = attemptEvent.getFlyAtPlayer();
                 if (attemptEvent.isCancelled()) {
@@ -428,7 +428,7 @@ public class ItemEntity extends Entity {
                 // Call legacy event
                 PlayerPickupItemEvent playerEvent = new PlayerPickupItemEvent((org.bukkit.entity.Player) player.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
                 playerEvent.setCancelled(!playerEvent.getPlayer().getCanPickupItems());
-                this.level.getCraftServer().getPluginManager().callEvent(playerEvent);
+                Level.getCraftServer().getPluginManager().callEvent(playerEvent);
                 flyAtPlayer = playerEvent.getFlyAtPlayer(); // Paper
                 if (playerEvent.isCancelled()) {
                     itemstack.setCount(i); // SPIGOT-5294 - restore count
@@ -443,7 +443,7 @@ public class ItemEntity extends Entity {
                 // Call newer event afterwards
                 EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((org.bukkit.entity.Player) player.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
                 entityEvent.setCancelled(!entityEvent.getEntity().getCanPickupItems());
-                this.level.getCraftServer().getPluginManager().callEvent(entityEvent);
+                Level.getCraftServer().getPluginManager().callEvent(entityEvent);
                 if (entityEvent.isCancelled()) {
                     itemstack.setCount(i); // SPIGOT-5294 - restore count
                     return;
diff --git a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
index 8475898d8e5f11a0c6c0a9700ee67fb284d6347e..fdb68ceddc429f9f2819457d6d7d6e1264e150c2 100644
--- a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
+++ b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
@@ -125,7 +125,7 @@ public class PrimedTnt extends Entity {
         // float f = 4.0F;
 
         ExplosionPrimeEvent event = new ExplosionPrimeEvent((org.bukkit.entity.Explosive) this.getBukkitEntity());
-        this.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
 
         if (!event.isCancelled()) {
             this.level.explode(this, this.getX(), this.getY(0.0625D), this.getZ(), event.getRadius(), event.getFire(), Explosion.BlockInteraction.BREAK);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Creeper.java b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
index 28862277c0a1c73306715e6e343f3e65241f3d87..bed99619db4c70e9f6322e809a85f1e328d27c8f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Creeper.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
@@ -264,7 +264,7 @@ public class Creeper extends Monster implements PowerableMob {
 
             // CraftBukkit start
             ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), this.explosionRadius * f, false);
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
             if (!event.isCancelled()) {
                 this.dead = true;
                 this.level.explode(this, this.getX(), this.getY(), this.getZ(), event.getRadius(), event.getFire(), explosion_effect);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Shulker.java b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
index 45a2afb4ad8d5c3f6e20412b4990a18ef020bc89..938386096d305e0093b0d0d6550990101acc0a4e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Shulker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
@@ -410,7 +410,7 @@ public class Shulker extends AbstractGolem implements Enemy {
                     if (enumdirection != null) {
                         // CraftBukkit start
                         EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), this.getBukkitEntity().getLocation(), new Location(this.level.getWorld(), blockposition1.getX(), blockposition1.getY(), blockposition1.getZ()));
-                        this.level.getCraftServer().getPluginManager().callEvent(teleport);
+                        Level.getCraftServer().getPluginManager().callEvent(teleport);
                         if (!teleport.isCancelled()) {
                             Location to = teleport.getTo();
                             blockposition1 = new BlockPos(to.getX(), to.getY(), to.getZ());
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 411013eb1e909512f14a97e63d99a7d8f8646654..4adefa3d00e4fdbb1f6d1f8ccae0a33a4c249450 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -219,7 +219,7 @@ public class Slime extends Mob implements Enemy {
 
             // CraftBukkit start
             SlimeSplitEvent event = new SlimeSplitEvent((org.bukkit.entity.Slime) this.getBukkitEntity(), k);
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (!event.isCancelled() && event.getCount() > 0) {
                 k = event.getCount();
@@ -285,7 +285,7 @@ public class Slime extends Mob implements Enemy {
 
             if (this.distanceToSqr((Entity) target) < 0.6D * (double) i * 0.6D * (double) i && this.hasLineOfSight(target) && target.hurt(DamageSource.mobAttack(this), this.getAttackDamage())) {
                 this.playSound(SoundEvents.SLIME_ATTACK, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
-                this.doEnchantDamageEffects(this, target);
+                Entity.doEnchantDamageEffects(this, target);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index 1947d94854cdfbbda155e62ab0160a72dd428e1f..926e860ee6b2521aa88120d29bd391eaa61387cf 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -200,10 +200,10 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     public Entity getControllingPassenger() {
         Entity entity = this.getFirstPassenger();
 
-        return entity != null && this.canBeControlledBy(entity) ? entity : null;
+        return entity != null && Strider.canBeControlledBy(entity) ? entity : null;
     }
 
-    private boolean canBeControlledBy(Entity entity) {
+    private static boolean canBeControlledBy(Entity entity) {
         if (!(entity instanceof Player)) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
index b95dbb65cc59f4ae8d5c525b6c0ea466a8dee40f..b2bd04af188066c8427f944b0d9b1d30642f2cfd 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
@@ -181,7 +181,7 @@ public class Vindicator extends AbstractIllager {
         ItemStack itemStack = new ItemStack(Items.IRON_AXE);
         Raid raid = this.getCurrentRaid();
         int i = 1;
-        if (wave > raid.getNumGroups(Difficulty.NORMAL)) {
+        if (wave > Raid.getNumGroups(Difficulty.NORMAL)) {
             i = 2;
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index b9ad5b4717629c72238cfce718923cb8bb79cbbc..e7f18eb11d51a5a12bf4d851f4111201f601bc5c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -369,7 +369,7 @@ public class Zombie extends Monster {
             if (this.getMainHandItem().isEmpty() && this.isOnFire() && this.random.nextFloat() < f * 0.3F) {
                 // CraftBukkit start
                 EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), target.getBukkitEntity(), 2 * (int) f); // PAIL: fixme
-                this.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (!event.isCancelled()) {
                     target.setSecondsOnFire(event.getDuration(), false);
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 9e47bb825987b9c7684cc4be92112e91b1dd1dbc..f842d9751f75e255df7b987592d0f280b44fe021 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -272,7 +272,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
 
             if (entityhuman instanceof ServerPlayer) {
                 CriteriaTriggers.CURED_ZOMBIE_VILLAGER.trigger((ServerPlayer) entityhuman, this, entityvillager);
-                world.onReputationEvent(ReputationEventType.ZOMBIE_VILLAGER_CURED, entityhuman, entityvillager);
+                ServerLevel.onReputationEvent(ReputationEventType.ZOMBIE_VILLAGER_CURED, entityhuman, entityvillager);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index d0567234d1261227d29bb254f959604dc91b3c72..05864b28650424d28af2554141cffc836db5d913 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -173,7 +173,7 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob {
         // CraftBukkit start
         Entity entity = ((ServerLevel) this.level).getEntity(this.getPersistentAngerTarget());
         org.bukkit.event.entity.PigZombieAngerEvent event = new org.bukkit.event.entity.PigZombieAngerEvent((org.bukkit.entity.PigZombie) this.getBukkitEntity(), (entity == null) ? null : entity.getBukkitEntity(), ZombifiedPiglin.PERSISTENT_ANGER_TIME.sample(this.random));
-        this.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         if (event.isCancelled()) {
             this.setPersistentAngerTarget(null);
             pathfinderGoalHurtByTarget.stop(); // Paper - clear goalTargets to fix cancellation
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 132652cc2a8f214186e739fc8b040abe9fba7860..aaa86e9a0c96795d85d3351823060543d639de86 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -498,7 +498,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
             // Paper start
             int activeAnger = this.angerManagement.getActiveAnger(entity);
             io.papermc.paper.event.entity.WardenAngerChangeEvent event = new io.papermc.paper.event.entity.WardenAngerChangeEvent((org.bukkit.entity.Warden) this.getBukkitEntity(), entity.getBukkitEntity(), activeAnger, Math.min(150, activeAnger + amount));
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
             if (event.isCancelled()) {
                 return;
             }
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index b609b2c65ae9dfb320e7aa7c0f7b8fba5b4bda47..836dbbb0a387ff0a470a1dee2923e5fe889e4715 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -266,7 +266,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         }
 
         if (this.lastTradedPlayer != null && this.level instanceof ServerLevel) {
-            ((ServerLevel) this.level).onReputationEvent(ReputationEventType.TRADE, this.lastTradedPlayer, this);
+            ServerLevel.onReputationEvent(ReputationEventType.TRADE, this.lastTradedPlayer, this);
             this.level.broadcastEntityEvent(this, (byte) 14);
             this.lastTradedPlayer = null;
         }
@@ -655,7 +655,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     @Override
     public void setLastHurtByMob(@Nullable LivingEntity attacker) {
         if (attacker != null && this.level instanceof ServerLevel) {
-            ((ServerLevel) this.level).onReputationEvent(ReputationEventType.VILLAGER_HURT, attacker, this);
+            ServerLevel.onReputationEvent(ReputationEventType.VILLAGER_HURT, attacker, this);
             if (this.isAlive() && attacker instanceof Player) {
                 this.level.broadcastEntityEvent(this, (byte) 13);
             }
@@ -696,7 +696,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
                 Objects.requireNonNull(ReputationEventHandler.class);
                 nearestvisiblelivingentities.findAll(ReputationEventHandler.class::isInstance).forEach((entityliving) -> {
-                    worldserver.onReputationEvent(ReputationEventType.VILLAGER_KILLED, killer, (ReputationEventHandler) entityliving);
+                    ServerLevel.onReputationEvent(ReputationEventType.VILLAGER_KILLED, killer, (ReputationEventHandler) entityliving);
                 });
             }
         }
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
index daa7c4bd8a3f6c28f02b7117b061f0def29e3743..bf8fbd4f28467621ff550aff7b2436cf11b3ab05 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
@@ -118,7 +118,7 @@ public class WanderingTraderSpawner implements CustomSpawner {
             BlockPos blockposition1 = (BlockPos) optional.orElse(blockposition);
             BlockPos blockposition2 = this.findSpawnPositionNear(world, blockposition1, 48);
 
-            if (blockposition2 != null && this.hasEnoughSpace(world, blockposition2)) {
+            if (blockposition2 != null && WanderingTraderSpawner.hasEnoughSpace(world, blockposition2)) {
                 if (world.getBiome(blockposition2).is(BiomeTags.WITHOUT_WANDERING_TRADER_SPAWNS)) {
                     return false;
                 }
@@ -173,7 +173,7 @@ public class WanderingTraderSpawner implements CustomSpawner {
         return blockposition1;
     }
 
-    private boolean hasEnoughSpace(BlockGetter world, BlockPos pos) {
+    private static boolean hasEnoughSpace(BlockGetter world, BlockPos pos) {
         Iterator iterator = BlockPos.betweenClosed(pos, pos.offset(1, 2, 1)).iterator();
 
         BlockPos blockposition1;
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 22f6667b7139497b5b0047027ab36abf9ac36fa1..3b34c736ed82448221ece85e60e825b18a99803f 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -767,7 +767,7 @@ public abstract class Player extends LivingEntity {
             Item drop = (Item) entityitem.getBukkitEntity();
 
             PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
@@ -1015,8 +1015,8 @@ public abstract class Player extends LivingEntity {
             }
         } else {
             // This should never be called, but is implemented anyway
-            org.bukkit.OfflinePlayer thisPlayer = player.level.getCraftServer().getOfflinePlayer(player.getScoreboardName());
-            team = player.level.getCraftServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+            org.bukkit.OfflinePlayer thisPlayer = Level.getCraftServer().getOfflinePlayer(player.getScoreboardName());
+            team = Level.getCraftServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
             if (team == null || team.allowFriendlyFire()) {
                 return true;
             }
@@ -1025,7 +1025,7 @@ public abstract class Player extends LivingEntity {
         if (this instanceof ServerPlayer) {
             return !team.hasPlayer(((ServerPlayer) this).getBukkitEntity());
         }
-        return !team.hasPlayer(this.level.getCraftServer().getOfflinePlayer(this.getScoreboardName()));
+        return !team.hasPlayer(Level.getCraftServer().getOfflinePlayer(this.getScoreboardName()));
         // CraftBukkit end
     }
 
@@ -1365,7 +1365,7 @@ public abstract class Player extends LivingEntity {
                             org.bukkit.util.Vector velocity = CraftVector.toBukkit(vec3d);
 
                             PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
-                            level.getCraftServer().getPluginManager().callEvent(event);
+                            Level.getCraftServer().getPluginManager().callEvent(event);
 
                             if (event.isCancelled()) {
                                 cancelled = true;
@@ -1504,7 +1504,7 @@ public abstract class Player extends LivingEntity {
 
     }
 
-    public boolean isLocalPlayer() {
+    public static boolean isLocalPlayer() {
         return false;
     }
 
@@ -2020,7 +2020,7 @@ public abstract class Player extends LivingEntity {
     @Override
     public void setItemSlot(EquipmentSlot enumitemslot, ItemStack itemstack, boolean silent) {
         // CraftBukkit end
-        this.verifyEquippedItem(itemstack);
+        LivingEntity.verifyEquippedItem(itemstack);
         if (enumitemslot == EquipmentSlot.MAINHAND) {
             this.onEquipItem(enumitemslot, (ItemStack) this.inventory.items.set(this.inventory.selected, itemstack), itemstack, silent); // CraftBukkit
         } else if (enumitemslot == EquipmentSlot.OFFHAND) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index cb4a14e1cbcc1bd1cfbb559a4b179fee66fb54c3..e13003f21c0ff94ff6b94d354c1a3ee0b4ae8961 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -2,7 +2,7 @@ package net.minecraft.world.entity.projectile;
 
 import com.google.common.collect.Lists;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
-import java.util.Arrays;
+
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -573,9 +573,9 @@ public abstract class AbstractArrow extends Projectile {
             ItemStack itemstack = this.getPickupItem();
             if (this.pickup == Pickup.ALLOWED && !itemstack.isEmpty() && player.getInventory().canHold(itemstack) > 0) {
                 ItemEntity item = new ItemEntity(this.level, this.getX(), this.getY(), this.getZ(), itemstack);
-                PlayerPickupArrowEvent event = new PlayerPickupArrowEvent((org.bukkit.entity.Player) player.getBukkitEntity(), new org.bukkit.craftbukkit.entity.CraftItem(this.level.getCraftServer(), this, item), (org.bukkit.entity.AbstractArrow) this.getBukkitEntity());
+                PlayerPickupArrowEvent event = new PlayerPickupArrowEvent((org.bukkit.entity.Player) player.getBukkitEntity(), new org.bukkit.craftbukkit.entity.CraftItem(Level.getCraftServer(), this, item), (org.bukkit.entity.AbstractArrow) this.getBukkitEntity());
                 // event.setCancelled(!entityhuman.canPickUpLoot); TODO
-                this.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
                     return;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
index a603d99430aedb3c242c2833e0cc8a31aba49205..bbd1d783b14a141a3d78f134e2d4054adf160864 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
@@ -147,7 +147,7 @@ public abstract class AbstractHurtingProjectile extends Projectile {
     @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
-        nbt.put("power", this.newDoubleList(new double[]{this.xPower, this.yPower, this.zPower}));
+        nbt.put("power", Entity.newDoubleList(new double[]{this.xPower, this.yPower, this.zPower}));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index 1f421a1a775d3678a8c5b406587336acf869e6eb..832cd613bcf3ded0793a4a0e57cf0336b0836477 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -324,7 +324,7 @@ public class FishingHook extends Projectile {
                 this.getEntityData().set(FishingHook.DATA_BITING, Boolean.FALSE);
                 // CraftBukkit start
                 PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.getPlayerOwner().getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.FAILED_ATTEMPT);
-                this.level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
+                Level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
                 // CraftBukkit end
             }
         } else {
@@ -361,7 +361,7 @@ public class FishingHook extends Projectile {
                 } else {
                     // CraftBukkit start
                     PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.getPlayerOwner().getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.BITE);
-                    this.level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
+                    Level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
                     if (playerFishEvent.isCancelled()) {
                         return;
                     }
@@ -474,7 +474,7 @@ public class FishingHook extends Projectile {
             if (this.hookedIn != null) {
                 // CraftBukkit start
                 PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) entityhuman.getBukkitEntity(), this.hookedIn.getBukkitEntity(), (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_ENTITY);
-                this.level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
+                Level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
 
                 if (playerFishEvent.isCancelled()) {
                     return 0;
@@ -504,7 +504,7 @@ public class FishingHook extends Projectile {
                     // CraftBukkit start
                     PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) entityhuman.getBukkitEntity(), entityitem != null ? entityitem.getBukkitEntity() : null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_FISH); // Paper - entityitem may be null
                     playerFishEvent.setExpToDrop(this.random.nextInt(6) + 1);
-                    this.level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
+                    Level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
 
                     if (playerFishEvent.isCancelled()) {
                         return 0;
@@ -537,7 +537,7 @@ public class FishingHook extends Projectile {
             if (this.onGround) {
                 // CraftBukkit start
                 PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) entityhuman.getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.IN_GROUND);
-                this.level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
+                Level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
 
                 if (playerFishEvent.isCancelled()) {
                     return 0;
@@ -548,7 +548,7 @@ public class FishingHook extends Projectile {
             // CraftBukkit start
             if (i == 0) {
                 PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) entityhuman.getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.REEL_IN);
-                this.level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
+                Level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
                 if (playerFishEvent.isCancelled()) {
                     return 0;
                 }
@@ -564,7 +564,7 @@ public class FishingHook extends Projectile {
 
     @Override
     public void handleEntityEvent(byte status) {
-        if (status == 31 && this.level.isClientSide && this.hookedIn instanceof net.minecraft.world.entity.player.Player && ((net.minecraft.world.entity.player.Player) this.hookedIn).isLocalPlayer()) {
+        if (status == 31 && this.level.isClientSide && this.hookedIn instanceof net.minecraft.world.entity.player.Player && net.minecraft.world.entity.player.Player.isLocalPlayer()) {
             this.pullEntity(this.hookedIn);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/LargeFireball.java b/src/main/java/net/minecraft/world/entity/projectile/LargeFireball.java
index 5237b699e000b4fed99be39b0a7e2daab9c8bf42..a17ef8344f09e2fb108181b6a710ac04449859a9 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/LargeFireball.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/LargeFireball.java
@@ -35,7 +35,7 @@ public class LargeFireball extends Fireball {
 
             // CraftBukkit start - fire ExplosionPrimeEvent
             ExplosionPrimeEvent event = new ExplosionPrimeEvent((org.bukkit.entity.Explosive) this.getBukkitEntity());
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
                 // give 'this' instead of (Entity) null so we know what causes the damage
@@ -56,7 +56,7 @@ public class LargeFireball extends Fireball {
 
             entity.hurt(DamageSource.fireball(this, entity1), 6.0F);
             if (entity1 instanceof LivingEntity) {
-                this.doEnchantDamageEffects((LivingEntity) entity1, entity);
+                Entity.doEnchantDamageEffects((LivingEntity) entity1, entity);
             }
 
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java b/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java
index a89cbcb913628eaaf107f49520f6aea7ffcc9446..394df942ab43f0826b3712a4ef8c125dca2942bc 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java
@@ -302,7 +302,7 @@ public class ShulkerBullet extends Projectile {
         boolean flag = entity.hurt(DamageSource.indirectMobAttack(this, entityliving).setProjectile(), 4.0F);
 
         if (flag) {
-            this.doEnchantDamageEffects(entityliving, entity);
+            Entity.doEnchantDamageEffects(entityliving, entity);
             if (entity instanceof LivingEntity) {
                 ((LivingEntity) entity).addEffect(new MobEffectInstance(MobEffects.LEVITATION, 200), (Entity) MoreObjects.firstNonNull(entity1, this), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
             }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java b/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java
index 00ac1cdc4734cc57f15433c5c6e7a3a545739d33..5674dd6a5dd6a3c723ab4be8ac199887b1219925 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java
@@ -43,7 +43,7 @@ public class SmallFireball extends Fireball {
 
             // CraftBukkit start - Entity damage by entity event + combust event
             EntityCombustByEntityEvent event = new EntityCombustByEntityEvent((org.bukkit.entity.Projectile) this.getBukkitEntity(), entity.getBukkitEntity(), 5);
-            entity.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
                 entity.setSecondsOnFire(event.getDuration(), false);
@@ -52,7 +52,7 @@ public class SmallFireball extends Fireball {
             if (!entity.hurt(DamageSource.fireball(this, entity1), 5.0F)) {
                 entity.setRemainingFireTicks(i);
             } else if (entity1 instanceof LivingEntity) {
-                this.doEnchantDamageEffects((LivingEntity) entity1, entity);
+                Entity.doEnchantDamageEffects((LivingEntity) entity1, entity);
             }
 
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownEgg.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownEgg.java
index 77941e3981e49cf5662b3e3c86a9c419080b17c8..2f19efdb946b4c1642cd895db3fdba6d0fcff4f2 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownEgg.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownEgg.java
@@ -70,7 +70,7 @@ public class ThrownEgg extends ThrowableItemProjectile {
                 Entity shooter = this.getOwner();
                 if (shooter instanceof ServerPlayer) {
                     PlayerEggThrowEvent event = new PlayerEggThrowEvent((Player) shooter.getBukkitEntity(), (org.bukkit.entity.Egg) this.getBukkitEntity(), hatching, b0, hatchingType);
-                    this.level.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     b0 = event.getNumHatches();
                     hatching = event.isHatching();
diff --git a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
index d10160031c02d9b7f222893c29a405cf184121f4..505fac13e3b5e9b45f0d1ca7b0b543a9d080d86e 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
@@ -63,7 +63,7 @@ public class WitherSkull extends AbstractHurtingProjectile {
                 flag = entity.hurt(DamageSource.witherSkull(this, entityliving), 8.0F);
                 if (flag) {
                     if (entity.isAlive()) {
-                        this.doEnchantDamageEffects(entityliving, entity);
+                        Entity.doEnchantDamageEffects(entityliving, entity);
                     } else {
                         entityliving.heal(5.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.WITHER); // CraftBukkit
                     }
@@ -98,7 +98,7 @@ public class WitherSkull extends AbstractHurtingProjectile {
             // CraftBukkit start
             // this.level.createExplosion(this, this.locX(), this.locY(), this.locZ(), 1.0F, false, explosion_effect);
             ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 1.0F, false);
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
                 this.level.explode(this, this.getX(), this.getY(), this.getZ(), event.getRadius(), event.getFire(), explosion_effect);
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raid.java b/src/main/java/net/minecraft/world/entity/raid/Raid.java
index 65b981791a0242c29291a71eb99f846df71e01f0..984bb55fa2e54e436e08be532b7ec8a0fdf7e10a 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raid.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raid.java
@@ -118,7 +118,7 @@ public class Raid {
         this.raidCooldownTicks = 300;
         this.raidEvent.setProgress(0.0F);
         this.center = pos;
-        this.numGroups = this.getNumGroups(world.getDifficulty());
+        this.numGroups = Raid.getNumGroups(world.getDifficulty());
         this.status = Raid.RaidStatus.ONGOING;
     }
 
@@ -242,7 +242,7 @@ public class Raid {
 
     }
 
-    public int getMaxBadOmenLevel() {
+    public static int getMaxBadOmenLevel() {
         return 5;
     }
 
@@ -257,7 +257,7 @@ public class Raid {
     public void absorbBadOmen(Player player) {
         if (player.hasEffect(MobEffects.BAD_OMEN)) {
             this.badOmenLevel += player.getEffect(MobEffects.BAD_OMEN).getAmplifier() + 1;
-            this.badOmenLevel = Mth.clamp(this.badOmenLevel, (int) 0, this.getMaxBadOmenLevel());
+            this.badOmenLevel = Mth.clamp(this.badOmenLevel, (int) 0, Raid.getMaxBadOmenLevel());
         }
 
         player.removeEffect(MobEffects.BAD_OMEN);
@@ -560,7 +560,7 @@ public class Raid {
         // CraftBukkit end
         for (int k = 0; k < j; ++k) {
             Raid.RaiderType raid_wave = araid_wave[k];
-            int l = this.getDefaultNumSpawns(raid_wave, i, flag1) + this.getPotentialBonusSpawns(raid_wave, this.random, i, difficultydamagescaler, flag1);
+            int l = this.getDefaultNumSpawns(raid_wave, i, flag1) + Raid.getPotentialBonusSpawns(raid_wave, this.random, i, difficultydamagescaler, flag1);
             int i1 = 0;
 
             for (int j1 = 0; j1 < l; ++j1) {
@@ -578,9 +578,9 @@ public class Raid {
                 if (raid_wave.entityType == EntityType.RAVAGER) {
                     Raider entityraider1 = null;
 
-                    if (i == this.getNumGroups(Difficulty.NORMAL)) {
+                    if (i == Raid.getNumGroups(Difficulty.NORMAL)) {
                         entityraider1 = (Raider) EntityType.PILLAGER.create(this.level);
-                    } else if (i >= this.getNumGroups(Difficulty.HARD)) {
+                    } else if (i >= Raid.getNumGroups(Difficulty.HARD)) {
                         if (i1 == 0) {
                             entityraider1 = (Raider) EntityType.EVOKER.create(this.level);
                         } else {
@@ -780,7 +780,7 @@ public class Raid {
         return extra ? member.spawnsPerWaveBeforeBonus[this.numGroups] : member.spawnsPerWaveBeforeBonus[wave];
     }
 
-    private int getPotentialBonusSpawns(Raid.RaiderType member, RandomSource random, int wave, DifficultyInstance localDifficulty, boolean extra) {
+    private static int getPotentialBonusSpawns(Raid.RaiderType member, RandomSource random, int wave, DifficultyInstance localDifficulty, boolean extra) {
         Difficulty enumdifficulty = localDifficulty.getDifficulty();
         boolean flag1 = enumdifficulty == Difficulty.EASY;
         boolean flag2 = enumdifficulty == Difficulty.NORMAL;
@@ -846,7 +846,7 @@ public class Raid {
         return nbt;
     }
 
-    public int getNumGroups(Difficulty difficulty) {
+    public static int getNumGroups(Difficulty difficulty) {
         switch (difficulty) {
             case EASY:
                 return 3;
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raids.java b/src/main/java/net/minecraft/world/entity/raid/Raids.java
index 2b038a191e6909837bce0b6154a7c0b7cab21710..e38e03c2c3e235ba8f06731eca7bf6560cb884d5 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raids.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raids.java
@@ -10,7 +10,6 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
-import net.minecraft.network.protocol.game.ClientboundEntityEventPacket;
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
@@ -120,7 +119,7 @@ public class Raids extends SavedData {
 
                     flag = true;
                     // CraftBukkit start - fixed a bug with raid: players could add up Bad Omen level even when the raid had finished
-                } else if (raid.isInProgress() && raid.getBadOmenLevel() < raid.getMaxBadOmenLevel()) {
+                } else if (raid.isInProgress() && raid.getBadOmenLevel() < Raid.getMaxBadOmenLevel()) {
                     flag = true;
                     // CraftBukkit end
                 } else {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index b0cbcfa090cad71b148bd7bea1e52d1abaf78e55..775cb4cf336e7700b531d288d5ebdf9a9b3c2736 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -240,7 +240,7 @@ public abstract class AbstractMinecart extends Entity {
                 org.bukkit.entity.Entity passenger = (source.getEntity() == null) ? null : source.getEntity().getBukkitEntity();
 
                 VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, amount);
-                this.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
                     return false;
@@ -258,7 +258,7 @@ public abstract class AbstractMinecart extends Entity {
                 if (flag || this.getDamage() > 40.0F) {
                     // CraftBukkit start
                     VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, passenger);
-                    this.level.getCraftServer().getPluginManager().callEvent(destroyEvent);
+                    Level.getCraftServer().getPluginManager().callEvent(destroyEvent);
 
                     if (destroyEvent.isCancelled()) {
                         this.setDamage(40); // Maximize damage so this doesn't get triggered again right away
@@ -415,10 +415,10 @@ public abstract class AbstractMinecart extends Entity {
             Location to = new Location(bworld, this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
             Vehicle vehicle = (Vehicle) this.getBukkitEntity();
 
-            this.level.getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+            Level.getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
 
             if (!from.equals(to)) {
-                this.level.getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
+                Level.getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
             }
             // CraftBukkit end
             if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
@@ -431,7 +431,7 @@ public abstract class AbstractMinecart extends Entity {
                         if (!(entity instanceof Player) && !(entity instanceof IronGolem) && !(entity instanceof AbstractMinecart) && !this.isVehicle() && !entity.isPassenger()) {
                             // CraftBukkit start
                             VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity.getBukkitEntity());
-                            this.level.getCraftServer().getPluginManager().callEvent(collisionEvent);
+                            Level.getCraftServer().getPluginManager().callEvent(collisionEvent);
 
                             if (collisionEvent.isCancelled()) {
                                 continue;
@@ -442,7 +442,7 @@ public abstract class AbstractMinecart extends Entity {
                             // CraftBukkit start
                             if (!this.isPassengerOfSameVehicle(entity)) {
                                 VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity.getBukkitEntity());
-                                this.level.getCraftServer().getPluginManager().callEvent(collisionEvent);
+                                Level.getCraftServer().getPluginManager().callEvent(collisionEvent);
 
                                 if (collisionEvent.isCancelled()) {
                                     continue;
@@ -462,7 +462,7 @@ public abstract class AbstractMinecart extends Entity {
                     if (!this.hasPassenger(entity1) && entity1.isPushable() && entity1 instanceof AbstractMinecart) {
                         // CraftBukkit start
                         VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
-                        this.level.getCraftServer().getPluginManager().callEvent(collisionEvent);
+                        Level.getCraftServer().getPluginManager().callEvent(collisionEvent);
 
                         if (collisionEvent.isCancelled()) {
                             continue;
@@ -837,7 +837,7 @@ public abstract class AbstractMinecart extends Entity {
                 if (!this.hasPassenger(entity)) {
                     // CraftBukkit start
                     VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), entity.getBukkitEntity());
-                    this.level.getCraftServer().getPluginManager().callEvent(collisionEvent);
+                    Level.getCraftServer().getPluginManager().callEvent(collisionEvent);
 
                     if (collisionEvent.isCancelled()) {
                         return;
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index f8cbd597541dd2ad57f464b6a5793451eb150a26..ba108a1f2e9e602c5a2f52b4a9d1d1094a7111f0 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -181,7 +181,7 @@ public class Boat extends Entity {
             org.bukkit.entity.Entity attacker = (source.getEntity() == null) ? null : source.getEntity().getBukkitEntity();
 
             VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, (double) amount);
-            this.level.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
                 return false;
@@ -199,7 +199,7 @@ public class Boat extends Entity {
             if (flag || this.getDamage() > 40.0F) {
                 // CraftBukkit start
                 VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, attacker);
-                this.level.getCraftServer().getPluginManager().callEvent(destroyEvent);
+                Level.getCraftServer().getPluginManager().callEvent(destroyEvent);
 
                 if (destroyEvent.isCancelled()) {
                     this.setDamage(40F); // Maximize damage so this doesn't get triggered again right away
@@ -249,7 +249,7 @@ public class Boat extends Entity {
                 // CraftBukkit start
                 if (!this.isPassengerOfSameVehicle(entity)) {
                     VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), entity.getBukkitEntity());
-                    this.level.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
                         return;
@@ -262,7 +262,7 @@ public class Boat extends Entity {
             // CraftBukkit start
             if (!this.isPassengerOfSameVehicle(entity)) {
                 VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), entity.getBukkitEntity());
-                this.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
                     return;
@@ -354,7 +354,7 @@ public class Boat extends Entity {
             this.floatBoat();
             if (this.level.isClientSide) {
                 this.controlBoat();
-                this.level.sendPacketToServer(new ServerboundPaddleBoatPacket(this.getPaddleState(0), this.getPaddleState(1)));
+                Level.sendPacketToServer(new ServerboundPaddleBoatPacket(this.getPaddleState(0), this.getPaddleState(1)));
             }
 
             this.move(MoverType.SELF, this.getDeltaMovement());
@@ -363,7 +363,7 @@ public class Boat extends Entity {
         }
 
         // CraftBukkit start
-        org.bukkit.Server server = this.level.getCraftServer();
+        org.bukkit.Server server = Level.getCraftServer();
         org.bukkit.World bworld = this.level.getWorld();
 
         Location to = new Location(bworld, this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
@@ -888,7 +888,7 @@ public class Boat extends Entity {
                     // CraftBukkit start
                     Vehicle vehicle = (Vehicle) this.getBukkitEntity();
                     VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, null);
-                    this.level.getCraftServer().getPluginManager().callEvent(destroyEvent);
+                    Level.getCraftServer().getPluginManager().callEvent(destroyEvent);
                     if (!destroyEvent.isCancelled()) {
                         this.kill();
                         if (this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 2993ccb40240f338fa1715656f87c12d5c043c37..c5a428006608d87abc469509c091f64b19e91e40 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -30,6 +30,7 @@ import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import org.slf4j.Logger;
@@ -423,7 +424,7 @@ public abstract class AbstractContainerMenu {
             } else if (this.quickcraftStatus == 1) {
                 slot = slotIndex < this.slots.size() ? this.slots.get(slotIndex) : null; // Paper - Ensure drag in bounds
                 itemstack = this.getCarried();
-                if (AbstractContainerMenu.canItemQuickReplace(slot, itemstack, true) && slot.mayPlace(itemstack) && (this.quickcraftType == 2 || itemstack.getCount() > this.quickcraftSlots.size()) && this.canDragTo(slot)) {
+                if (AbstractContainerMenu.canItemQuickReplace(slot, itemstack, true) && slot.mayPlace(itemstack) && (this.quickcraftType == 2 || itemstack.getCount() > this.quickcraftSlots.size()) && AbstractContainerMenu.canDragTo(slot)) {
                     this.quickcraftSlots.add(slot);
                 }
             } else if (this.quickcraftStatus == 2) {
@@ -444,7 +445,7 @@ public abstract class AbstractContainerMenu {
                         Slot slot1 = (Slot) iterator.next();
                         ItemStack itemstack2 = this.getCarried();
 
-                        if (slot1 != null && AbstractContainerMenu.canItemQuickReplace(slot1, itemstack2, true) && slot1.mayPlace(itemstack2) && (this.quickcraftType == 2 || itemstack2.getCount() >= this.quickcraftSlots.size()) && this.canDragTo(slot1)) {
+                        if (slot1 != null && AbstractContainerMenu.canItemQuickReplace(slot1, itemstack2, true) && slot1.mayPlace(itemstack2) && (this.quickcraftType == 2 || itemstack2.getCount() >= this.quickcraftSlots.size()) && AbstractContainerMenu.canDragTo(slot1)) {
                             ItemStack itemstack3 = itemstack1.copy();
                             int j1 = slot1.hasItem() ? slot1.getItem().getCount() : 0;
 
@@ -475,7 +476,7 @@ public abstract class AbstractContainerMenu {
                     this.setCarried(CraftItemStack.asNMSCopy(newcursor));
 
                     InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.quickcraftType == 1, eventmap);
-                    player.level.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     // Whether or not a change was made to the inventory that requires an update.
                     boolean needsUpdate = event.getResult() != Result.DEFAULT;
@@ -711,7 +712,7 @@ public abstract class AbstractContainerMenu {
 
     }
 
-    protected void clearContainer(Player player, Container inventory) {
+    protected static void clearContainer(Player player, Container inventory) {
         int i;
 
         if (player.isAlive() && (!(player instanceof ServerPlayer) || !((ServerPlayer) player).hasDisconnected())) {
@@ -921,7 +922,7 @@ public abstract class AbstractContainerMenu {
         stack.grow(stackSize);
     }
 
-    public boolean canDragTo(Slot slot) {
+    public static boolean canDragTo(Slot slot) {
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
index 4adfc26062b322443828e94e6b0943884a18846b..0e42a397a9c97f6bffd7c49847a64cba1e0c3f08 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
@@ -147,7 +147,7 @@ public abstract class AbstractFurnaceMenu extends RecipeBookMenu<Container> {
                     if (!this.moveItemStackTo(itemstack1, 0, 1, false)) {
                         return ItemStack.EMPTY;
                     }
-                } else if (this.isFuel(itemstack1)) {
+                } else if (AbstractFurnaceMenu.isFuel(itemstack1)) {
                     if (!this.moveItemStackTo(itemstack1, 1, 2, false)) {
                         return ItemStack.EMPTY;
                     }
@@ -182,7 +182,7 @@ public abstract class AbstractFurnaceMenu extends RecipeBookMenu<Container> {
         return this.level.getRecipeManager().getRecipeFor((RecipeType<AbstractCookingRecipe>) this.recipeType, new SimpleContainer(new ItemStack[]{itemStack}), this.level).isPresent(); // Eclipse fail
     }
 
-    protected boolean isFuel(ItemStack itemStack) {
+    protected static boolean isFuel(ItemStack itemStack) {
         return AbstractFurnaceBlockEntity.isFuel(itemStack);
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
index 4f5593d387545545e30475d3edaa92a4306ba96b..fc26ac116ca0f2ad2344e7701f5bea175a04b768 100644
--- a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
@@ -253,7 +253,7 @@ public class CartographyTableMenu extends AbstractContainerMenu {
         super.removed(player);
         this.resultContainer.removeItemNoUpdate(2);
         this.access.execute((world, blockposition) -> {
-            this.clearContainer(player, this.container);
+            AbstractContainerMenu.clearContainer(player, this.container);
         });
     }
 }
diff --git a/src/main/java/net/minecraft/world/inventory/CraftingMenu.java b/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
index 8e22678d6b6eca79450bb74445edcb8344a0a009..bcdd39a7d4a54cccdae78f5f912c7d1178d73e69 100644
--- a/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
@@ -119,7 +119,7 @@ public class CraftingMenu extends RecipeBookMenu<CraftingContainer> {
     public void removed(Player player) {
         super.removed(player);
         this.access.execute((world, blockposition) -> {
-            this.clearContainer(player, this.craftSlots);
+            AbstractContainerMenu.clearContainer(player, this.craftSlots);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index 727031d49946df536a6ee3094929294d077139fe..723e1e76d3b961ed5128c813c29bbb2f1e7179f0 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -19,6 +19,7 @@ import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.item.EnchantedBookItem;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.EnchantmentTableBlock;
 // CraftBukkit start
@@ -177,7 +178,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
 
                     PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(this.player, this.getBukkitView(), this.access.getLocation().getBlock(), item, offers, i);
                     event.setCancelled(!itemstack.isEnchantable());
-                    world.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
                         for (j = 0; j < 3; ++j) {
@@ -241,7 +242,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                         CraftItemStack item = CraftItemStack.asCraftMirror(itemstack2);
 
                         EnchantItemEvent event = new EnchantItemEvent((Player) player.getBukkitEntity(), this.getBukkitView(), this.access.getLocation().getBlock(), item, this.costs[id], enchants, id);
-                        world.getCraftServer().getPluginManager().callEvent(event);
+                        Level.getCraftServer().getPluginManager().callEvent(event);
 
                         int level = event.getExpLevelCost();
                         if (event.isCancelled() || (level > player.experienceLevel && !player.getAbilities().instabuild) || event.getEnchantsToAdd().isEmpty()) {
@@ -338,7 +339,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
     public void removed(net.minecraft.world.entity.player.Player player) {
         super.removed(player);
         this.access.execute((world, blockposition) -> {
-            this.clearContainer(player, this.enchantSlots);
+            AbstractContainerMenu.clearContainer(player, this.enchantSlots);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
index 122d5f92b6bd37e96d88ddd8c41de557ae460cd9..f27cf7f1d135bf40ccedc4e49c8595842901be1c 100644
--- a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -120,7 +120,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
                 }
             }
 
-            private int getExperienceFromItem(ItemStack stack) {
+            private static int getExperienceFromItem(ItemStack stack) {
                 int j = 0;
                 Map<Enchantment, Integer> map = EnchantmentHelper.getEnchantments(stack);
                 Iterator iterator = map.entrySet().iterator();
@@ -196,7 +196,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
                 int l = j + k + item.getMaxDamage() * 5 / 100;
 
                 i = Math.max(item.getMaxDamage() - l, 0);
-                itemstack2 = this.mergeEnchants(itemstack, itemstack1);
+                itemstack2 = GrindstoneMenu.mergeEnchants(itemstack, itemstack1);
                 if (!itemstack2.isDamageableItem()) {
                     if (!ItemStack.matches(itemstack, itemstack1) || itemstack2.getMaxStackSize() == 1) { // Paper - add max stack size check
                         this.resultSlots.setItem(0, ItemStack.EMPTY);
@@ -213,7 +213,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
                 itemstack2 = flag3 ? itemstack : itemstack1;
             }
 
-            this.resultSlots.setItem(0, this.removeNonCurses(itemstack2, i, b0));
+            this.resultSlots.setItem(0, GrindstoneMenu.removeNonCurses(itemstack2, i, b0));
         } else {
             this.resultSlots.setItem(0, ItemStack.EMPTY);
         }
@@ -221,7 +221,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
         this.broadcastChanges();
     }
 
-    private ItemStack mergeEnchants(ItemStack target, ItemStack source) {
+    private static ItemStack mergeEnchants(ItemStack target, ItemStack source) {
         ItemStack itemstack2 = target.copy();
         Map<Enchantment, Integer> map = EnchantmentHelper.getEnchantments(source);
         Iterator iterator = map.entrySet().iterator();
@@ -238,7 +238,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
         return itemstack2;
     }
 
-    private ItemStack removeNonCurses(ItemStack item, int damage, int amount) {
+    private static ItemStack removeNonCurses(ItemStack item, int damage, int amount) {
         ItemStack itemstack1 = item.copy();
 
         itemstack1.removeTagKey("Enchantments");
@@ -274,7 +274,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
     public void removed(net.minecraft.world.entity.player.Player player) {
         super.removed(player);
         this.access.execute((world, blockposition) -> {
-            this.clearContainer(player, this.repairSlots);
+            AbstractContainerMenu.clearContainer(player, this.repairSlots);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java b/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java
index 41f46ec03a11f180ac4e18571f9e7baf6147a99f..53525ef32253d48cabc60c6f713e8984e98cda77 100644
--- a/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java
@@ -72,7 +72,7 @@ public class HorseInventoryMenu extends AbstractContainerMenu {
         int j;
         int k;
 
-        if (this.hasChest(entity)) {
+        if (HorseInventoryMenu.hasChest(entity)) {
             for (j = 0; j < 3; ++j) {
                 for (k = 0; k < ((AbstractChestedHorse) entity).getInventoryColumns(); ++k) {
                     this.addSlot(new Slot(inventory, 2 + k + j * ((AbstractChestedHorse) entity).getInventoryColumns(), 80 + k * 18, 18 + j * 18));
@@ -97,7 +97,7 @@ public class HorseInventoryMenu extends AbstractContainerMenu {
         return !this.horse.hasInventoryChanged(this.horseContainer) && this.horseContainer.stillValid(player) && this.horse.isAlive() && this.horse.distanceTo(player) < 8.0F;
     }
 
-    private boolean hasChest(AbstractHorse horse) {
+    private static boolean hasChest(AbstractHorse horse) {
         return horse instanceof AbstractChestedHorse && ((AbstractChestedHorse) horse).hasChest();
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/InventoryMenu.java b/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
index 12643d60f4bfa8e07901aa0a556a1a245b0a7fb4..2ffc00081865d4c686e033c0446e8577b3a2fd81 100644
--- a/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
@@ -154,7 +154,7 @@ public class InventoryMenu extends RecipeBookMenu<CraftingContainer> {
         super.removed(player);
         this.resultSlots.clearContent();
         if (!player.level.isClientSide) {
-            this.clearContainer(player, this.craftSlots);
+            AbstractContainerMenu.clearContainer(player, this.craftSlots);
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java b/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
index 74a67c6b0a29bd0800475a5205897fdffa61171d..3d288434488d8366aaa2e1664f4f59994eb245f2 100644
--- a/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
@@ -87,7 +87,7 @@ public abstract class ItemCombinerMenu extends AbstractContainerMenu {
     public void removed(Player player) {
         super.removed(player);
         this.access.execute((world, blockposition) -> {
-            this.clearContainer(player, this.inputSlots);
+            AbstractContainerMenu.clearContainer(player, this.inputSlots);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/LoomMenu.java b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
index 178de5f2a11b4fe0b4f37f4fec26282cb17b4db5..3b5144846a9422fd03343fb54446e16fb1b78d26 100644
--- a/src/main/java/net/minecraft/world/inventory/LoomMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
@@ -208,7 +208,7 @@ public class LoomMenu extends AbstractContainerMenu {
         }
     }
 
-    private List<Holder<BannerPattern>> getSelectablePatterns(ItemStack stack) {
+    private static List<Holder<BannerPattern>> getSelectablePatterns(ItemStack stack) {
         if (stack.isEmpty()) {
             return (List) Registry.BANNER_PATTERN.getTag(BannerPatternTags.NO_ITEM_REQUIRED).map(ImmutableList::copyOf).orElse(ImmutableList.of());
         } else {
@@ -239,7 +239,7 @@ public class LoomMenu extends AbstractContainerMenu {
             boolean flag = this.isValidPatternIndex(i);
             List<Holder<BannerPattern>> list = this.selectablePatterns;
 
-            this.selectablePatterns = this.getSelectablePatterns(itemstack2);
+            this.selectablePatterns = LoomMenu.getSelectablePatterns(itemstack2);
             Holder holder;
 
             if (this.selectablePatterns.size() == 1) {
@@ -355,7 +355,7 @@ public class LoomMenu extends AbstractContainerMenu {
     public void removed(net.minecraft.world.entity.player.Player player) {
         super.removed(player);
         this.access.execute((world, blockposition) -> {
-            this.clearContainer(player, this.inputContainer);
+            AbstractContainerMenu.clearContainer(player, this.inputContainer);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/MerchantContainer.java b/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
index 083e50e27685f441ede4c75e913d671fe45d1d15..fda8ec0b785b5f7dfad0ee0b0bf09e265d6b8a1d 100644
--- a/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
@@ -110,7 +110,7 @@ public class MerchantContainer implements Container {
         } else {
             ItemStack itemstack1 = ContainerHelper.removeItem(this.itemStacks, slot, amount);
 
-            if (!itemstack1.isEmpty() && this.isPaymentSlot(slot)) {
+            if (!itemstack1.isEmpty() && MerchantContainer.isPaymentSlot(slot)) {
                 this.updateSellItem();
             }
 
@@ -118,7 +118,7 @@ public class MerchantContainer implements Container {
         }
     }
 
-    private boolean isPaymentSlot(int slot) {
+    private static boolean isPaymentSlot(int slot) {
         return slot == 0 || slot == 1;
     }
 
@@ -134,7 +134,7 @@ public class MerchantContainer implements Container {
             stack.setCount(this.getMaxStackSize());
         }
 
-        if (this.isPaymentSlot(slot)) {
+        if (MerchantContainer.isPaymentSlot(slot)) {
             this.updateSellItem();
         }
 
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index d4f71422b25f70abfe50481d6071abea6ad147c0..33a1400ae6022270996592551bed16f5022f23d9 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -292,7 +292,7 @@ public class StonecutterMenu extends AbstractContainerMenu {
         super.removed(player);
         this.resultContainer.removeItemNoUpdate(1);
         this.access.execute((world, blockposition) -> {
-            this.clearContainer(player, this.container);
+            AbstractContainerMenu.clearContainer(player, this.container);
         });
     }
 }
diff --git a/src/main/java/net/minecraft/world/item/ArmorItem.java b/src/main/java/net/minecraft/world/item/ArmorItem.java
index baa7e055d8ee4a153842128b07984b9f6deac6ca..cfb9002d5f9185282f9c2c9c5833fe99938bacb4 100644
--- a/src/main/java/net/minecraft/world/item/ArmorItem.java
+++ b/src/main/java/net/minecraft/world/item/ArmorItem.java
@@ -64,7 +64,7 @@ public class ArmorItem extends Item implements Wearable {
 
             BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) entityliving.getBukkitEntity());
             if (!DispenserBlock.eventFired) {
-                world.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
             }
 
             if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/item/ArmorStandItem.java b/src/main/java/net/minecraft/world/item/ArmorStandItem.java
index af81ba310dbd7fdbdccdd0cc74b7c085ad54027f..2f30a6a8a2a407f9e7c1744e7987433b10431f74 100644
--- a/src/main/java/net/minecraft/world/item/ArmorStandItem.java
+++ b/src/main/java/net/minecraft/world/item/ArmorStandItem.java
@@ -54,7 +54,7 @@ public class ArmorStandItem extends Item {
                     float f = (float) Mth.floor((Mth.wrapDegrees(context.getRotation() - 180.0F) + 22.5F) / 45.0F) * 45.0F;
 
                     entityarmorstand.moveTo(entityarmorstand.getX(), entityarmorstand.getY(), entityarmorstand.getZ(), f, 0.0F);
-                    this.randomizePose(entityarmorstand, world.random);
+                    ArmorStandItem.randomizePose(entityarmorstand, world.random);
                     // CraftBukkit start
                     if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityPlaceEvent(context, entityarmorstand).isCancelled()) {
                         return InteractionResult.FAIL;
@@ -73,7 +73,7 @@ public class ArmorStandItem extends Item {
         }
     }
 
-    private void randomizePose(ArmorStand stand, RandomSource random) {
+    private static void randomizePose(ArmorStand stand, RandomSource random) {
         Rotations vector3f = stand.getHeadPose();
         float f = random.nextFloat() * 5.0F;
         float f1 = random.nextFloat() * 20.0F - 10.0F;
diff --git a/src/main/java/net/minecraft/world/item/AxeItem.java b/src/main/java/net/minecraft/world/item/AxeItem.java
index 9c49d8f696864d2aad23208422c4ab5b598a0cd9..124e48a429dfed8226f03f1ae15e4a3e40cc0020 100644
--- a/src/main/java/net/minecraft/world/item/AxeItem.java
+++ b/src/main/java/net/minecraft/world/item/AxeItem.java
@@ -33,7 +33,7 @@ public class AxeItem extends DiggerItem {
         BlockPos blockPos = context.getClickedPos();
         Player player = context.getPlayer();
         BlockState blockState = level.getBlockState(blockPos);
-        Optional<BlockState> optional = this.getStripped(blockState);
+        Optional<BlockState> optional = AxeItem.getStripped(blockState);
         Optional<BlockState> optional2 = WeatheringCopper.getPrevious(blockState);
         Optional<BlockState> optional3 = Optional.ofNullable(HoneycombItem.WAX_OFF_BY_BLOCK.get().get(blockState.getBlock())).map((block) -> {
             return block.withPropertiesOf(blockState);
@@ -77,7 +77,7 @@ public class AxeItem extends DiggerItem {
         }
     }
 
-    private Optional<BlockState> getStripped(BlockState state) {
+    private static Optional<BlockState> getStripped(BlockState state) {
         return Optional.ofNullable(STRIPPABLES.get(state.getBlock())).map((block) -> {
             return block.defaultBlockState().setValue(RotatedPillarBlock.AXIS, state.getValue(RotatedPillarBlock.AXIS));
         });
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index 159335b0994839626703a953af847948620b6124..0da6f914de4d7d2593b4bb94c7458d5745746547 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -93,7 +93,7 @@ public class BlockItem extends Item {
                     BlockState iblockdata1 = world.getBlockState(blockposition);
 
                     if (iblockdata1.is(iblockdata.getBlock())) {
-                        iblockdata1 = this.updateBlockStateFromTag(blockposition, world, itemstack, iblockdata1);
+                        iblockdata1 = BlockItem.updateBlockStateFromTag(blockposition, world, itemstack, iblockdata1);
                         // Paper start - reset block on exception
                         try {
                         this.updateCustomBlockEntityTag(blockposition, world, entityhuman, itemstack, iblockdata1);
@@ -161,7 +161,7 @@ public class BlockItem extends Item {
         return iblockdata != null && this.canPlace(context, iblockdata) ? iblockdata : null;
     }
 
-    private BlockState updateBlockStateFromTag(BlockPos pos, Level world, ItemStack stack, BlockState state) {
+    private static BlockState updateBlockStateFromTag(BlockPos pos, Level world, ItemStack stack, BlockState state) {
         BlockState iblockdata1 = state;
         CompoundTag nbttagcompound = stack.getTag();
 
@@ -214,7 +214,7 @@ public class BlockItem extends Item {
         org.bukkit.entity.Player player = (context.getPlayer() instanceof ServerPlayer) ? (org.bukkit.entity.Player) context.getPlayer().getBukkitEntity() : null;
 
         BlockCanBuildEvent event = new BlockCanBuildEvent(CraftBlock.at(context.getLevel(), context.getClickedPos()), player, CraftBlockData.fromData(state), defaultReturn);
-        context.getLevel().getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
 
         return event.isBuildable();
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/item/CrossbowItem.java b/src/main/java/net/minecraft/world/item/CrossbowItem.java
index 3b8629d31dc7bc66debe9c56593fbd071a6ddd11..b032815773d0f873a920ca73167b00e13eff90b8 100644
--- a/src/main/java/net/minecraft/world/item/CrossbowItem.java
+++ b/src/main/java/net/minecraft/world/item/CrossbowItem.java
@@ -349,7 +349,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
     public void onUseTick(Level world, LivingEntity user, ItemStack stack, int remainingUseTicks) {
         if (!world.isClientSide) {
             int j = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.QUICK_CHARGE, stack);
-            SoundEvent soundeffect = this.getStartSound(j);
+            SoundEvent soundeffect = CrossbowItem.getStartSound(j);
             SoundEvent soundeffect1 = j == 0 ? SoundEvents.CROSSBOW_LOADING_MIDDLE : null;
             float f = (float) (stack.getUseDuration() - remainingUseTicks) / (float) CrossbowItem.getChargeDuration(stack);
 
@@ -387,7 +387,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
         return UseAnim.CROSSBOW;
     }
 
-    private SoundEvent getStartSound(int stage) {
+    private static SoundEvent getStartSound(int stage) {
         switch (stage) {
             case 1:
                 return SoundEvents.CROSSBOW_QUICK_CHARGE_1;
diff --git a/src/main/java/net/minecraft/world/item/DyeItem.java b/src/main/java/net/minecraft/world/item/DyeItem.java
index 6a492ac3e67c743210d632aaddb5d5e67948468d..a400e95ea48197a1deae6b7557d0e744f1c5678b 100644
--- a/src/main/java/net/minecraft/world/item/DyeItem.java
+++ b/src/main/java/net/minecraft/world/item/DyeItem.java
@@ -10,6 +10,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.animal.Sheep;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.Level;
 import org.bukkit.event.entity.SheepDyeWoolEvent; // CraftBukkit
 
 public class DyeItem extends Item {
@@ -34,7 +35,7 @@ public class DyeItem extends Item {
                     // CraftBukkit start
                     byte bColor = (byte) this.dyeColor.getId();
                     SheepDyeWoolEvent event = new SheepDyeWoolEvent((org.bukkit.entity.Sheep) entitysheep.getBukkitEntity(), org.bukkit.DyeColor.getByWoolData(bColor), (org.bukkit.entity.Player) user.getBukkitEntity());
-                    entitysheep.level.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
                         return InteractionResult.PASS;
diff --git a/src/main/java/net/minecraft/world/item/EnderEyeItem.java b/src/main/java/net/minecraft/world/item/EnderEyeItem.java
index 5290a46b51ebac598a360b4c22ff7dbffad416e6..48ff38c1b44e36f7aa6007027465cfcbface6691 100644
--- a/src/main/java/net/minecraft/world/item/EnderEyeItem.java
+++ b/src/main/java/net/minecraft/world/item/EnderEyeItem.java
@@ -62,7 +62,7 @@ public class EnderEyeItem extends Item {
 
                     // CraftBukkit start - Use relative location for far away sounds
                     // world.b(1038, blockposition1.c(1, 0, 1), 0);
-                    int viewDistance = world.getCraftServer().getViewDistance() * 16;
+                    int viewDistance = Level.getCraftServer().getViewDistance() * 16;
                     BlockPos soundPos = blockposition1.offset(1, 0, 1);
                     for (ServerPlayer player : world.getServer().getPlayerList().players) {
                         double deltaX = soundPos.getX() - player.getX();
diff --git a/src/main/java/net/minecraft/world/item/FireChargeItem.java b/src/main/java/net/minecraft/world/item/FireChargeItem.java
index 1da98a9507d79850265d4d9946497ef6689ad13c..1fa4afdb7cd569979fc29f576b9bb879ab29a05a 100644
--- a/src/main/java/net/minecraft/world/item/FireChargeItem.java
+++ b/src/main/java/net/minecraft/world/item/FireChargeItem.java
@@ -41,7 +41,7 @@ public class FireChargeItem extends Item {
                     return InteractionResult.PASS;
                 }
                 // CraftBukkit end
-                this.playSound(world, blockposition);
+                FireChargeItem.playSound(world, blockposition);
                 world.setBlockAndUpdate(blockposition, BaseFireBlock.getState(world, blockposition));
                 world.gameEvent((Entity) context.getPlayer(), GameEvent.BLOCK_PLACE, blockposition);
                 flag = true;
@@ -55,7 +55,7 @@ public class FireChargeItem extends Item {
                 return InteractionResult.PASS;
             }
             // CraftBukkit end
-            this.playSound(world, blockposition);
+            FireChargeItem.playSound(world, blockposition);
             world.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, Boolean.TRUE));
             world.gameEvent((Entity) context.getPlayer(), GameEvent.BLOCK_CHANGE, blockposition);
             flag = true;
@@ -69,7 +69,7 @@ public class FireChargeItem extends Item {
         }
     }
 
-    private void playSound(Level world, BlockPos pos) {
+    private static void playSound(Level world, BlockPos pos) {
         RandomSource randomsource = world.getRandom();
 
         world.playSound((Player) null, pos, SoundEvents.FIRECHARGE_USE, SoundSource.BLOCKS, 1.0F, (randomsource.nextFloat() - randomsource.nextFloat()) * 0.2F + 1.0F);
diff --git a/src/main/java/net/minecraft/world/item/FishingRodItem.java b/src/main/java/net/minecraft/world/item/FishingRodItem.java
index b9aca584c9765e995d1f8b9b2e45e5257fb6ab9d..ba7fdb7ac6c64200440f51c7a3f57e7e10b401a6 100644
--- a/src/main/java/net/minecraft/world/item/FishingRodItem.java
+++ b/src/main/java/net/minecraft/world/item/FishingRodItem.java
@@ -46,7 +46,7 @@ public class FishingRodItem extends Item implements Vanishable {
                 // CraftBukkit start
                 FishingHook entityfishinghook = new FishingHook(user, world, j, i);
                 PlayerFishEvent playerFishEvent = new PlayerFishEvent((org.bukkit.entity.Player) user.getBukkitEntity(), null, (org.bukkit.entity.FishHook) entityfishinghook.getBukkitEntity(), CraftEquipmentSlot.getHand(hand), PlayerFishEvent.State.FISHING);
-                world.getCraftServer().getPluginManager().callEvent(playerFishEvent);
+                Level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
 
                 if (playerFishEvent.isCancelled()) {
                     user.fishing = null;
diff --git a/src/main/java/net/minecraft/world/item/HangingEntityItem.java b/src/main/java/net/minecraft/world/item/HangingEntityItem.java
index 489558eb0126e7a41e2e379e352bddc034375b61..8b98480ed78b44d91f7c907061986da19b8af19d 100644
--- a/src/main/java/net/minecraft/world/item/HangingEntityItem.java
+++ b/src/main/java/net/minecraft/world/item/HangingEntityItem.java
@@ -76,7 +76,7 @@ public class HangingEntityItem extends Item {
                     org.bukkit.inventory.EquipmentSlot hand = org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(context.getHand());
 
                     HangingPlaceEvent event = new HangingPlaceEvent((org.bukkit.entity.Hanging) ((HangingEntity) object).getBukkitEntity(), who, blockClicked, blockFace, hand, org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack));
-                    world.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
                         return InteractionResult.FAIL;
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index cf94eda895cf520e94fd466e4c5844422dc7930e..734dd9ea010b316334f6145379da7e9d61a799d5 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -72,7 +72,7 @@ import org.slf4j.Logger;
 
 // CraftBukkit start
 import com.mojang.serialization.Dynamic;
-import java.util.List;
+
 import java.util.Map;
 import java.util.Objects;
 import net.minecraft.server.MinecraftServer;
@@ -81,7 +81,6 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
-import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.JukeboxBlock;
 import net.minecraft.world.level.block.SaplingBlock;
 import net.minecraft.world.level.block.SoundType;
@@ -153,7 +152,7 @@ public final class ItemStack {
 
     // Paper start
     private static final java.util.Comparator<? super CompoundTag> enchantSorter = java.util.Comparator.comparing(o -> o.getString("id"));
-    private void processEnchantOrder(@Nullable CompoundTag tag) {
+    private static void processEnchantOrder(@Nullable CompoundTag tag) {
         if (tag == null || !tag.contains("Enchantments", 9)) {
             return;
         }
@@ -196,7 +195,7 @@ public final class ItemStack {
         }
     }
 
-    private net.minecraft.nbt.StringTag convert(String json) {
+    private static net.minecraft.nbt.StringTag convert(String json) {
         Component component = Component.Serializer.fromJson(json);
         if (component.getContents() instanceof net.minecraft.network.chat.contents.LiteralContents literalContents && literalContents.text().contains("\u00A7") && component.getSiblings().isEmpty()) {
             // Only convert if the root component is a single comp with legacy in it, don't convert already normal components
@@ -257,7 +256,7 @@ public final class ItemStack {
             // CraftBukkit start - make defensive copy as this data may be coming from the save thread
             this.tag = nbttagcompound.getCompound("tag").copy();
             // CraftBukkit end
-            this.processEnchantOrder(this.tag); // Paper
+            ItemStack.processEnchantOrder(this.tag); // Paper
             this.processText(); // Paper
             this.getItem().verifyTagAfterLoad(this.tag);
         }
@@ -440,7 +439,7 @@ public final class ItemStack {
                     // Special case juke boxes as they update their tile entity. Copied from ItemRecord.
                     // PAIL: checkme on updates.
                     if (this.item instanceof RecordItem) {
-                        ((JukeboxBlock) Blocks.JUKEBOX).setRecord(entityhuman, world, blockposition, world.getBlockState(blockposition), this);
+                        JukeboxBlock.setRecord(entityhuman, world, blockposition, world.getBlockState(blockposition), this);
                         world.levelEvent((net.minecraft.world.entity.player.Player) null, 1010, blockposition, Item.getId(this.item));
                         this.shrink(1);
                         entityhuman.awardStat(Stats.PLAY_RECORD);
@@ -840,7 +839,7 @@ public final class ItemStack {
 
     public void setTag(@Nullable CompoundTag nbt) {
         this.tag = nbt;
-        this.processEnchantOrder(this.tag); // Paper
+        ItemStack.processEnchantOrder(this.tag); // Paper
         if (this.getItem().canBeDepleted()) {
             this.setDamageValue(this.getDamageValue());
         }
diff --git a/src/main/java/net/minecraft/world/item/LeadItem.java b/src/main/java/net/minecraft/world/item/LeadItem.java
index 423a28f0ce85bedbcc49fadb5afa38ee2a306d77..804463021abf6824472b92ede4d01a2fa4f1130e 100644
--- a/src/main/java/net/minecraft/world/item/LeadItem.java
+++ b/src/main/java/net/minecraft/world/item/LeadItem.java
@@ -65,7 +65,7 @@ public class LeadItem extends Item {
                     // CraftBukkit start - fire HangingPlaceEvent
                     org.bukkit.inventory.EquipmentSlot hand = CraftEquipmentSlot.getHand(enumhand);
                     HangingPlaceEvent event = new HangingPlaceEvent((org.bukkit.entity.Hanging) entityleash.getBukkitEntity(), entityhuman != null ? (org.bukkit.entity.Player) entityhuman.getBukkitEntity() : null, world.getWorld().getBlockAt(i, j, k), org.bukkit.block.BlockFace.SELF, hand);
-                    world.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
                         entityleash.discard();
diff --git a/src/main/java/net/minecraft/world/item/MapItem.java b/src/main/java/net/minecraft/world/item/MapItem.java
index 1922722080845c0c8d4ae3cf0843cd605127d387..ef1f7836cccc81218cdf7aac7b0e567344d74632 100644
--- a/src/main/java/net/minecraft/world/item/MapItem.java
+++ b/src/main/java/net/minecraft/world/item/MapItem.java
@@ -180,7 +180,7 @@ public class MapItem extends ComplexItem {
                                                         ++k3;
                                                     } while (l4 > world.getMinBuildHeight() && !iblockdata1.getFluidState().isEmpty());
 
-                                                    iblockdata = this.getCorrectStateForFluidBlock(world, iblockdata, blockposition_mutableblockposition);
+                                                    iblockdata = MapItem.getCorrectStateForFluidBlock(world, iblockdata, blockposition_mutableblockposition);
                                                 }
                                             } else {
                                                 iblockdata = Blocks.BEDROCK.defaultBlockState();
@@ -231,7 +231,7 @@ public class MapItem extends ComplexItem {
         }
     }
 
-    private BlockState getCorrectStateForFluidBlock(Level world, BlockState state, BlockPos pos) {
+    private static BlockState getCorrectStateForFluidBlock(Level world, BlockState state, BlockPos pos) {
         FluidState fluid = state.getFluidState();
 
         return !fluid.isEmpty() && !state.isFaceSturdy(world, pos, Direction.UP) ? fluid.createLegacyBlock() : state;
diff --git a/src/main/java/net/minecraft/world/item/MinecartItem.java b/src/main/java/net/minecraft/world/item/MinecartItem.java
index 127a799f7848b32664b77bf67847ca6b8ac9a90d..0e67ce08fa1831233d7566297707580f1debf318 100644
--- a/src/main/java/net/minecraft/world/item/MinecartItem.java
+++ b/src/main/java/net/minecraft/world/item/MinecartItem.java
@@ -68,7 +68,7 @@ public class MinecartItem extends Item {
 
             BlockDispenseEvent event = new BlockDispenseEvent(block2, craftItem.clone(), new org.bukkit.util.Vector(d0, d1 + d3, d2));
             if (!DispenserBlock.eventFired) {
-                worldserver.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
             }
 
             if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/item/RecordItem.java b/src/main/java/net/minecraft/world/item/RecordItem.java
index 80f889db8a23763c5566940ea284b42030b1d34e..d35ffea12880f8a0087aec3e311b11844317fc1b 100644
--- a/src/main/java/net/minecraft/world/item/RecordItem.java
+++ b/src/main/java/net/minecraft/world/item/RecordItem.java
@@ -44,7 +44,7 @@ public class RecordItem extends Item {
 
             if (!world.isClientSide) {
                 if (true) return InteractionResult.SUCCESS; // CraftBukkit - handled in ItemStack
-                ((JukeboxBlock) Blocks.JUKEBOX).setRecord(context.getPlayer(), world, blockposition, iblockdata, itemstack);
+                JukeboxBlock.setRecord(context.getPlayer(), world, blockposition, iblockdata, itemstack);
                 world.levelEvent((Player) null, 1010, blockposition, Item.getId(this));
                 itemstack.shrink(1);
                 Player entityhuman = context.getPlayer();
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
index 8a9a701baabdaf066cd9b28c05430f673fcafb4e..745b4a6e5d73b8db66d98f21afbdc6fc53a2f0c5 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
@@ -217,10 +217,10 @@ public class MerchantOffer {
     }
 
     public boolean satisfiedBy(ItemStack first, ItemStack second) {
-        return this.isRequiredItem(first, this.getCostA()) && first.getCount() >= this.getCostA().getCount() && this.isRequiredItem(second, this.costB) && second.getCount() >= this.costB.getCount();
+        return MerchantOffer.isRequiredItem(first, this.getCostA()) && first.getCount() >= this.getCostA().getCount() && MerchantOffer.isRequiredItem(second, this.costB) && second.getCount() >= this.costB.getCount();
     }
 
-    private boolean isRequiredItem(ItemStack given, ItemStack sample) {
+    private static boolean isRequiredItem(ItemStack given, ItemStack sample) {
         if (sample.isEmpty() && given.isEmpty()) {
             return true;
         } else {
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 2d82dc25b112c17eae14986b60e64dfbf1b1272a..595aed94ea41836ec333a2fa575dbe6ffb14c577 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -97,10 +97,10 @@ public class Explosion {
         this.fire = createFire;
         this.blockInteraction = destructionType;
         this.damageSource = damageSource == null ? DamageSource.explosion(this) : damageSource;
-        this.damageCalculator = behavior == null ? this.makeDamageCalculator(entity) : behavior;
+        this.damageCalculator = behavior == null ? Explosion.makeDamageCalculator(entity) : behavior;
     }
 
-    private ExplosionDamageCalculator makeDamageCalculator(@Nullable Entity entity) {
+    private static ExplosionDamageCalculator makeDamageCalculator(@Nullable Entity entity) {
         return (ExplosionDamageCalculator) (entity == null ? Explosion.EXPLOSION_DAMAGE_CALCULATOR : new EntityBasedExplosionDamageCalculator(entity));
     }
 
@@ -329,13 +329,13 @@ public class Explosion {
 
             if (explode != null) {
                 EntityExplodeEvent event = new EntityExplodeEvent(explode, location, blockList, this.blockInteraction == Explosion.BlockInteraction.DESTROY ? 1.0F / this.radius : 1.0F);
-                this.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
                 cancelled = event.isCancelled();
                 bukkitBlocks = event.blockList();
                 yield = event.getYield();
             } else {
                 BlockExplodeEvent event = new BlockExplodeEvent(location.getBlock(), blockList, this.blockInteraction == Explosion.BlockInteraction.DESTROY ? 1.0F / this.radius : 1.0F);
-                this.level.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
                 cancelled = event.isCancelled();
                 bukkitBlocks = event.blockList();
                 yield = event.getYield();
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 5073d6ef5aae095fd85307bbe8ae5941abcabec0..5f8f730fb73d1c39047073a1d976e3763e42667d 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -1,10 +1,7 @@
 package net.minecraft.world.level;
 
-import co.aikar.timings.Timing;
-import co.aikar.timings.Timings;
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerInternalException;
-import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
@@ -17,7 +14,6 @@ import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -32,6 +28,7 @@ import net.minecraft.server.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.players.PlayerList;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.Mth;
@@ -40,8 +37,6 @@ import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.boss.EnderDragonPart;
-import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
@@ -90,17 +85,14 @@ import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
 import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket;
 import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket;
 import org.bukkit.Bukkit;
-import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CapturedBlockState;
 import org.bukkit.craftbukkit.block.CraftBlockState;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftSpawnCategory;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.SpawnCategory;
 import org.bukkit.event.block.BlockPhysicsEvent;
-import org.bukkit.event.world.GenericGameEvent;
 // CraftBukkit end
 
 public abstract class Level implements LevelAccessor, AutoCloseable {
@@ -195,7 +187,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return this.world;
     }
 
-    public CraftServer getCraftServer() {
+    public static CraftServer getCraftServer() {
         return (CraftServer) Bukkit.getServer();
     }
 
@@ -280,7 +272,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         // CraftBukkit Ticks things
         for (SpawnCategory spawnCategory : SpawnCategory.values()) {
             if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
-                this.ticksPerSpawnCategory.put(spawnCategory, (long) this.getCraftServer().getTicksPerSpawns(spawnCategory));
+                this.ticksPerSpawnCategory.put(spawnCategory, (long) Level.getCraftServer().getTicksPerSpawns(spawnCategory));
             }
         }
 
@@ -321,27 +313,27 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.getWorldBorder().addListener(new BorderChangeListener() {
             @Override
             public void onBorderSizeSet(WorldBorder border, double size) {
-                Level.this.getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderSizePacket(border), border.world);
+                PlayerList.broadcastAll(new ClientboundSetBorderSizePacket(border), border.world);
             }
 
             @Override
             public void onBorderSizeLerping(WorldBorder border, double fromSize, double toSize, long time) {
-                Level.this.getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderLerpSizePacket(border), border.world);
+                PlayerList.broadcastAll(new ClientboundSetBorderLerpSizePacket(border), border.world);
             }
 
             @Override
             public void onBorderCenterSet(WorldBorder border, double centerX, double centerZ) {
-                Level.this.getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderCenterPacket(border), border.world);
+                PlayerList.broadcastAll(new ClientboundSetBorderCenterPacket(border), border.world);
             }
 
             @Override
             public void onBorderSetWarningTime(WorldBorder border, int warningTime) {
-                Level.this.getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderWarningDelayPacket(border), border.world);
+                PlayerList.broadcastAll(new ClientboundSetBorderWarningDelayPacket(border), border.world);
             }
 
             @Override
             public void onBorderSetWarningBlocks(WorldBorder border, int warningBlockDistance) {
-                Level.this.getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderWarningDistancePacket(border), border.world);
+                PlayerList.broadcastAll(new ClientboundSetBorderWarningDistancePacket(border), border.world);
             }
 
             @Override
@@ -649,7 +641,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
                 CraftWorld world = ((ServerLevel) this).getWorld();
                 if (world != null && ((ServerLevel)this).hasPhysicsEvent) { // Paper
                     BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftBlockData.fromData(iblockdata));
-                    this.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
                         return;
@@ -864,7 +856,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             TickingBlockEntity tickingblockentity = (TickingBlockEntity) this.blockEntityTickers.get(tileTickPosition);
             // Spigot start
             if (tickingblockentity == null) {
-                this.getCraftServer().getLogger().severe("Spigot has detected a null entity and has removed it, preventing a crash");
+                Level.getCraftServer().getLogger().severe("Spigot has detected a null entity and has removed it, preventing a crash");
                 tilesThisCycle--;
                 continue;
             }
@@ -915,7 +907,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
     // Paper end
 
-    public boolean shouldTickDeath(Entity entity) {
+    public static boolean shouldTickDeath(Entity entity) {
         return true;
     }
 
@@ -1331,7 +1323,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return this.worldBorder;
     }
 
-    public void sendPacketToServer(Packet<?> packet) {
+    public static void sendPacketToServer(Packet<?> packet) {
         throw new UnsupportedOperationException("Can't send packets to server unless you're on the client.");
     }
 
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index fc67dcff79a4f59d2f0193c519306c097549ca45..298c159504998fb7ecc4cc8ed42a212582329bd2 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -16,6 +16,7 @@ import net.minecraft.core.Holder;
 import net.minecraft.core.QuartPos;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BiomeTags;
 import net.minecraft.tags.BlockTags;
@@ -168,7 +169,7 @@ public final class NaturalSpawner {
                         if (!(backingSet[k] instanceof final net.minecraft.server.level.@NotNull ServerPlayer player)) {
                             continue;
                         }
-                        minDiff = Math.min(limit - world.getChunkSource().chunkMap.getMobCountNear(player, enumcreaturetype), minDiff);
+                        minDiff = Math.min(limit - ChunkMap.getMobCountNear(player, enumcreaturetype), minDiff);
                     }
                 }
                 difference = (minDiff == Integer.MAX_VALUE) ? 0 : minDiff;
diff --git a/src/main/java/net/minecraft/world/level/StructureManager.java b/src/main/java/net/minecraft/world/level/StructureManager.java
index 14322d6c253d7ca6a19c70e4d9fcdf0325537906..210fb3726b2af999592e36816544fb59f24958c7 100644
--- a/src/main/java/net/minecraft/world/level/StructureManager.java
+++ b/src/main/java/net/minecraft/world/level/StructureManager.java
@@ -71,7 +71,7 @@ public class StructureManager {
     public void fillStartsForStructure(Structure structure, LongSet structureStartPositions, Consumer<StructureStart> consumer) {
         for(long l : structureStartPositions) {
             SectionPos sectionPos = SectionPos.of(new ChunkPos(l), this.level.getMinSection());
-            StructureStart structureStart = this.getStartForStructure(sectionPos, structure, this.level.getChunk(sectionPos.x(), sectionPos.z(), ChunkStatus.STRUCTURE_STARTS));
+            StructureStart structureStart = StructureManager.getStartForStructure(sectionPos, structure, this.level.getChunk(sectionPos.x(), sectionPos.z(), ChunkStatus.STRUCTURE_STARTS));
             if (structureStart != null && structureStart.isValid()) {
                 consumer.accept(structureStart);
             }
@@ -80,15 +80,15 @@ public class StructureManager {
     }
 
     @Nullable
-    public StructureStart getStartForStructure(SectionPos pos, Structure structure, StructureAccess holder) {
+    public static StructureStart getStartForStructure(SectionPos pos, Structure structure, StructureAccess holder) {
         return holder.getStartForStructure(structure);
     }
 
-    public void setStartForStructure(SectionPos pos, Structure structure, StructureStart structureStart, StructureAccess holder) {
+    public static void setStartForStructure(SectionPos pos, Structure structure, StructureStart structureStart, StructureAccess holder) {
         holder.setStartForStructure(structure, structureStart);
     }
 
-    public void addReferenceForStructure(SectionPos pos, Structure structure, long reference, StructureAccess holder) {
+    public static void addReferenceForStructure(SectionPos pos, Structure structure, long reference, StructureAccess holder) {
         holder.addReferenceForStructure(structure, reference);
     }
 
@@ -124,7 +124,7 @@ public class StructureManager {
                 return Boolean.valueOf(holder.is(structureTag));
             }).orElse(Boolean.FALSE).booleanValue();
         }, levelAccessor)) { // Paper
-            if (this.structureHasPieceAt(pos, structureStart)) {
+            if (StructureManager.structureHasPieceAt(pos, structureStart)) {
                 return structureStart;
             }
         }
@@ -134,7 +134,7 @@ public class StructureManager {
 
     public StructureStart getStructureWithPieceAt(BlockPos pos, Structure structure) {
         for(StructureStart structureStart : this.startsForStructure(SectionPos.of(pos), structure)) {
-            if (this.structureHasPieceAt(pos, structureStart)) {
+            if (StructureManager.structureHasPieceAt(pos, structureStart)) {
                 return structureStart;
             }
         }
@@ -142,7 +142,7 @@ public class StructureManager {
         return StructureStart.INVALID_START;
     }
 
-    public boolean structureHasPieceAt(BlockPos pos, StructureStart structureStart) {
+    public static boolean structureHasPieceAt(BlockPos pos, StructureStart structureStart) {
         for(StructurePiece structurePiece : structureStart.getPieces()) {
             if (structurePiece.getBoundingBox().isInside(pos)) {
                 return true;
diff --git a/src/main/java/net/minecraft/world/level/block/BambooBlock.java b/src/main/java/net/minecraft/world/level/block/BambooBlock.java
index 2161276fde2a21bb5ee204e5e5ea2ef215f4873a..892cc81d296a7e4f32360ebc1747f517f1e7b12a 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooBlock.java
@@ -128,7 +128,7 @@ public class BambooBlock extends Block implements BonemealableBlock {
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (((Integer) state.getValue(BambooBlock.STAGE)).intValue() == 0) {
             if (random.nextInt(Math.max(1, (int) (100.0F / world.spigotConfig.bambooModifier) * 3)) == 0 && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot
-                int i = this.getHeightBelowUpToMax(world, pos) + 1;
+                int i = BambooBlock.getHeightBelowUpToMax(world, pos) + 1;
 
                 if (i < world.paperConfig().maxGrowthHeight.bamboo.max) { // Paper
                     this.growBamboo(state, world, pos, random, i);
@@ -158,8 +158,8 @@ public class BambooBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean isValidBonemealTarget(BlockGetter world, BlockPos pos, BlockState state, boolean isClient) {
-        int i = this.getHeightAboveUpToMax(world, pos);
-        int j = this.getHeightBelowUpToMax(world, pos);
+        int i = BambooBlock.getHeightAboveUpToMax(world, pos);
+        int j = BambooBlock.getHeightBelowUpToMax(world, pos);
 
         return i + j + 1 < ((Level) world).paperConfig().maxGrowthHeight.bamboo.max && ((Integer) world.getBlockState(pos.above(i)).getValue(BambooBlock.STAGE)).intValue() != 1; // Paper
     }
@@ -171,8 +171,8 @@ public class BambooBlock extends Block implements BonemealableBlock {
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        int i = this.getHeightAboveUpToMax(world, pos);
-        int j = this.getHeightBelowUpToMax(world, pos);
+        int i = BambooBlock.getHeightAboveUpToMax(world, pos);
+        int j = BambooBlock.getHeightBelowUpToMax(world, pos);
         int k = i + j + 1;
         int l = 1 + random.nextInt(2);
 
@@ -233,7 +233,7 @@ public class BambooBlock extends Block implements BonemealableBlock {
         // CraftBukkit end
     }
 
-    protected int getHeightAboveUpToMax(BlockGetter world, BlockPos pos) {
+    protected static int getHeightAboveUpToMax(BlockGetter world, BlockPos pos) {
         int i;
 
         for (i = 0; i < ((Level) world).paperConfig().maxGrowthHeight.bamboo.max && world.getBlockState(pos.above(i + 1)).is(Blocks.BAMBOO); ++i) { // Paper
@@ -243,7 +243,7 @@ public class BambooBlock extends Block implements BonemealableBlock {
         return i;
     }
 
-    protected int getHeightBelowUpToMax(BlockGetter world, BlockPos pos) {
+    protected static int getHeightBelowUpToMax(BlockGetter world, BlockPos pos) {
         int i;
 
         for (i = 0; i < ((Level) world).paperConfig().maxGrowthHeight.bamboo.max && world.getBlockState(pos.below(i + 1)).is(Blocks.BAMBOO); ++i) { // Paper
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index 51213360709773960553317e771f970ee7af14bb..4b3e50ffd7d5f5c40c8a318a5465d6cbec7345da 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -39,7 +39,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (random.nextInt(3) == 0 && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) {
-            this.growBamboo(world, pos);
+            BambooSaplingBlock.growBamboo(world, pos);
         }
 
     }
@@ -79,7 +79,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        this.growBamboo(world, pos);
+        BambooSaplingBlock.growBamboo(world, pos);
     }
 
     @Override
@@ -87,7 +87,7 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
         return player.getMainHandItem().getItem() instanceof SwordItem ? 1.0F : super.getDestroyProgress(state, player, world, pos);
     }
 
-    protected void growBamboo(Level world, BlockPos pos) {
+    protected static void growBamboo(Level world, BlockPos pos) {
         org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, pos, pos.above(), (BlockState) Blocks.BAMBOO.defaultBlockState().setValue(BambooBlock.LEAVES, BambooLeaves.SMALL), 3); // CraftBukkit - BlockSpreadEvent
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java b/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java
index 76cf691d235f286a1fe0235092f320490210026e..f09e37aa7379d20653b3dab02b52336e9d5e7ab9 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java
@@ -129,7 +129,7 @@ public abstract class BaseFireBlock extends Block {
             if (entity.getRemainingFireTicks() == 0) {
                 // CraftBukkit start
                 org.bukkit.event.entity.EntityCombustEvent event = new org.bukkit.event.entity.EntityCombustByBlockEvent(org.bukkit.craftbukkit.block.CraftBlock.at(world, pos), entity.getBukkitEntity(), 8);
-                world.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (!event.isCancelled()) {
                     entity.setSecondsOnFire(event.getDuration(), false);
@@ -215,7 +215,7 @@ public abstract class BaseFireBlock extends Block {
     }
 
     // CraftBukkit start
-    protected void fireExtinguished(net.minecraft.world.level.LevelAccessor world, BlockPos position) {
+    protected static void fireExtinguished(net.minecraft.world.level.LevelAccessor world, BlockPos position) {
         if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, position, Blocks.AIR.defaultBlockState()).isCancelled()) {
             world.removeBlock(position, false);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
index f9aaec28be3e7a191981d30b361e369d7fea2c9e..9fe51eeaa98db89b462bb10368c5a2ab7b213ae6 100644
--- a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
@@ -85,7 +85,7 @@ public abstract class BasePressurePlateBlock extends Block {
 
         // CraftBukkit start - Interact Pressure Plate
         org.bukkit.World bworld = world.getWorld();
-        org.bukkit.plugin.PluginManager manager = world.getCraftServer().getPluginManager();
+        org.bukkit.plugin.PluginManager manager = Level.getCraftServer().getPluginManager();
 
         if (flag != flag1) {
             BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()), output, j);
diff --git a/src/main/java/net/minecraft/world/level/block/BedBlock.java b/src/main/java/net/minecraft/world/level/block/BedBlock.java
index 558397716c0013086e81acc7711221865d79fb17..970f885337d7f02fe2a263f7b69608be1c138627 100644
--- a/src/main/java/net/minecraft/world/level/block/BedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BedBlock.java
@@ -99,7 +99,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
                 world.explode((Entity) null, DamageSource.badRespawnPointExplosion(), (ExplosionDamageCalculator) null, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, 5.0F, true, Explosion.BlockInteraction.DESTROY);
                 return InteractionResult.SUCCESS;
             } else if (((Boolean) state.getValue(BedBlock.OCCUPIED)).booleanValue()) {
-                if (!this.kickVillagerOutOfBed(world, pos)) {
+                if (!BedBlock.kickVillagerOutOfBed(world, pos)) {
                     player.displayClientMessage(Component.translatable("block.minecraft.bed.occupied"), true);
                 }
 
@@ -157,7 +157,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
         return true || world.dimensionType().bedWorks();
     }
 
-    private boolean kickVillagerOutOfBed(Level world, BlockPos pos) {
+    private static boolean kickVillagerOutOfBed(Level world, BlockPos pos) {
         List<Villager> list = world.getEntitiesOfClass(Villager.class, new AABB(pos), LivingEntity::isSleeping);
 
         if (list.isEmpty()) {
@@ -178,12 +178,12 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
         if (entity.isSuppressingBounce()) {
             super.updateEntityAfterFallOn(world, entity);
         } else {
-            this.bounceUp(entity);
+            BedBlock.bounceUp(entity);
         }
 
     }
 
-    private void bounceUp(Entity entity) {
+    private static void bounceUp(Entity entity) {
         Vec3 vec3d = entity.getDeltaMovement();
 
         if (vec3d.y < 0.0D) {
diff --git a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
index 941810c78907afe7b5a42620dc18eed4290a3a14..2de2c68092c171c0f7cdb23e8349d205274eed10 100644
--- a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
@@ -3,12 +3,11 @@ package net.minecraft.world.level.block;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
-import net.minecraft.advancements.CriteriaTriggers;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
@@ -85,7 +84,7 @@ public class BeehiveBlock extends BaseEntityBlock {
             if (EnchantmentHelper.getItemEnchantmentLevel(Enchantments.SILK_TOUCH, stack) == 0) {
                 tileentitybeehive.emptyAllLivingFromHive(player, state, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
                 world.updateNeighbourForOutputSignal(pos, this);
-                this.angerNearbyBees(world, pos);
+                BeehiveBlock.angerNearbyBees(world, pos);
             }
 
             // CriteriaTriggers.BEE_NEST_DESTROYED.trigger((ServerPlayer) player, state, stack, tileentitybeehive.getOccupantCount()); // Paper - moved until after items are dropped
@@ -93,7 +92,7 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     }
 
-    private void angerNearbyBees(Level world, BlockPos pos) {
+    private static void angerNearbyBees(Level world, BlockPos pos) {
         List<Bee> list = world.getEntitiesOfClass(Bee.class, (new AABB(pos)).inflate(8.0D, 6.0D, 8.0D));
 
         if (!list.isEmpty()) {
@@ -164,13 +163,13 @@ public class BeehiveBlock extends BaseEntityBlock {
 
         if (flag) {
             if (!CampfireBlock.isSmokeyPos(world, pos)) {
-                if (this.hiveContainsBees(world, pos)) {
-                    this.angerNearbyBees(world, pos);
+                if (BeehiveBlock.hiveContainsBees(world, pos)) {
+                    BeehiveBlock.angerNearbyBees(world, pos);
                 }
 
                 this.releaseBeesAndResetHoneyLevel(world, state, pos, player, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
             } else {
-                this.resetHoneyLevel(world, state, pos);
+                BeehiveBlock.resetHoneyLevel(world, state, pos);
             }
 
             return InteractionResult.sidedSuccess(world.isClientSide);
@@ -179,7 +178,7 @@ public class BeehiveBlock extends BaseEntityBlock {
         }
     }
 
-    private boolean hiveContainsBees(Level world, BlockPos pos) {
+    private static boolean hiveContainsBees(Level world, BlockPos pos) {
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof BeehiveBlockEntity) {
@@ -192,7 +191,7 @@ public class BeehiveBlock extends BaseEntityBlock {
     }
 
     public void releaseBeesAndResetHoneyLevel(Level world, BlockState state, BlockPos pos, @Nullable Player player, BeehiveBlockEntity.BeeReleaseStatus beeState) {
-        this.resetHoneyLevel(world, state, pos);
+        BeehiveBlock.resetHoneyLevel(world, state, pos);
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof BeehiveBlockEntity) {
@@ -203,7 +202,7 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     }
 
-    public void resetHoneyLevel(Level world, BlockState state, BlockPos pos) {
+    public static void resetHoneyLevel(Level world, BlockState state, BlockPos pos) {
         world.setBlock(pos, (BlockState) state.setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(0)), 3);
     }
 
@@ -243,10 +242,10 @@ public class BeehiveBlock extends BaseEntityBlock {
     }
 
     private void spawnParticle(Level world, BlockPos pos, VoxelShape shape, double height) {
-        this.spawnFluidParticle(world, (double) pos.getX() + shape.min(Direction.Axis.X), (double) pos.getX() + shape.max(Direction.Axis.X), (double) pos.getZ() + shape.min(Direction.Axis.Z), (double) pos.getZ() + shape.max(Direction.Axis.Z), height);
+        BeehiveBlock.spawnFluidParticle(world, (double) pos.getX() + shape.min(Direction.Axis.X), (double) pos.getX() + shape.max(Direction.Axis.X), (double) pos.getZ() + shape.min(Direction.Axis.Z), (double) pos.getZ() + shape.max(Direction.Axis.Z), height);
     }
 
-    private void spawnFluidParticle(Level world, double minX, double maxX, double minZ, double maxZ, double height) {
+    private static void spawnFluidParticle(Level world, double minX, double maxX, double minZ, double maxZ, double height) {
         world.addParticle(ParticleTypes.DRIPPING_HONEY, Mth.lerp(world.random.nextDouble(), minX, maxX), height, Mth.lerp(world.random.nextDouble(), minZ, maxZ), 0.0D, 0.0D, 0.0D);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/BellBlock.java b/src/main/java/net/minecraft/world/level/block/BellBlock.java
index f89979a72e9f13a1650c92d1c180f8dc532fbf2a..3ca435619a265ac7ce4859fe4a7e99e975b5d5af 100644
--- a/src/main/java/net/minecraft/world/level/block/BellBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BellBlock.java
@@ -88,9 +88,9 @@ public class BellBlock extends BaseEntityBlock {
     public boolean onHit(Level world, BlockState state, BlockHitResult hitResult, @Nullable Player player, boolean bl) {
         Direction direction = hitResult.getDirection();
         BlockPos blockPos = hitResult.getBlockPos();
-        boolean bl2 = !bl || this.isProperHit(state, direction, hitResult.getLocation().y - (double)blockPos.getY());
+        boolean bl2 = !bl || BellBlock.isProperHit(state, direction, hitResult.getLocation().y - (double)blockPos.getY());
         if (bl2) {
-            boolean bl3 = this.attemptToRing(player, world, blockPos, direction);
+            boolean bl3 = BellBlock.attemptToRing(player, world, blockPos, direction);
             if (bl3 && player != null) {
                 player.awardStat(Stats.BELL_RING);
             }
@@ -101,7 +101,7 @@ public class BellBlock extends BaseEntityBlock {
         }
     }
 
-    private boolean isProperHit(BlockState state, Direction side, double y) {
+    private static boolean isProperHit(BlockState state, Direction side, double y) {
         if (side.getAxis() != Direction.Axis.Y && !(y > (double)0.8124F)) {
             Direction direction = state.getValue(FACING);
             BellAttachType bellAttachType = state.getValue(ATTACHMENT);
@@ -122,10 +122,10 @@ public class BellBlock extends BaseEntityBlock {
     }
 
     public boolean attemptToRing(Level world, BlockPos pos, @Nullable Direction direction) {
-        return this.attemptToRing((Entity)null, world, pos, direction);
+        return BellBlock.attemptToRing((Entity)null, world, pos, direction);
     }
 
-    public boolean attemptToRing(@Nullable Entity entity, Level world, BlockPos pos, @Nullable Direction direction) {
+    public static boolean attemptToRing(@Nullable Entity entity, Level world, BlockPos pos, @Nullable Direction direction) {
         BlockEntity blockEntity = world.getBlockEntity(pos);
         if (!world.isClientSide && blockEntity instanceof BellBlockEntity) {
             if (direction == null) {
@@ -142,7 +142,7 @@ public class BellBlock extends BaseEntityBlock {
         }
     }
 
-    private VoxelShape getVoxelShape(BlockState state) {
+    private static VoxelShape getVoxelShape(BlockState state) {
         Direction direction = state.getValue(FACING);
         BellAttachType bellAttachType = state.getValue(ATTACHMENT);
         if (bellAttachType == BellAttachType.FLOOR) {
@@ -162,12 +162,12 @@ public class BellBlock extends BaseEntityBlock {
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return this.getVoxelShape(state);
+        return BellBlock.getVoxelShape(state);
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return this.getVoxelShape(state);
+        return BellBlock.getVoxelShape(state);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
index 052bb6d31bf27fc210137919da7b43e8f175def0..99b7bc96b79dcbf8b487985b406ddcbc0fb62dff 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
@@ -179,7 +179,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
                     cancellable = CraftEventFactory.callPlayerInteractEvent((Player) entity, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
                 } else {
                     cancellable = new EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
-                    world.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
+                    Level.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
                 }
 
                 if (cancellable.isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index c426cd1d608728e3890437a50c515439b07b355e..b29448ec41ca9b88fe5e3ea6d99d3cfd4f79ac89 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -413,7 +413,7 @@ public class Block extends BlockBehaviour implements ItemLike {
         // Paper start - add player parameter
         popExperience(world, pos, size, null);
     }
-    public void popExperience(ServerLevel world, BlockPos pos, int size, net.minecraft.server.level.ServerPlayer player) {
+    public static void popExperience(ServerLevel world, BlockPos pos, int size, net.minecraft.server.level.ServerPlayer player) {
         // Paper end - add player parameter
         if (world.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS)) {
             ExperienceOrb.award(world, Vec3.atCenterOf(pos), size, org.bukkit.entity.ExperienceOrb.SpawnReason.BLOCK_BREAK, player); // Paper
@@ -577,7 +577,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
 
     // CraftBukkit start
-    protected int tryDropExperience(ServerLevel worldserver, BlockPos blockposition, ItemStack itemstack, IntProvider intprovider) {
+    protected static int tryDropExperience(ServerLevel worldserver, BlockPos blockposition, ItemStack itemstack, IntProvider intprovider) {
         if (EnchantmentHelper.getItemEnchantmentLevel(Enchantments.SILK_TOUCH, itemstack) == 0) {
             int i = intprovider.sample(worldserver.random);
 
diff --git a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
index a81aae522bba9909898faf09c36cb8237e320e59..659f8425e2119e66effa0bafacc872c5a205a0e7 100644
--- a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
@@ -108,7 +108,7 @@ public abstract class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock
             int current = (!powered) ? 15 : 0;
 
             BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
-            world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+            Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
             if ((eventRedstone.getNewCurrent() > 0) != (!powered)) {
                 return InteractionResult.SUCCESS;
@@ -169,7 +169,7 @@ public abstract class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock
                 org.bukkit.block.Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
 
                 BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 15, 0);
-                world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+                Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
                 if (eventRedstone.getNewCurrent() > 0) {
                     return;
@@ -206,7 +206,7 @@ public abstract class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock
             for (Object object : list) {
                 if (object != null) {
                     EntityInteractEvent event = new EntityInteractEvent(((Entity) object).getBukkitEntity(), block);
-                    world.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     if (!event.isCancelled()) {
                         allowed = true;
@@ -229,7 +229,7 @@ public abstract class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock
             int current = (!powered) ? 15 : 0;
 
             BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
-            world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+            Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
             if ((flag && eventRedstone.getNewCurrent() <= 0) || (!flag && eventRedstone.getNewCurrent() > 0)) {
                 return;
diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index b8bf7232fa57ed0783ead726bfc9fd5011dc8258..32e60226cde205395670145dff22b7fb029cf9d1 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -123,7 +123,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
         BlockPos blockposition = ctx.getClickedPos();
         boolean flag = world.getFluidState(blockposition).getType() == Fluids.WATER;
 
-        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(CampfireBlock.WATERLOGGED, Boolean.valueOf(flag))).setValue(CampfireBlock.SIGNAL_FIRE, Boolean.valueOf(this.isSmokeSource(world.getBlockState(blockposition.below()))))).setValue(CampfireBlock.LIT, Boolean.valueOf(!flag))).setValue(CampfireBlock.FACING, ctx.getHorizontalDirection());
+        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(CampfireBlock.WATERLOGGED, Boolean.valueOf(flag))).setValue(CampfireBlock.SIGNAL_FIRE, Boolean.valueOf(CampfireBlock.isSmokeSource(world.getBlockState(blockposition.below()))))).setValue(CampfireBlock.LIT, Boolean.valueOf(!flag))).setValue(CampfireBlock.FACING, ctx.getHorizontalDirection());
     }
 
     @Override
@@ -132,10 +132,10 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
-        return direction == Direction.DOWN ? (BlockState) state.setValue(CampfireBlock.SIGNAL_FIRE, Boolean.valueOf(this.isSmokeSource(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return direction == Direction.DOWN ? (BlockState) state.setValue(CampfireBlock.SIGNAL_FIRE, Boolean.valueOf(CampfireBlock.isSmokeSource(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
-    private boolean isSmokeSource(BlockState state) {
+    private static boolean isSmokeSource(BlockState state) {
         return state.is(Blocks.HAY_BLOCK);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/CommandBlock.java b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
index 353849d430836448df6b89f84566213c7caea18f..f049690e243a5834cfc71ee21133c297ed074941 100644
--- a/src/main/java/net/minecraft/world/level/block/CommandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
@@ -65,7 +65,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
                 int current = flag1 ? 15 : 0;
 
                 BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, old, current);
-                world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+                Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
                 flag1 = eventRedstone.getNewCurrent() > 0;
                 // CraftBukkit end
 
@@ -95,7 +95,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
             if (tileentitycommand_type == CommandBlockEntity.Mode.AUTO) {
                 tileentitycommand.markConditionMet();
                 if (flag1) {
-                    this.execute(state, world, pos, commandblocklistenerabstract, flag);
+                    CommandBlock.execute(state, world, pos, commandblocklistenerabstract, flag);
                 } else if (tileentitycommand.isConditional()) {
                     commandblocklistenerabstract.setSuccessCount(0);
                 }
@@ -105,7 +105,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
                 }
             } else if (tileentitycommand_type == CommandBlockEntity.Mode.REDSTONE) {
                 if (flag1) {
-                    this.execute(state, world, pos, commandblocklistenerabstract, flag);
+                    CommandBlock.execute(state, world, pos, commandblocklistenerabstract, flag);
                 } else if (tileentitycommand.isConditional()) {
                     commandblocklistenerabstract.setSuccessCount(0);
                 }
@@ -116,7 +116,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     }
 
-    private void execute(BlockState state, Level world, BlockPos pos, BaseCommandBlock executor, boolean hasCommand) {
+    private static void execute(BlockState state, Level world, BlockPos pos, BaseCommandBlock executor, boolean hasCommand) {
         if (hasCommand) {
             executor.performCommand(world);
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
index 38c51ae620154d4a2313f1b5cbc3fc6f48b062f2..48737a42f56cf02504bfba5ab07b555099d3882c 100644
--- a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
@@ -85,7 +85,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
         } else if (i < 15 && iblockdata1.isRedstoneConductor(world, blockposition1)) {
             blockposition1 = blockposition1.relative(enumdirection);
             iblockdata1 = world.getBlockState(blockposition1);
-            ItemFrame entityitemframe = this.getItemFrame(world, enumdirection, blockposition1);
+            ItemFrame entityitemframe = ComparatorBlock.getItemFrame(world, enumdirection, blockposition1);
             int j = Math.max(entityitemframe == null ? Integer.MIN_VALUE : entityitemframe.getAnalogOutput(), iblockdata1.hasAnalogOutputSignal() ? iblockdata1.getAnalogOutputSignal(world, blockposition1) : Integer.MIN_VALUE);
 
             if (j != Integer.MIN_VALUE) {
@@ -97,7 +97,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
     }
 
     @Nullable
-    private ItemFrame getItemFrame(Level world, Direction facing, BlockPos pos) {
+    private static ItemFrame getItemFrame(Level world, Direction facing, BlockPos pos) {
         // CraftBukkit - decompile error
         List<ItemFrame> list = world.getEntitiesOfClass(ItemFrame.class, new AABB((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), (double) (pos.getX() + 1), (double) (pos.getY() + 1), (double) (pos.getZ() + 1)), (java.util.function.Predicate<ItemFrame>) (entityitemframe) -> {
             return entityitemframe != null && entityitemframe.getDirection() == facing;
@@ -129,7 +129,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
             int j = tileentity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity) tileentity).getOutputSignal() : 0;
 
             if (i != j || ((Boolean) state.getValue(ComparatorBlock.POWERED)).booleanValue() != this.shouldTurnOn(world, pos, state)) {
-                TickPriority ticklistpriority = this.shouldPrioritize(world, pos, state) ? TickPriority.HIGH : TickPriority.NORMAL;
+                TickPriority ticklistpriority = DiodeBlock.shouldPrioritize(world, pos, state) ? TickPriority.HIGH : TickPriority.NORMAL;
 
                 world.scheduleTick(pos, (Block) this, 2, ticklistpriority);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java b/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
index 065525e8ce46c12cdfa1d5d06fb96ea4654e95a3..0789e6a4a68e6a57a290b8eebe3c91c66b0293cc 100644
--- a/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ConcretePowderBlock.java
@@ -102,7 +102,7 @@ public class ConcretePowderBlock extends FallingBlock {
             blockState.setData(this.concrete);
 
             BlockFormEvent event = new BlockFormEvent(blockState.getBlock(), blockState);
-            ((Level) world).getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
                 return blockState.getHandle();
diff --git a/src/main/java/net/minecraft/world/level/block/CoralBlock.java b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
index 88faea00be60a519f56f975a5311df5e1eb3e6b8..dab7309cf9f69d65f7b05f939724c85d98ca646e 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
@@ -24,7 +24,7 @@ public class CoralBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (!this.scanForWater(world, pos)) {
+        if (!CoralBlock.scanForWater(world, pos)) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState()).isCancelled()) {
                 return;
@@ -37,14 +37,14 @@ public class CoralBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (!this.scanForWater(world, pos)) {
+        if (!CoralBlock.scanForWater(world, pos)) {
             world.scheduleTick(pos, (Block) this, 60 + world.getRandom().nextInt(40));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
-    protected boolean scanForWater(BlockGetter world, BlockPos pos) {
+    protected static boolean scanForWater(BlockGetter world, BlockPos pos) {
         Direction[] aenumdirection = Direction.values();
         int i = aenumdirection.length;
 
@@ -63,7 +63,7 @@ public class CoralBlock extends Block {
     @Nullable
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        if (!this.scanForWater(ctx.getLevel(), ctx.getClickedPos())) {
+        if (!CoralBlock.scanForWater(ctx.getLevel(), ctx.getClickedPos())) {
             ctx.getLevel().scheduleTick(ctx.getClickedPos(), (Block) this, 60 + ctx.getLevel().getRandom().nextInt(40));
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
index 9be0ae6b8a06b7088fe78bb7e057a70445cdcaa1..501a11c616f47577d273e88068b0297c4185fdf0 100644
--- a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
@@ -88,7 +88,7 @@ public class DetectorRailBlock extends BaseRailBlock {
                 org.bukkit.block.Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
 
                 BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, flag ? 15 : 0, flag1 ? 15 : 0);
-                world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+                Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
                 flag1 = eventRedstone.getNewCurrent() > 0;
             }
@@ -97,7 +97,7 @@ public class DetectorRailBlock extends BaseRailBlock {
             if (flag1 && !flag) {
                 iblockdata1 = (BlockState) state.setValue(DetectorRailBlock.POWERED, Boolean.TRUE);
                 world.setBlock(pos, iblockdata1, 3);
-                this.updatePowerToConnected(world, pos, iblockdata1, true);
+                DetectorRailBlock.updatePowerToConnected(world, pos, iblockdata1, true);
                 world.updateNeighborsAt(pos, this);
                 world.updateNeighborsAt(pos.below(), this);
                 world.setBlocksDirty(pos, state, iblockdata1);
@@ -106,7 +106,7 @@ public class DetectorRailBlock extends BaseRailBlock {
             if (!flag1 && flag) {
                 iblockdata1 = (BlockState) state.setValue(DetectorRailBlock.POWERED, Boolean.FALSE);
                 world.setBlock(pos, iblockdata1, 3);
-                this.updatePowerToConnected(world, pos, iblockdata1, false);
+                DetectorRailBlock.updatePowerToConnected(world, pos, iblockdata1, false);
                 world.updateNeighborsAt(pos, this);
                 world.updateNeighborsAt(pos.below(), this);
                 world.setBlocksDirty(pos, state, iblockdata1);
@@ -120,7 +120,7 @@ public class DetectorRailBlock extends BaseRailBlock {
         }
     }
 
-    protected void updatePowerToConnected(Level world, BlockPos pos, BlockState state, boolean unpowering) {
+    protected static void updatePowerToConnected(Level world, BlockPos pos, BlockState state, boolean unpowering) {
         RailState minecarttracklogic = new RailState(world, pos, state);
         List<BlockPos> list = minecarttracklogic.getConnections();
         Iterator iterator = list.iterator();
@@ -175,10 +175,10 @@ public class DetectorRailBlock extends BaseRailBlock {
     }
 
     private <T extends AbstractMinecart> List<T> getInteractingMinecartOfType(Level world, BlockPos pos, Class<T> entityClass, Predicate<Entity> entityPredicate) {
-        return world.getEntitiesOfClass(entityClass, this.getSearchBB(pos), entityPredicate);
+        return world.getEntitiesOfClass(entityClass, DetectorRailBlock.getSearchBB(pos), entityPredicate);
     }
 
-    private AABB getSearchBB(BlockPos pos) {
+    private static AABB getSearchBB(BlockPos pos) {
         double d0 = 0.2D;
 
         return new AABB((double) pos.getX() + 0.2D, (double) pos.getY(), (double) pos.getZ() + 0.2D, (double) (pos.getX() + 1) - 0.2D, (double) (pos.getY() + 1) - 0.2D, (double) (pos.getZ() + 1) - 0.2D);
diff --git a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
index 501a2298d8fed0342765c49164caa385d765ebab..bf6255bd154618e696ccc62b858aeecb3fa6361f 100644
--- a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
@@ -108,7 +108,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
             if (flag != flag1 && !world.getBlockTicks().willTickThisTick(pos, this)) {
                 TickPriority ticklistpriority = TickPriority.HIGH;
 
-                if (this.shouldPrioritize(world, pos, state)) {
+                if (DiodeBlock.shouldPrioritize(world, pos, state)) {
                     ticklistpriority = TickPriority.EXTREMELY_HIGH;
                 } else if (flag) {
                     ticklistpriority = TickPriority.VERY_HIGH;
@@ -207,7 +207,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
         return state.getBlock() instanceof DiodeBlock;
     }
 
-    public boolean shouldPrioritize(BlockGetter world, BlockPos pos, BlockState state) {
+    public static boolean shouldPrioritize(BlockGetter world, BlockPos pos, BlockState state) {
         Direction enumdirection = ((Direction) state.getValue(DiodeBlock.FACING)).getOpposite();
         BlockState iblockdata1 = world.getBlockState(pos.relative(enumdirection));
 
diff --git a/src/main/java/net/minecraft/world/level/block/DoorBlock.java b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
index 22c14117f0e336914f07d73247bd0ebffddf7d4c..6cc260aeb18b228f233c928972d703afe21c3295 100644
--- a/src/main/java/net/minecraft/world/level/block/DoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
@@ -173,12 +173,12 @@ public class DoorBlock extends Block {
             state = (BlockState) state.cycle(DoorBlock.OPEN);
             world.setBlock(pos, state, 10);
             world.levelEvent(player, ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue() ? this.getOpenSound() : this.getCloseSound(), pos, 0);
-            world.gameEvent((Entity) player, this.isOpen(state) ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
+            world.gameEvent((Entity) player, DoorBlock.isOpen(state) ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
     }
 
-    public boolean isOpen(BlockState state) {
+    public static boolean isOpen(BlockState state) {
         return ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue();
     }
 
@@ -206,7 +206,7 @@ public class DoorBlock extends Block {
 
         if (oldPower == 0 ^ power == 0) {
             BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, oldPower, power);
-            world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+            Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
             boolean flag1 = eventRedstone.getNewCurrent() > 0;
             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java b/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
index 7e1edcc7b9f170b7c649437c2f0dd78c0bab9be4..b1bfb8dfa02106a8341094e188e4f1a68ce1dd43 100644
--- a/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
@@ -32,16 +32,16 @@ public class DragonEggBlock extends FallingBlock {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        this.teleport(state, world, pos);
+        DragonEggBlock.teleport(state, world, pos);
         return InteractionResult.sidedSuccess(world.isClientSide);
     }
 
     @Override
     public void attack(BlockState state, Level world, BlockPos pos, Player player) {
-        this.teleport(state, world, pos);
+        DragonEggBlock.teleport(state, world, pos);
     }
 
-    private void teleport(BlockState state, Level world, BlockPos pos) {
+    private static void teleport(BlockState state, Level world, BlockPos pos) {
         WorldBorder worldborder = world.getWorldBorder();
 
         for (int i = 0; i < 1000; ++i) {
diff --git a/src/main/java/net/minecraft/world/level/block/DropExperienceBlock.java b/src/main/java/net/minecraft/world/level/block/DropExperienceBlock.java
index 47b1b28e1e8f714099d4d64c5757baa817ff0af9..58965cda32fac54daffee325e2571550cf36a853 100644
--- a/src/main/java/net/minecraft/world/level/block/DropExperienceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DropExperienceBlock.java
@@ -30,7 +30,7 @@ public class DropExperienceBlock extends Block {
     @Override
     public int getExpDrop(BlockState iblockdata, ServerLevel worldserver, BlockPos blockposition, ItemStack itemstack, boolean flag) {
         if (flag) {
-            return this.tryDropExperience(worldserver, blockposition, itemstack, this.xpRange);
+            return Block.tryDropExperience(worldserver, blockposition, itemstack, this.xpRange);
         }
 
         return 0;
diff --git a/src/main/java/net/minecraft/world/level/block/DropperBlock.java b/src/main/java/net/minecraft/world/level/block/DropperBlock.java
index 801c4c120e98584bcf218a4ef9bd66d7d18c1097..3436a61b69fd73a4c3fc02c1d0bd153d975a0f35 100644
--- a/src/main/java/net/minecraft/world/level/block/DropperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DropperBlock.java
@@ -9,6 +9,7 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.CompoundContainer;
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.DispenserBlockEntity;
 import net.minecraft.world.level.block.entity.DropperBlockEntity;
@@ -69,7 +70,7 @@ public class DropperBlock extends DispenserBlock {
                     }
 
                     InventoryMoveItemEvent event = new InventoryMoveItemEvent(tileentitydispenser.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
-                    world.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
                     if (event.isCancelled()) {
                         return;
                     }
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 4792a8ba076a24c8874efd92764aa3233ae79c48..574817198574632926cf7cc58653d6da22c200a5 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.block;
 
-import java.util.Iterator;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -105,7 +104,7 @@ public class FarmBlock extends Block {
                 cancellable = CraftEventFactory.callPlayerInteractEvent((Player) entity, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
             } else {
                 cancellable = new EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
-                world.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
+                Level.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
             }
 
             if (cancellable.isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
index 9840f75e81ce1d917367aea2d21382aaff57c160..18dfa56387a9f50f7fb32d200d6b214920f567d5 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
@@ -56,7 +56,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
         if (((Direction) state.getValue(FenceGateBlock.FACING)).getClockWise().getAxis() != enumdirection_enumaxis) {
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         } else {
-            boolean flag = this.isWall(neighborState) || this.isWall(world.getBlockState(pos.relative(direction.getOpposite())));
+            boolean flag = FenceGateBlock.isWall(neighborState) || FenceGateBlock.isWall(world.getBlockState(pos.relative(direction.getOpposite())));
 
             return (BlockState) state.setValue(FenceGateBlock.IN_WALL, Boolean.valueOf(flag));
         }
@@ -93,12 +93,12 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
         boolean flag = world.hasNeighborSignal(blockposition);
         Direction enumdirection = ctx.getHorizontalDirection();
         Direction.Axis enumdirection_enumaxis = enumdirection.getAxis();
-        boolean flag1 = enumdirection_enumaxis == Direction.Axis.Z && (this.isWall(world.getBlockState(blockposition.west())) || this.isWall(world.getBlockState(blockposition.east()))) || enumdirection_enumaxis == Direction.Axis.X && (this.isWall(world.getBlockState(blockposition.north())) || this.isWall(world.getBlockState(blockposition.south())));
+        boolean flag1 = enumdirection_enumaxis == Direction.Axis.Z && (FenceGateBlock.isWall(world.getBlockState(blockposition.west())) || FenceGateBlock.isWall(world.getBlockState(blockposition.east()))) || enumdirection_enumaxis == Direction.Axis.X && (FenceGateBlock.isWall(world.getBlockState(blockposition.north())) || FenceGateBlock.isWall(world.getBlockState(blockposition.south())));
 
         return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(FenceGateBlock.FACING, enumdirection)).setValue(FenceGateBlock.OPEN, Boolean.valueOf(flag))).setValue(FenceGateBlock.POWERED, Boolean.valueOf(flag))).setValue(FenceGateBlock.IN_WALL, Boolean.valueOf(flag1));
     }
 
-    private boolean isWall(BlockState state) {
+    private static boolean isWall(BlockState state) {
         return state.is(BlockTags.WALLS);
     }
 
@@ -136,7 +136,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
                 int oldPower = oldPowered ? 15 : 0;
                 org.bukkit.block.Block bukkitBlock = org.bukkit.craftbukkit.block.CraftBlock.at(world, pos);
                 org.bukkit.event.block.BlockRedstoneEvent eventRedstone = new org.bukkit.event.block.BlockRedstoneEvent(bukkitBlock, oldPower, newPower);
-                world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+                Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
                 flag1 = eventRedstone.getNewCurrent() > 0;
             }
             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/level/block/FireBlock.java b/src/main/java/net/minecraft/world/level/block/FireBlock.java
index 9cdd621f166928efe3af2dbdb02feec9141c96dc..56ad272983ed3c2d1ef1e6a2cf67455295c0c74f 100644
--- a/src/main/java/net/minecraft/world/level/block/FireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FireBlock.java
@@ -101,7 +101,7 @@ public class FireBlock extends BaseFireBlock {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         // CraftBukkit start
-        if (!(world instanceof ServerLevel)) return this.canSurvive(state, world, pos) ? (BlockState) this.getStateWithAge(world, pos, ((Integer) state.getValue(FireBlock.AGE)).intValue()) : Blocks.AIR.defaultBlockState(); // Paper - don't fire events in world generation
+        if (!(world instanceof ServerLevel)) return this.canSurvive(state, world, pos) ? (BlockState) FireBlock.getStateWithAge(world, pos, ((Integer) state.getValue(FireBlock.AGE)).intValue()) : Blocks.AIR.defaultBlockState(); // Paper - don't fire events in world generation
         if (!this.canSurvive(state, world, pos)) {
             // Suppress during worldgen
             if (!(world instanceof Level)) {
@@ -111,13 +111,13 @@ public class FireBlock extends BaseFireBlock {
             blockState.setData(Blocks.AIR.defaultBlockState());
 
             BlockFadeEvent event = new BlockFadeEvent(blockState.getBlock(), blockState);
-            ((Level) world).getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
                 return blockState.getHandle();
             }
         }
-        return this.getStateWithAge(world, pos, ((Integer) state.getValue(FireBlock.AGE)).intValue()); // Paper - diff on change, see "don't fire events in world generation"
+        return FireBlock.getStateWithAge(world, pos, ((Integer) state.getValue(FireBlock.AGE)).intValue()); // Paper - diff on change, see "don't fire events in world generation"
         // CraftBukkit end
     }
 
@@ -174,7 +174,7 @@ public class FireBlock extends BaseFireBlock {
             boolean flag = iblockdata1.is(world.dimensionType().infiniburn());
             int i = ((Integer) state.getValue(FireBlock.AGE)).intValue();
 
-            if (!flag && world.isRaining() && this.isNearRain(world, pos) && random.nextFloat() < 0.2F + (float) i * 0.03F) {
+            if (!flag && world.isRaining() && FireBlock.isNearRain(world, pos) && random.nextFloat() < 0.2F + (float) i * 0.03F) {
                 fireExtinguished(world, pos); // CraftBukkit - extinguished by rain
             } else {
                 int j = Math.min(15, i + random.nextInt(3) / 2);
@@ -234,7 +234,7 @@ public class FireBlock extends BaseFireBlock {
                                         i2 /= 2;
                                     }
 
-                                    if (i2 > 0 && random.nextInt(k1) <= i2 && (!world.isRaining() || !this.isNearRain(world, blockposition_mutableblockposition))) {
+                                    if (i2 > 0 && random.nextInt(k1) <= i2 && (!world.isRaining() || !FireBlock.isNearRain(world, blockposition_mutableblockposition))) {
                                         int j2 = Math.min(15, i + random.nextInt(5) / 4);
 
                                         // CraftBukkit start - Call to stop spread of fire
@@ -243,7 +243,7 @@ public class FireBlock extends BaseFireBlock {
                                                 continue;
                                             }
 
-                                            CraftEventFactory.handleBlockSpreadEvent(world, pos, blockposition_mutableblockposition, this.getStateWithAge(world, blockposition_mutableblockposition, j2), 3); // CraftBukkit
+                                            CraftEventFactory.handleBlockSpreadEvent(world, pos, blockposition_mutableblockposition, FireBlock.getStateWithAge(world, blockposition_mutableblockposition, j2), 3); // CraftBukkit
                                         }
                                         // CraftBukkit end
                                     }
@@ -257,7 +257,7 @@ public class FireBlock extends BaseFireBlock {
         }
     }
 
-    protected boolean isNearRain(Level world, BlockPos pos) {
+    protected static boolean isNearRain(Level world, BlockPos pos) {
         return world.isRainingAt(pos) || world.isRainingAt(pos.west()) || world.isRainingAt(pos.east()) || world.isRainingAt(pos.north()) || world.isRainingAt(pos.south());
     }
 
@@ -280,7 +280,7 @@ public class FireBlock extends BaseFireBlock {
             org.bukkit.block.Block sourceBlock = world.getWorld().getBlockAt(sourceposition.getX(), sourceposition.getY(), sourceposition.getZ());
 
             BlockBurnEvent event = new BlockBurnEvent(theBlock, sourceBlock);
-            world.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
                 return;
@@ -290,7 +290,7 @@ public class FireBlock extends BaseFireBlock {
             if (randomsource.nextInt(j + 10) < 5 && !world.isRainingAt(blockposition)) {
                 int l = Math.min(j + randomsource.nextInt(5) / 4, 15);
 
-                world.setBlock(blockposition, this.getStateWithAge(world, blockposition, l), 3);
+                world.setBlock(blockposition, FireBlock.getStateWithAge(world, blockposition, l), 3);
             } else {
                 if(iblockdata.getBlock() != Blocks.TNT) world.removeBlock(blockposition, false); // Paper - TNTPrimeEvent - We might be cancelling it below, move the setAir down
             }
@@ -311,7 +311,7 @@ public class FireBlock extends BaseFireBlock {
 
     }
 
-    private BlockState getStateWithAge(LevelAccessor world, BlockPos pos, int age) {
+    private static BlockState getStateWithAge(LevelAccessor world, BlockPos pos, int age) {
         BlockState iblockdata = getState(world, pos);
 
         return iblockdata.is(Blocks.FIRE) ? (BlockState) iblockdata.setValue(FireBlock.AGE, Integer.valueOf(age)) : iblockdata;
diff --git a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
index d6232d6f14a195a0e3f8489f148eb8b44d0355c6..19fb81765c784c971e8fb90780b07d9a0b88b484 100644
--- a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
@@ -63,7 +63,7 @@ public class FrogspawnBlock extends Block {
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!this.canSurvive(state, world, pos)) {
-            this.destroyBlock(world, pos);
+            FrogspawnBlock.destroyBlock(world, pos);
         } else {
             this.hatchFrogspawn(world, pos, random);
         }
@@ -72,7 +72,7 @@ public class FrogspawnBlock extends Block {
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (entity.getType().equals(EntityType.FALLING_BLOCK)) {
-            this.destroyBlock(world, pos);
+            FrogspawnBlock.destroyBlock(world, pos);
         }
 
     }
@@ -89,12 +89,12 @@ public class FrogspawnBlock extends Block {
             return;
         }
         // Paper end
-        this.destroyBlock(world, pos);
+        FrogspawnBlock.destroyBlock(world, pos);
         world.playSound((Player)null, pos, SoundEvents.FROGSPAWN_HATCH, SoundSource.BLOCKS, 1.0F, 1.0F);
         this.spawnTadpoles(world, pos, random);
     }
 
-    private void destroyBlock(Level world, BlockPos pos) {
+    private static void destroyBlock(Level world, BlockPos pos) {
         world.destroyBlock(pos, false);
     }
 
@@ -103,8 +103,8 @@ public class FrogspawnBlock extends Block {
 
         for(int j = 1; j <= i; ++j) {
             Tadpole tadpole = EntityType.TADPOLE.create(world);
-            double d = (double)pos.getX() + this.getRandomTadpolePositionOffset(random);
-            double e = (double)pos.getZ() + this.getRandomTadpolePositionOffset(random);
+            double d = (double)pos.getX() + FrogspawnBlock.getRandomTadpolePositionOffset(random);
+            double e = (double)pos.getZ() + FrogspawnBlock.getRandomTadpolePositionOffset(random);
             int k = random.nextInt(1, 361);
             tadpole.moveTo(d, (double)pos.getY() - 0.5D, e, (float)k, 0.0F);
             tadpole.setPersistenceRequired();
@@ -113,7 +113,7 @@ public class FrogspawnBlock extends Block {
 
     }
 
-    private double getRandomTadpolePositionOffset(RandomSource random) {
+    private static double getRandomTadpolePositionOffset(RandomSource random) {
         double d = (double)(Tadpole.HITBOX_WIDTH / 2.0F);
         return Mth.clamp(random.nextDouble(), d, 1.0D - d);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
index 86240bb2f257438f37cfa0106a8a82ea3986120f..87267a497c43fa23a9ac312eb83db211d0226d43 100644
--- a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
@@ -56,7 +56,7 @@ public class FrostedIceBlock extends IceBlock {
             world.setBlock(pos, state.setValue(AGE, Integer.valueOf(i + 1)), 2);
             return false;
         } else {
-            this.melt(state, world, pos);
+            IceBlock.melt(state, world, pos);
             return true;
         }
     }
@@ -64,7 +64,7 @@ public class FrostedIceBlock extends IceBlock {
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
         if (sourceBlock.defaultBlockState().is(this) && this.fewerNeigboursThan(world, pos, 2)) {
-            this.melt(state, world, pos);
+            IceBlock.melt(state, world, pos);
         }
 
         super.neighborChanged(state, world, pos, sourceBlock, sourcePos, notify);
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index 8e0ca6158ecb1d93d34448f0629c71d9ed98c932..7d6e0b83097b86f974dccb7542de1693c3302541 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -74,11 +74,11 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
         return (BlockState) state.cycle(GrowingPlantHeadBlock.AGE);
     }
 
-    public BlockState getMaxAgeState(BlockState state) {
+    public static BlockState getMaxAgeState(BlockState state) {
         return (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(25));
     }
 
-    public boolean isMaxAge(BlockState state) {
+    public static boolean isMaxAge(BlockState state) {
         return ((Integer) state.getValue(GrowingPlantHeadBlock.AGE)).intValue() == 25;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/HoneyBlock.java b/src/main/java/net/minecraft/world/level/block/HoneyBlock.java
index 683f24251baf8ef3bef8f32ba83dc7f0e8ed7d70..65498727d31c44cbf632ae8fa4e7f8c77be398e9 100644
--- a/src/main/java/net/minecraft/world/level/block/HoneyBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HoneyBlock.java
@@ -56,16 +56,16 @@ public class HoneyBlock extends HalfTransparentBlock {
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
-        if (this.isSlidingDown(pos, entity)) {
-            this.maybeDoSlideAchievement(entity, pos);
-            this.doSlideMovement(entity);
-            this.maybeDoSlideEffects(world, entity);
+        if (HoneyBlock.isSlidingDown(pos, entity)) {
+            HoneyBlock.maybeDoSlideAchievement(entity, pos);
+            HoneyBlock.doSlideMovement(entity);
+            HoneyBlock.maybeDoSlideEffects(world, entity);
         }
 
         super.entityInside(state, world, pos, entity);
     }
 
-    private boolean isSlidingDown(BlockPos pos, Entity entity) {
+    private static boolean isSlidingDown(BlockPos pos, Entity entity) {
         if (entity.isOnGround()) {
             return false;
         } else if (entity.getY() > (double)pos.getY() + 0.9375D - 1.0E-7D) {
@@ -80,14 +80,14 @@ public class HoneyBlock extends HalfTransparentBlock {
         }
     }
 
-    private void maybeDoSlideAchievement(Entity entity, BlockPos pos) {
+    private static void maybeDoSlideAchievement(Entity entity, BlockPos pos) {
         if (entity instanceof ServerPlayer && entity.level.getGameTime() % 20L == 0L) {
             CriteriaTriggers.HONEY_BLOCK_SLIDE.trigger((ServerPlayer)entity, entity.level.getBlockState(pos));
         }
 
     }
 
-    private void doSlideMovement(Entity entity) {
+    private static void doSlideMovement(Entity entity) {
         Vec3 vec3 = entity.getDeltaMovement();
         if (vec3.y < -0.13D) {
             double d = -0.05D / vec3.y;
@@ -99,7 +99,7 @@ public class HoneyBlock extends HalfTransparentBlock {
         entity.resetFallDistance();
     }
 
-    private void maybeDoSlideEffects(Level world, Entity entity) {
+    private static void maybeDoSlideEffects(Level world, Entity entity) {
         if (doesEntityDoHoneyBlockSlideEffects(entity)) {
             if (world.random.nextInt(5) == 0) {
                 entity.playSound(SoundEvents.HONEY_BLOCK_SLIDE, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/world/level/block/HopperBlock.java b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
index fa7f8afefca850689e9c6303b9d7d2144a2aa209..5592fee1cc7a07977b4f0d548884a72dd74e28ae 100644
--- a/src/main/java/net/minecraft/world/level/block/HopperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
@@ -123,7 +123,7 @@ public class HopperBlock extends BaseEntityBlock {
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!oldState.is(state.getBlock())) {
-            this.checkPoweredState(world, pos, state);
+            HopperBlock.checkPoweredState(world, pos, state);
         }
     }
 
@@ -144,10 +144,10 @@ public class HopperBlock extends BaseEntityBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
-        this.checkPoweredState(world, pos, state);
+        HopperBlock.checkPoweredState(world, pos, state);
     }
 
-    private void checkPoweredState(Level world, BlockPos pos, BlockState state) {
+    private static void checkPoweredState(Level world, BlockPos pos, BlockState state) {
         boolean bl = !world.hasNeighborSignal(pos);
         if (bl != state.<Boolean>getValue(ENABLED).booleanValue()) {
             world.setBlock(pos, state.setValue(ENABLED, Boolean.valueOf(bl)), 4);
diff --git a/src/main/java/net/minecraft/world/level/block/IceBlock.java b/src/main/java/net/minecraft/world/level/block/IceBlock.java
index 0afadbc8515d448b0ef817f4f0f53b1bb0abde43..ac47ea27327dcb778ee7331cf4b398b8b0a25a94 100644
--- a/src/main/java/net/minecraft/world/level/block/IceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IceBlock.java
@@ -43,12 +43,12 @@ public class IceBlock extends HalfTransparentBlock {
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getBrightness(LightLayer.BLOCK, pos) > 11 - state.getLightBlock(world, pos)) {
-            this.melt(state, world, pos);
+            IceBlock.melt(state, world, pos);
         }
 
     }
 
-    protected void melt(BlockState state, Level world, BlockPos pos) {
+    protected static void melt(BlockState state, Level world, BlockPos pos) {
         // CraftBukkit start
         if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, world.dimensionType().ultraWarm() ? Blocks.AIR.defaultBlockState() : Blocks.WATER.defaultBlockState()).isCancelled()) {
             return;
diff --git a/src/main/java/net/minecraft/world/level/block/InfestedBlock.java b/src/main/java/net/minecraft/world/level/block/InfestedBlock.java
index f33033c99ac52e2c64adeb8c58ae87625e92b299..24d5cf624890f32619c666200ce8f4c254a1bba9 100644
--- a/src/main/java/net/minecraft/world/level/block/InfestedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/InfestedBlock.java
@@ -38,7 +38,7 @@ public class InfestedBlock extends Block {
         return InfestedBlock.BLOCK_BY_HOST_BLOCK.containsKey(block.getBlock());
     }
 
-    private void spawnInfestation(ServerLevel world, BlockPos pos) {
+    private static void spawnInfestation(ServerLevel world, BlockPos pos) {
         Silverfish entitysilverfish = (Silverfish) EntityType.SILVERFISH.create(world);
 
         entitysilverfish.moveTo((double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D, 0.0F, 0.0F);
@@ -50,7 +50,7 @@ public class InfestedBlock extends Block {
     public void spawnAfterBreak(BlockState state, ServerLevel world, BlockPos pos, ItemStack stack, boolean dropExperience) {
         super.spawnAfterBreak(state, world, pos, stack, dropExperience);
         if (world.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS) && EnchantmentHelper.getItemEnchantmentLevel(Enchantments.SILK_TOUCH, stack) == 0) {
-            this.spawnInfestation(world, pos);
+            InfestedBlock.spawnInfestation(world, pos);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
index 3c5d241b073a2b4a7a6a123c05d7dd74fee28abd..bf7e87715fff43a7609c95fb4dccab287824d06e 100644
--- a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
@@ -50,7 +50,7 @@ public class JukeboxBlock extends BaseEntityBlock {
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
         if (((Boolean) state.getValue(JukeboxBlock.HAS_RECORD)).booleanValue()) {
-            this.dropRecording(world, pos);
+            JukeboxBlock.dropRecording(world, pos);
             state = (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, Boolean.FALSE);
             world.gameEvent(GameEvent.JUKEBOX_STOP_PLAY, pos, GameEvent.Context.of(state));
             world.setBlock(pos, state, 2);
@@ -61,7 +61,7 @@ public class JukeboxBlock extends BaseEntityBlock {
         }
     }
 
-    public void setRecord(@Nullable Entity user, LevelAccessor world, BlockPos pos, BlockState state, ItemStack stack) {
+    public static void setRecord(@Nullable Entity user, LevelAccessor world, BlockPos pos, BlockState state, ItemStack stack) {
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof JukeboxBlockEntity) {
@@ -81,7 +81,7 @@ public class JukeboxBlock extends BaseEntityBlock {
 
     }
 
-    public void dropRecording(Level world, BlockPos pos) {
+    public static void dropRecording(Level world, BlockPos pos) {
         if (!world.isClientSide) {
             BlockEntity tileentity = world.getBlockEntity(pos);
 
@@ -109,7 +109,7 @@ public class JukeboxBlock extends BaseEntityBlock {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
-            this.dropRecording(world, pos);
+            JukeboxBlock.dropRecording(world, pos);
             super.onRemove(state, world, pos, newState, moved);
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
index 34f07bc5637b3676c63f122aca91cd0f4fdc7ea8..c392eced55bc08ea55ead81be2c2af6778d40a73 100644
--- a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
@@ -105,7 +105,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
                 world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()),
                 (entity == null) ? null : entity.getBukkitEntity(), reason, newState
         );
-        world.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         if (event.isCancelled()) {
             return false;
         }
diff --git a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
index e67a77c790af14509f3a3bf3aa2b5012511b3c7e..b0778edde35498efa18e880505d5097e933fb69e 100644
--- a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
@@ -48,10 +48,10 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (this.decaying(state)) {
+        if (LeavesBlock.decaying(state)) {
             // CraftBukkit start
             LeavesDecayEvent event = new LeavesDecayEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
-            world.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled() || world.getBlockState(pos).getBlock() != this) {
                 return;
@@ -63,7 +63,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     }
 
-    protected boolean decaying(BlockState state) {
+    protected static boolean decaying(BlockState state) {
         return !((Boolean) state.getValue(LeavesBlock.PERSISTENT)).booleanValue() && ((Integer) state.getValue(LeavesBlock.DISTANCE)).intValue() == 7;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/LecternBlock.java b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
index 612845a2d5242664b69e60ea761535d5ed207b76..3bdd4120352b27b7d01ea0d45fe665ed229abb7a 100644
--- a/src/main/java/net/minecraft/world/level/block/LecternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
@@ -186,7 +186,7 @@ public class LecternBlock extends BaseEntityBlock {
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
             if (((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue()) {
-                this.popBook(state, world, pos);
+                LecternBlock.popBook(state, world, pos);
             }
 
             if (((Boolean) state.getValue(LecternBlock.POWERED)).booleanValue()) {
@@ -197,7 +197,7 @@ public class LecternBlock extends BaseEntityBlock {
         }
     }
 
-    private void popBook(BlockState state, Level world, BlockPos pos) {
+    private static void popBook(BlockState state, Level world, BlockPos pos) {
         BlockEntity tileentity = world.getBlockEntity(pos, false); // CraftBukkit - don't validate, type may be changed already
 
         if (tileentity instanceof LecternBlockEntity) {
@@ -253,7 +253,7 @@ public class LecternBlock extends BaseEntityBlock {
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
         if (((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue()) {
             if (!world.isClientSide) {
-                this.openScreen(world, pos, player);
+                LecternBlock.openScreen(world, pos, player);
             }
 
             return InteractionResult.sidedSuccess(world.isClientSide);
@@ -270,7 +270,7 @@ public class LecternBlock extends BaseEntityBlock {
         return !((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue() ? null : super.getMenuProvider(state, world, pos);
     }
 
-    private void openScreen(Level world, BlockPos pos, Player player) {
+    private static void openScreen(Level world, BlockPos pos, Player player) {
         BlockEntity tileentity = world.getBlockEntity(pos);
 
         if (tileentity instanceof LecternBlockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/block/LeverBlock.java b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
index 4306bb0270e73f248b3264a4df98add4d11a3b14..b3453a020ad6eceb3442effac3af6323945bdbc2 100644
--- a/src/main/java/net/minecraft/world/level/block/LeverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
@@ -99,7 +99,7 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
             int current = (!powered) ? 15 : 0;
 
             BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
-            world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+            Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
             if ((eventRedstone.getNewCurrent() > 0) != (!powered)) {
                 return InteractionResult.SUCCESS;
diff --git a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
index 32e738199292138a3702d491fa9471fd57293bfa..dcda9f972bc00c7a4c4918c58429f8f42de4e290 100644
--- a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
@@ -88,7 +88,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
         int current = (!powered) ? 15 : 0;
 
         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(world, pos), old, current);
-        world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+        Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
         if (eventRedstone.getNewCurrent() <= 0) {
             return;
diff --git a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
index 01054d3819d6e0ad7ba723efb7bc31069e059c04..92b675abb6551d3ac296709298784cc8cf51a130 100644
--- a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
@@ -158,7 +158,7 @@ public class LiquidBlock extends Block implements BucketPickup {
 
                     // CraftBukkit start
                     if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, pos, block.defaultBlockState())) {
-                        this.fizz(world, pos);
+                        LiquidBlock.fizz(world, pos);
                     }
                     // CraftBukkit end
                     return false;
@@ -167,7 +167,7 @@ public class LiquidBlock extends Block implements BucketPickup {
                 if (flag && world.getBlockState(blockposition1).is(Blocks.BLUE_ICE)) {
                     // CraftBukkit start
                     if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, pos, Blocks.BASALT.defaultBlockState())) {
-                        this.fizz(world, pos);
+                        LiquidBlock.fizz(world, pos);
                     }
                     // CraftBukkit end
                     return false;
@@ -178,7 +178,7 @@ public class LiquidBlock extends Block implements BucketPickup {
         return true;
     }
 
-    private void fizz(LevelAccessor world, BlockPos pos) {
+    private static void fizz(LevelAccessor world, BlockPos pos) {
         world.levelEvent(1501, pos, 0);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
index 08a84e8fdb242f467fb20eec73764ef71691ad42..06b160c08873a79687066ffc059c028c8193237f 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
@@ -89,7 +89,7 @@ public class NetherPortalBlock extends Block {
         if (!entity.isPassenger() && !entity.isVehicle() && entity.canChangeDimensions()) {
             // CraftBukkit start - Entity in portal
             EntityPortalEnterEvent event = new EntityPortalEnterEvent(entity.getBukkitEntity(), new org.bukkit.Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()));
-            world.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
             // CraftBukkit end
             entity.handleInsidePortal(pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
index 23eec51d3e85481e83d5873e82e85fe05617bd84..4922e3c6b6361f7cd17f43334bcd78ee989d0663 100644
--- a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
@@ -86,7 +86,7 @@ public class PressurePlateBlock extends BasePressurePlateBlock {
                 // CraftBukkit start - Call interact event when turning on a pressure plate
                 if (this.getSignalForState(world.getBlockState(pos)) == 0) {
                     org.bukkit.World bworld = world.getWorld();
-                    org.bukkit.plugin.PluginManager manager = world.getCraftServer().getPluginManager();
+                    org.bukkit.plugin.PluginManager manager = Level.getCraftServer().getPluginManager();
                     org.bukkit.event.Cancellable cancellable;
 
                     if (entity instanceof Player) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
index a6121bc6b1db1ec37dd68f14ab8db7c41faccb77..8514901ed3752b7e57f64fe4c641693f4563c843 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
@@ -51,7 +51,7 @@ public class RedStoneOreBlock extends Block {
                 }
             } else {
                 EntityInteractEvent event = new EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
-                world.getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
                 if (!event.isCancelled()) {
                     RedStoneOreBlock.interact(world.getBlockState(pos), world, pos, entity); // add entity
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index d55b35b8eaf41ff471deb6ebb4e7458ffe717f2b..8b93c49579a4763bbc66c7ef3265c5e96fa21650 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block;
 
+import com.destroystokyo.paper.util.RedstoneWireTurbo;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -80,13 +81,13 @@ public class RedStoneWireBlock extends Block {
             BlockState iblockdata = (BlockState) unmodifiableiterator.next();
 
             if (((Integer) iblockdata.getValue(RedStoneWireBlock.POWER)).intValue() == 0) {
-                RedStoneWireBlock.SHAPES_CACHE.put(iblockdata, this.calculateShape(iblockdata));
+                RedStoneWireBlock.SHAPES_CACHE.put(iblockdata, RedStoneWireBlock.calculateShape(iblockdata));
             }
         }
 
     }
 
-    private VoxelShape calculateShape(BlockState state) {
+    private static VoxelShape calculateShape(BlockState state) {
         VoxelShape voxelshape = RedStoneWireBlock.SHAPE_DOT;
         Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
@@ -227,7 +228,7 @@ public class RedStoneWireBlock extends Block {
         BlockState iblockdata = world.getBlockState(blockposition1);
 
         if (flag) {
-            boolean flag1 = this.canSurviveOn(world, blockposition1, iblockdata);
+            boolean flag1 = RedStoneWireBlock.canSurviveOn(world, blockposition1, iblockdata);
 
             if (flag1 && RedStoneWireBlock.shouldConnectTo(world.getBlockState(blockposition1.above()))) {
                 if (iblockdata.isFaceSturdy(world, blockposition1, direction.getOpposite())) {
@@ -246,10 +247,10 @@ public class RedStoneWireBlock extends Block {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
-        return this.canSurviveOn(world, blockposition1, iblockdata1);
+        return RedStoneWireBlock.canSurviveOn(world, blockposition1, iblockdata1);
     }
 
-    private boolean canSurviveOn(BlockGetter world, BlockPos pos, BlockState floor) {
+    private static boolean canSurviveOn(BlockGetter world, BlockPos pos, BlockState floor) {
         return floor.isFaceSturdy(world, pos, Direction.UP) || floor.is(Blocks.HOPPER);
     }
 
@@ -346,7 +347,7 @@ public class RedStoneWireBlock extends Block {
 
         if (i != j) {
             org.bukkit.event.block.BlockRedstoneEvent event = new org.bukkit.event.block.BlockRedstoneEvent(worldIn.getWorld().getBlockAt(pos1.getX(), pos1.getY(), pos1.getZ()), i, j);
-            worldIn.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             j = event.getNewCurrent();
             state = state.setValue(POWER, Integer.valueOf(j));
@@ -355,7 +356,7 @@ public class RedStoneWireBlock extends Block {
                 // [Space Walker] suppress shape updates and emit those manually to
                 // bypass the new neighbor update stack.
                 if (worldIn.setBlock(pos1, state, Block.UPDATE_KNOWN_SHAPE | Block.UPDATE_CLIENTS))
-                    turbo.updateNeighborShapes(worldIn, pos1, state);
+                    RedstoneWireTurbo.updateNeighborShapes(worldIn, pos1, state);
             }
         }
 
@@ -370,7 +371,7 @@ public class RedStoneWireBlock extends Block {
         int oldPower = ((Integer) state.getValue(RedStoneWireBlock.POWER)).intValue();
         if (oldPower != i) {
             BlockRedstoneEvent event = new BlockRedstoneEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), oldPower, i);
-            world.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             i = event.getNewCurrent();
         }
@@ -587,7 +588,7 @@ public class RedStoneWireBlock extends Block {
         return Mth.color((float) vec3d.x(), (float) vec3d.y(), (float) vec3d.z());
     }
 
-    private void spawnParticlesAlongLine(Level world, RandomSource random, BlockPos pos, Vec3 color, Direction enumdirection, Direction enumdirection1, float f, float f1) {
+    private static void spawnParticlesAlongLine(Level world, RandomSource random, BlockPos pos, Vec3 color, Direction enumdirection, Direction enumdirection1, float f, float f1) {
         float f2 = f1 - f;
 
         if (random.nextFloat() < 0.2F * f2) {
@@ -614,13 +615,13 @@ public class RedStoneWireBlock extends Block {
 
                 switch (blockpropertyredstoneside) {
                     case UP:
-                        this.spawnParticlesAlongLine(world, random, pos, RedStoneWireBlock.COLORS[i], enumdirection, Direction.UP, -0.5F, 0.5F);
+                        RedStoneWireBlock.spawnParticlesAlongLine(world, random, pos, RedStoneWireBlock.COLORS[i], enumdirection, Direction.UP, -0.5F, 0.5F);
                     case SIDE:
-                        this.spawnParticlesAlongLine(world, random, pos, RedStoneWireBlock.COLORS[i], Direction.DOWN, enumdirection, 0.0F, 0.5F);
+                        RedStoneWireBlock.spawnParticlesAlongLine(world, random, pos, RedStoneWireBlock.COLORS[i], Direction.DOWN, enumdirection, 0.0F, 0.5F);
                         break;
                     case NONE:
                     default:
-                        this.spawnParticlesAlongLine(world, random, pos, RedStoneWireBlock.COLORS[i], Direction.DOWN, enumdirection, 0.0F, 0.3F);
+                        RedStoneWireBlock.spawnParticlesAlongLine(world, random, pos, RedStoneWireBlock.COLORS[i], Direction.DOWN, enumdirection, 0.0F, 0.3F);
                 }
             }
 
@@ -670,7 +671,7 @@ public class RedStoneWireBlock extends Block {
                 iblockdata1 = this.getConnectionState(world, iblockdata1, pos);
                 if (iblockdata1 != state) {
                     world.setBlock(pos, iblockdata1, 3);
-                    this.updatesOnShapeChange(world, pos, state, iblockdata1);
+                    RedStoneWireBlock.updatesOnShapeChange(world, pos, state, iblockdata1);
                     return InteractionResult.SUCCESS;
                 }
             }
@@ -679,7 +680,7 @@ public class RedStoneWireBlock extends Block {
         }
     }
 
-    private void updatesOnShapeChange(Level world, BlockPos pos, BlockState oldState, BlockState newState) {
+    private static void updatesOnShapeChange(Level world, BlockPos pos, BlockState oldState, BlockState newState) {
         Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
index 790ba42638790924cec9faa0e81339f0fba06b61..8bc4f00e99450b9a20cfb8d8055e3b6713a8f0c3 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
@@ -1,9 +1,5 @@
 package net.minecraft.world.level.block;
 
-import com.google.common.collect.Lists;
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.DustParticleOptions;
@@ -83,7 +79,7 @@ public class RedstoneTorchBlock extends TorchBlock {
         // Paper end
 
         // CraftBukkit start
-        org.bukkit.plugin.PluginManager manager = world.getCraftServer().getPluginManager();
+        org.bukkit.plugin.PluginManager manager = Level.getCraftServer().getPluginManager();
         org.bukkit.block.Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
         int oldCurrent = ((Boolean) state.getValue(RedstoneTorchBlock.LIT)).booleanValue() ? 15 : 0;
 
diff --git a/src/main/java/net/minecraft/world/level/block/SculkBlock.java b/src/main/java/net/minecraft/world/level/block/SculkBlock.java
index 3a29984a0fed6b57456de25d4d98cb7ddb526780..2550b43b23295c38d5e348c1934ecb8df3698a0a 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkBlock.java
@@ -33,7 +33,7 @@ public class SculkBlock extends DropExperienceBlock implements SculkBehaviour {
 
                 if (random.nextInt(j) < i) {
                     BlockPos blockposition2 = blockposition1.above();
-                    BlockState iblockdata = this.getRandomGrowthState(world, blockposition2, random, spreadManager.isWorldGeneration());
+                    BlockState iblockdata = SculkBlock.getRandomGrowthState(world, blockposition2, random, spreadManager.isWorldGeneration());
 
                     // CraftBukkit start - Call BlockSpreadEvent
                     if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, catalystPos, blockposition2, iblockdata, 3)) {
@@ -60,7 +60,7 @@ public class SculkBlock extends DropExperienceBlock implements SculkBehaviour {
         return Math.max(1, (int) ((float) charge * f1 * 0.5F));
     }
 
-    private BlockState getRandomGrowthState(LevelAccessor world, BlockPos pos, RandomSource random, boolean allowShrieker) {
+    private static BlockState getRandomGrowthState(LevelAccessor world, BlockPos pos, RandomSource random, boolean allowShrieker) {
         BlockState iblockdata;
 
         if (random.nextInt(11) == 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
index 613dbbbf57cca2e748507ea651bfcf192bcb75b1..a1cfd5e409f0067b94c5f98f0ca43541481ce0ad 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
@@ -92,7 +92,7 @@ public class SculkCatalystBlock extends BaseEntityBlock {
     @Override
     public int getExpDrop(BlockState iblockdata, ServerLevel worldserver, BlockPos blockposition, ItemStack itemstack, boolean flag) {
         if (flag) {
-            return this.tryDropExperience(worldserver, blockposition, itemstack, this.xpRange);
+            return Block.tryDropExperience(worldserver, blockposition, itemstack, this.xpRange);
         }
 
         return 0;
diff --git a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
index a7e1bcf42a495f80093c5bba8174a8b66b77c325..b33efececc8ce5f11207034c593d1e4b4628b0b7 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -145,7 +145,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
                 cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((Player) entity, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
             } else {
                 cancellable = new org.bukkit.event.entity.EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
-                world.getCraftServer().getPluginManager().callEvent((org.bukkit.event.entity.EntityInteractEvent) cancellable);
+                Level.getCraftServer().getPluginManager().callEvent((org.bukkit.event.entity.EntityInteractEvent) cancellable);
             }
             if (cancellable.isCancelled()) {
                 return;
@@ -252,7 +252,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
     public static void deactivate(Level world, BlockPos pos, BlockState state) {
         // CraftBukkit start
         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(world, pos), state.<Integer>getValue(SculkSensorBlock.POWER).intValue(), 0);
-        world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+        Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
         if (eventRedstone.getNewCurrent() > 0) {
             world.setBlock(pos, state.setValue(SculkSensorBlock.POWER, Integer.valueOf(eventRedstone.getNewCurrent())), 3);
@@ -271,7 +271,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
     public static void activate(@Nullable Entity entity, Level world, BlockPos pos, BlockState state, int power) {
         // CraftBukkit start
         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(world, pos), state.<Integer>getValue(SculkSensorBlock.POWER).intValue(), power);
-        world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+        Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
         if (eventRedstone.getNewCurrent() <= 0) {
             return;
@@ -346,7 +346,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
     @Override
     public int getExpDrop(BlockState iblockdata, ServerLevel worldserver, BlockPos blockposition, ItemStack itemstack, boolean flag) {
         if (flag) {
-            return this.tryDropExperience(worldserver, blockposition, itemstack, ConstantInt.of(5));
+            return Block.tryDropExperience(worldserver, blockposition, itemstack, ConstantInt.of(5));
         }
 
         return 0;
diff --git a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
index c4d1f9266372488a07269957d000e9b6151304b9..e40c3b32bd8e913d3d8955a2d0bf5bdcd9069f91 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
@@ -147,7 +147,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
     @Override
     public int getExpDrop(BlockState iblockdata, ServerLevel worldserver, BlockPos blockposition, ItemStack itemstack, boolean flag) {
         if (flag) {
-            return this.tryDropExperience(worldserver, blockposition, itemstack, ConstantInt.of(5));
+            return Block.tryDropExperience(worldserver, blockposition, itemstack, ConstantInt.of(5));
         }
 
         return 0;
diff --git a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
index 88ff8a835abde98b63875b1406aebfc6dde853ae..cb6245e64c3cc4cc5280f342678865e6d10c61d9 100644
--- a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
@@ -43,14 +43,14 @@ public class SpongeBlock extends Block {
     }
 
     protected void tryAbsorbWater(Level world, BlockPos pos) {
-        if (this.removeWaterBreadthFirstSearch(world, pos)) {
+        if (SpongeBlock.removeWaterBreadthFirstSearch(world, pos)) {
             world.setBlock(pos, Blocks.WET_SPONGE.defaultBlockState(), 2);
             world.levelEvent(2001, pos, Block.getId(Blocks.WATER.defaultBlockState()));
         }
 
     }
 
-    private boolean removeWaterBreadthFirstSearch(Level world, BlockPos pos) {
+    private static boolean removeWaterBreadthFirstSearch(Level world, BlockPos pos) {
         Queue<Tuple<BlockPos, Integer>> queue = Lists.newLinkedList();
 
         queue.add(new Tuple<>(pos, Integer.valueOf(0)));
@@ -110,7 +110,7 @@ public class SpongeBlock extends Block {
             final org.bukkit.block.Block bblock = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
 
             SpongeAbsorbEvent event = new SpongeAbsorbEvent(bblock, (List<org.bukkit.block.BlockState>) (List) blocks);
-            world.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
                 return false;
diff --git a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
index abee7cdd4331934a475c1dfaa007f3fe6217d7c5..2ab7f30639dfd2ed8a303ea300f22e5f064008dd 100644
--- a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
@@ -126,7 +126,7 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
                 if (oldPower == 0 ^ power == 0 || sourceBlock.defaultBlockState().isSignalSource()) {
                     BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bblock, oldPower, power);
-                    world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+                    Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
                     flag1 = eventRedstone.getNewCurrent() > 0;
                 }
                 // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index 8a4010a7da1705034bf816494b1d6697449c78c7..401a1a894d3041c7e3157f89fb2403120615929e 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -164,7 +164,7 @@ public class TripWireBlock extends Block {
         // CraftBukkit start - Call interact even when triggering connected tripwire
         if (flag != flag1 && flag1 && ((Boolean) iblockdata.getValue(ATTACHED)).booleanValue()) {
             org.bukkit.World bworld = world.getWorld();
-            org.bukkit.plugin.PluginManager manager = world.getCraftServer().getPluginManager();
+            org.bukkit.plugin.PluginManager manager = Level.getCraftServer().getPluginManager();
             org.bukkit.block.Block block = bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ());
             boolean allowed = false;
 
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index a12b84a0a053e240e620b5547a43d59e19ab6efe..9ea701aab867c948236fd115769e1f796d6e7a8d 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -166,21 +166,21 @@ public class TripWireHookBlock extends Block {
 
             world.setBlock(blockposition1, (BlockState) iblockdata3.setValue(TripWireHookBlock.FACING, enumdirection1), 3);
             this.notifyNeighbors(world, blockposition1, enumdirection1);
-            this.emitState(world, blockposition1, flag4, flag5, flag2, flag3);
+            TripWireHookBlock.emitState(world, blockposition1, flag4, flag5, flag2, flag3);
         }
 
         // CraftBukkit start
         org.bukkit.block.Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
 
         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 15, 0);
-        world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+        Level.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
         if (eventRedstone.getNewCurrent() > 0) {
             return;
         }
         // CraftBukkit end
 
-        this.emitState(world, pos, flag4, flag5, flag2, flag3);
+        TripWireHookBlock.emitState(world, pos, flag4, flag5, flag2, flag3);
         if (!beingRemoved) {
             if (world.getBlockState(pos).getBlock() == Blocks.TRIPWIRE_HOOK) // Paper - validate
             world.setBlock(pos, (BlockState) iblockdata3.setValue(TripWireHookBlock.FACING, enumdirection), 3);
@@ -210,7 +210,7 @@ public class TripWireHookBlock extends Block {
         this.calculateState(world, pos, state, false, true, -1, (BlockState) null);
     }
 
-    private void emitState(Level world, BlockPos pos, boolean attached, boolean on, boolean detached, boolean off) {
+    private static void emitState(Level world, BlockPos pos, boolean attached, boolean on, boolean detached, boolean off) {
         if (on && !off) {
             world.playSound((Player) null, pos, SoundEvents.TRIPWIRE_CLICK_ON, SoundSource.BLOCKS, 0.4F, 0.6F);
             world.gameEvent((Entity) null, GameEvent.BLOCK_ACTIVATE, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index da34ae0ac7d8ba4c15cdc75e2ef012867eb82893..5b33f19e089af781aba44af4c3fc30e8025e78e3 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -68,7 +68,7 @@ public class TurtleEggBlock extends Block {
     }
 
     private void destroyEgg(Level world, BlockState state, BlockPos pos, Entity entity, int inverseChance) {
-        if (this.canDestroyEgg(world, entity)) {
+        if (TurtleEggBlock.canDestroyEgg(world, entity)) {
             if (!world.isClientSide && world.random.nextInt(inverseChance) == 0 && state.is(Blocks.TURTLE_EGG)) {
                 // CraftBukkit start - Step on eggs
                 org.bukkit.event.Cancellable cancellable;
@@ -76,20 +76,20 @@ public class TurtleEggBlock extends Block {
                     cancellable = CraftEventFactory.callPlayerInteractEvent((Player) entity, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
                 } else {
                     cancellable = new EntityInteractEvent(entity.getBukkitEntity(), CraftBlock.at(world, pos));
-                    world.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
+                    Level.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
                 }
 
                 if (cancellable.isCancelled()) {
                     return;
                 }
                 // CraftBukkit end
-                this.decreaseEggs(world, pos, state);
+                TurtleEggBlock.decreaseEggs(world, pos, state);
             }
 
         }
     }
 
-    private void decreaseEggs(Level world, BlockPos pos, BlockState state) {
+    private static void decreaseEggs(Level world, BlockPos pos, BlockState state) {
         world.playSound((Player) null, pos, SoundEvents.TURTLE_EGG_BREAK, SoundSource.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
         int i = ((Integer) state.getValue(TurtleEggBlock.EGGS)).intValue();
 
@@ -105,7 +105,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (this.shouldUpdateHatchLevel(world) && TurtleEggBlock.onSand(world, pos)) {
+        if (TurtleEggBlock.shouldUpdateHatchLevel(world) && TurtleEggBlock.onSand(world, pos)) {
             int i = ((Integer) state.getValue(TurtleEggBlock.HATCH)).intValue();
 
             if (i < 2) {
@@ -155,7 +155,7 @@ public class TurtleEggBlock extends Block {
 
     }
 
-    private boolean shouldUpdateHatchLevel(Level world) {
+    private static boolean shouldUpdateHatchLevel(Level world) {
         float f = world.getTimeOfDay(1.0F);
 
         return (double) f < 0.69D && (double) f > 0.65D ? true : world.random.nextInt(500) == 0;
@@ -164,7 +164,7 @@ public class TurtleEggBlock extends Block {
     @Override
     public void playerDestroy(Level world, Player player, BlockPos pos, BlockState state, @Nullable BlockEntity blockEntity, ItemStack stack) {
         super.playerDestroy(world, player, pos, state, blockEntity, stack);
-        this.decreaseEggs(world, pos, state);
+        TurtleEggBlock.decreaseEggs(world, pos, state);
     }
 
     @Override
@@ -190,7 +190,7 @@ public class TurtleEggBlock extends Block {
         builder.add(TurtleEggBlock.HATCH, TurtleEggBlock.EGGS);
     }
 
-    private boolean canDestroyEgg(Level world, Entity entity) {
+    private static boolean canDestroyEgg(Level world, Entity entity) {
         return !(entity instanceof Turtle) && !(entity instanceof Bat) ? (!(entity instanceof LivingEntity) ? false : entity instanceof Player || world.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) : false;
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index 0ea721b8fc71182b7da0bdc7fcfc1009d972a1ce..f3d90c70fd3feefbf8609ffa0098f577a16200a0 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -90,10 +90,10 @@ public class VineBlock extends Block {
     }
 
     private boolean hasFaces(BlockState state) {
-        return this.countFaces(state) > 0;
+        return VineBlock.countFaces(state) > 0;
     }
 
-    private int countFaces(BlockState state) {
+    private static int countFaces(BlockState state) {
         int i = 0;
         Iterator iterator = VineBlock.PROPERTY_BY_DIRECTION.values().iterator();
 
@@ -241,7 +241,7 @@ public class VineBlock extends Block {
                             }
                         }
 
-                        if (this.hasHorizontalConnection(iblockdata2)) {
+                        if (VineBlock.hasHorizontalConnection(iblockdata2)) {
                             CraftEventFactory.handleBlockSpreadEvent(world, pos, blockposition1, iblockdata2, 2); // CraftBukkit
                         }
 
@@ -254,9 +254,9 @@ public class VineBlock extends Block {
                     iblockdata1 = world.getBlockState(blockposition2);
                     if (iblockdata1.isAir() || iblockdata1.is((Block) this)) {
                         BlockState iblockdata3 = iblockdata1.isAir() ? this.defaultBlockState() : iblockdata1;
-                        BlockState iblockdata4 = this.copyRandomFaces(state, iblockdata3, random);
+                        BlockState iblockdata4 = VineBlock.copyRandomFaces(state, iblockdata3, random);
 
-                        if (iblockdata3 != iblockdata4 && this.hasHorizontalConnection(iblockdata4)) {
+                        if (iblockdata3 != iblockdata4 && VineBlock.hasHorizontalConnection(iblockdata4)) {
                             CraftEventFactory.handleBlockSpreadEvent(world, pos, blockposition2, iblockdata4, 2); // CraftBukkit
                         }
                     }
@@ -266,7 +266,7 @@ public class VineBlock extends Block {
         }
     }
 
-    private BlockState copyRandomFaces(BlockState above, BlockState state, RandomSource random) {
+    private static BlockState copyRandomFaces(BlockState above, BlockState state, RandomSource random) {
         Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
         while (iterator.hasNext()) {
@@ -284,7 +284,7 @@ public class VineBlock extends Block {
         return state;
     }
 
-    private boolean hasHorizontalConnection(BlockState state) {
+    private static boolean hasHorizontalConnection(BlockState state) {
         return ((Boolean) state.getValue(VineBlock.NORTH)).booleanValue() || ((Boolean) state.getValue(VineBlock.EAST)).booleanValue() || ((Boolean) state.getValue(VineBlock.SOUTH)).booleanValue() || ((Boolean) state.getValue(VineBlock.WEST)).booleanValue();
     }
 
@@ -312,7 +312,7 @@ public class VineBlock extends Block {
     public boolean canBeReplaced(BlockState state, BlockPlaceContext context) {
         BlockState iblockdata1 = context.getLevel().getBlockState(context.getClickedPos());
 
-        return iblockdata1.is((Block) this) ? this.countFaces(iblockdata1) < VineBlock.PROPERTY_BY_DIRECTION.size() : super.canBeReplaced(state, context);
+        return iblockdata1.is((Block) this) ? VineBlock.countFaces(iblockdata1) < VineBlock.PROPERTY_BY_DIRECTION.size() : super.canBeReplaced(state, context);
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
index 0d8c8a1c85384cf39e6d9efcfd60f416585ba849..784ea24e3f09ac1204de910b42552fa96b2af294 100644
--- a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
@@ -42,7 +42,7 @@ public class WeightedPressurePlateBlock extends BasePressurePlateBlock {
                 cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((Player) entity, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
             } else {
                 cancellable = new EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
-                world.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
+                Level.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
             }
 
             // We only want to block turning the plate on if all events are cancelled
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 50efee298ba4733295b2bf47997df8dc88dd433b..0f4ab3264580ec50137929cf8a2ea50c0c63d55b 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -352,7 +352,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                 CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
 
                 FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at(world, pos), fuel, blockEntity.getBurnDuration(itemstack));
-                world.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
+                Level.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
 
                 if (furnaceBurnEvent.isCancelled()) {
                     return;
@@ -383,7 +383,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                     CookingRecipe<?> recipe = (CookingRecipe<?>) irecipe.toBukkitRecipe();
 
                     FurnaceStartSmeltEvent event = new FurnaceStartSmeltEvent(CraftBlock.at(world, pos), source, recipe, AbstractFurnaceBlockEntity.getTotalCookTime(world, blockEntity.recipeType, blockEntity, blockEntity.cookSpeedMultiplier)); // Paper - cook speed multiplier API
-                    world.getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     blockEntity.cookingTotalTime = event.getTotalCookTime();
                 }
@@ -443,7 +443,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
 
             FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(CraftBlock.at(world, blockposition), source, result, (org.bukkit.inventory.CookingRecipe<?>) irecipe.toBukkitRecipe()); // Paper
-            world.getCraftServer().getPluginManager().callEvent(furnaceSmeltEvent);
+            Level.getCraftServer().getPluginManager().callEvent(furnaceSmeltEvent);
 
             if (furnaceSmeltEvent.isCancelled()) {
                 return false;
@@ -660,7 +660,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         } else {
             event = new BlockExpEvent(CraftBlock.at(worldserver, blockposition), j);
         }
-        worldserver.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         j = event.getExpToDrop();
         // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index cdd9869424dff821191a374be6c16509dcf32a01..eab849b80e1893cd8bb772876a85fd858a2bcf30 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -21,7 +21,6 @@ import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
 import org.bukkit.inventory.InventoryHolder;
 // CraftBukkit end
 
-import org.spigotmc.CustomTimingsHandler; // Spigot
 import co.aikar.timings.MinecraftTimings; // Paper
 import co.aikar.timings.Timing; // Paper
 
@@ -257,7 +256,7 @@ public abstract class BlockEntity {
     }
     // CraftBukkit end
     // Paper start
-    public CompoundTag sanitizeSentNbt(CompoundTag tag) {
+    public static CompoundTag sanitizeSentNbt(CompoundTag tag) {
         tag.remove("PublicBukkitValues");
 
         return tag;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index 6c17d2fcd82f36216c932b7af05d4be6d5b12f49..a03f04e711a9c0a2e371c7dab0db7561de8626c0 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -152,7 +152,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         if (blockEntity.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
             // CraftBukkit start
             BrewingStandFuelEvent event = new BrewingStandFuelEvent(CraftBlock.at(world, pos), CraftItemStack.asCraftMirror(itemstack), 20);
-            world.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
                 return;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index 6060a582417e829e9d8890be7b2349f4df0d1519..8f45ec476b0a8e9a80f0fffcabe9f3d82be5e2a8 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -13,7 +13,6 @@ import net.minecraft.util.RandomSource;
 import net.minecraft.world.Clearable;
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
-import net.minecraft.world.Containers;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.item.ItemStack;
@@ -75,7 +74,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
                     org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
 
                     BlockCookEvent blockCookEvent = new BlockCookEvent(CraftBlock.at(world, pos), source, result, (org.bukkit.inventory.CookingRecipe<?>) recipe.map(CampfireCookingRecipe::toBukkitRecipe).orElse(null)); // Paper
-                    world.getCraftServer().getPluginManager().callEvent(blockCookEvent);
+                    Level.getCraftServer().getPluginManager().callEvent(blockCookEvent);
 
                     if (blockCookEvent.isCancelled()) {
                         return;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 3e1e7fa63edf7d672454360f7b71ed9b0d47496f..3da636a694bec80a861902a6cd5fccc83db2351f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -532,7 +532,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         boolean flag = false;
         // CraftBukkit start
         InventoryPickupItemEvent event = new InventoryPickupItemEvent(getInventory(inventory), (org.bukkit.entity.Item) itemEntity.getBukkitEntity()); // Paper - use getInventory() to avoid snapshot creation
-        itemEntity.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         if (event.isCancelled()) {
             return false;
         }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
index def4fdd2c7e4f925fa128692a744e5d10ae0203a..25586e5b4885f13892f1ee5d640b56a83c1a7821 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
@@ -117,7 +117,7 @@ public class SignBlockEntity extends BlockEntity implements CommandSource { // C
     }
 
     private Component loadLine(String json) {
-        Component ichatbasecomponent = this.deserializeTextSafe(json);
+        Component ichatbasecomponent = SignBlockEntity.deserializeTextSafe(json);
 
         if (this.level instanceof ServerLevel) {
             try {
@@ -130,7 +130,7 @@ public class SignBlockEntity extends BlockEntity implements CommandSource { // C
         return ichatbasecomponent;
     }
 
-    private Component deserializeTextSafe(String json) {
+    private static Component deserializeTextSafe(String json) {
         try {
             MutableComponent ichatmutablecomponent = Component.Serializer.fromJson(json);
 
diff --git a/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java b/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java
index b36ee37cd60dd571b15eb86be7cca0c3d3f2cb4c..3d31ca530fdaa0c06e33237e25b246c95233831e 100644
--- a/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java
+++ b/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java
@@ -25,12 +25,12 @@ public abstract class AbstractTreeGrower {
     protected abstract @org.jetbrains.annotations.Nullable Holder<? extends ConfiguredFeature<?, ?>> getConfiguredFeature(RandomSource random, boolean bees);
 
     public boolean growTree(ServerLevel world, ChunkGenerator chunkGenerator, BlockPos pos, BlockState state, RandomSource random) {
-        Holder<? extends ConfiguredFeature<?, ?>> holder = this.getConfiguredFeature(random, this.hasFlowers(world, pos));
+        Holder<? extends ConfiguredFeature<?, ?>> holder = this.getConfiguredFeature(random, AbstractTreeGrower.hasFlowers(world, pos));
 
         if (holder == null) {
             return false;
         } else {
-            this.setTreeType(holder); // CraftBukkit
+            AbstractTreeGrower.setTreeType(holder); // CraftBukkit
             ConfiguredFeature<?, ?> worldgenfeatureconfigured = (ConfiguredFeature) holder.value();
             BlockState iblockdata1 = world.getFluidState(pos).createLegacyBlock();
 
@@ -48,7 +48,7 @@ public abstract class AbstractTreeGrower {
         }
     }
 
-    private boolean hasFlowers(LevelAccessor world, BlockPos pos) {
+    private static boolean hasFlowers(LevelAccessor world, BlockPos pos) {
         Iterator iterator = BlockPos.MutableBlockPos.betweenClosed(pos.below().north(2).west(2), pos.above().south(2).east(2)).iterator();
 
         BlockPos blockposition1;
@@ -65,7 +65,7 @@ public abstract class AbstractTreeGrower {
     }
 
     // CraftBukkit start
-    protected void setTreeType(Holder<? extends ConfiguredFeature<?, ?>> worldgentreeabstract) {
+    protected static void setTreeType(Holder<? extends ConfiguredFeature<?, ?>> worldgentreeabstract) {
         if (worldgentreeabstract == TreeFeatures.OAK || worldgentreeabstract == TreeFeatures.OAK_BEES_005) {
             SaplingBlock.treeType = TreeType.TREE;
         } else if (worldgentreeabstract == TreeFeatures.HUGE_RED_MUSHROOM) {
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index 61187e52e4d5226f6ce546012e9bfe46a53619d3..743e4b7f83296cf2cf4dfae1ea10432dc51b5ad4 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -38,7 +38,6 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 // CraftBukkit start
-import com.google.common.collect.ImmutableList;
 import java.util.AbstractList;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.event.block.BlockPistonRetractEvent;
@@ -122,7 +121,7 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     private void checkIfExtend(Level world, BlockPos pos, BlockState state) {
         Direction enumdirection = (Direction) state.getValue(PistonBaseBlock.FACING);
-        boolean flag = this.getNeighborSignal(world, pos, enumdirection);
+        boolean flag = PistonBaseBlock.getNeighborSignal(world, pos, enumdirection);
 
         if (flag && !((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue()) {
             if ((new PistonStructureResolver(world, pos, enumdirection, true)).resolve()) {
@@ -162,7 +161,7 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     }
 
-    private boolean getNeighborSignal(Level world, BlockPos pos, Direction pistonFace) {
+    private static boolean getNeighborSignal(Level world, BlockPos pos, Direction pistonFace) {
         Direction[] aenumdirection = Direction.values();
         int i = aenumdirection.length;
 
@@ -207,7 +206,7 @@ public class PistonBaseBlock extends DirectionalBlock {
         // Paper end - prevent retracting when we're facing the wrong way
 
         if (!world.isClientSide) {
-            boolean flag = this.getNeighborSignal(world, pos, enumdirection);
+            boolean flag = PistonBaseBlock.getNeighborSignal(world, pos, enumdirection);
 
             if (flag && (type == 1 || type == 2)) {
                 world.setBlock(pos, (BlockState) state.setValue(PistonBaseBlock.EXTENDED, Boolean.TRUE), 2);
@@ -390,7 +389,7 @@ public class PistonBaseBlock extends DirectionalBlock {
             } else {
                 event = new BlockPistonRetractEvent(bblock, blocks, CraftBlock.notchToBlockFace(enumdirection1));
             }
-            world.getCraftServer().getPluginManager().callEvent(event);
+            Level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
                 for (BlockPos b : broken) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index 50920625cf995a7a217653dfa8f2ed12e6fd0e26..981f47ff794f28bd10ee6036a5d527ac604b7e17 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -330,7 +330,7 @@ public abstract class BlockBehaviour {
 
     /** @deprecated */
     @Deprecated
-    public boolean isOcclusionShapeFullBlock(BlockState state, BlockGetter world, BlockPos pos) {
+    public static boolean isOcclusionShapeFullBlock(BlockState state, BlockGetter world, BlockPos pos) {
         return Block.isShapeFullBlock(state.getOcclusionShape(world, pos));
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index 340d0648fcf9b9749c4daa1c25a226b947707c3d..3d1469e380bdd64e58da32d9e10c9a2ae23a6238 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -31,7 +31,7 @@ public abstract class StateHolder<O, S> {
             }
         }
 
-        private <T extends Comparable<T>> String getName(Property<T> property, Comparable<?> value) {
+        private static <T extends Comparable<T>> String getName(Property<T> property, Comparable<?> value) {
             return property.getName((T)value);
         }
     };
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index 16a32d472b97cc0272e3b2436dd200e8b97d0b6c..7c098b83f1a6a44c81bdeb8067c3341170acd9d5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -494,7 +494,7 @@ public abstract class ChunkGenerator {
 
                     ChunkAccess ichunkaccess = world.getChunk(pos.x, pos.z, ChunkStatus.STRUCTURE_STARTS);
 
-                    structurestart = structureAccessor.getStartForStructure(SectionPos.bottomOf(ichunkaccess), (Structure) holder.value(), ichunkaccess);
+                    structurestart = StructureManager.getStartForStructure(SectionPos.bottomOf(ichunkaccess), (Structure) holder.value(), ichunkaccess);
                 } while (structurestart == null);
             } while (!structurestart.isValid());
         } while (skipReferencedStructures && !ChunkGenerator.tryAddReference(structureAccessor, structurestart));
@@ -735,7 +735,7 @@ public abstract class ChunkGenerator {
             if (structurespawnoverride != null) {
                 MutableBoolean mutableboolean = new MutableBoolean(false);
                 Predicate<StructureStart> predicate = structurespawnoverride.boundingBox() == StructureSpawnOverride.BoundingBoxType.PIECE ? (structurestart) -> {
-                    return accessor.structureHasPieceAt(pos, structurestart);
+                    return StructureManager.structureHasPieceAt(pos, structurestart);
                 } : (structurestart) -> {
                     return structurestart.getBoundingBox().isInside(pos);
                 };
@@ -768,7 +768,7 @@ public abstract class ChunkGenerator {
 
             while (iterator.hasNext()) {
                 StructureSet.StructureSelectionEntry structureset_a = (StructureSet.StructureSelectionEntry) iterator.next();
-                StructureStart structurestart = structureAccessor.getStartForStructure(sectionposition, (Structure) structureset_a.structure().value(), chunk);
+                StructureStart structurestart = StructureManager.getStartForStructure(sectionposition, (Structure) structureset_a.structure().value(), chunk);
 
                 if (structurestart != null && structurestart.isValid()) {
                     return;
@@ -836,7 +836,7 @@ public abstract class ChunkGenerator {
         StructureStart structurestart = structure.generate(dynamicRegistryManager, this, this.biomeSource, noiseConfig, structureManager, seed, pos, j, chunk, predicate);
 
         if (structurestart.isValid()) {
-            structureAccessor.setStartForStructure(sectionPos, structure, structurestart, chunk);
+            StructureManager.setStartForStructure(sectionPos, structure, structurestart, chunk);
             return true;
         } else {
             return false;
@@ -844,12 +844,12 @@ public abstract class ChunkGenerator {
     }
 
     private static int fetchReferences(StructureManager structureAccessor, ChunkAccess chunk, SectionPos sectionPos, Structure structure) {
-        StructureStart structurestart = structureAccessor.getStartForStructure(sectionPos, structure, chunk);
+        StructureStart structurestart = StructureManager.getStartForStructure(sectionPos, structure, chunk);
 
         return structurestart != null ? structurestart.getReferences() : 0;
     }
 
-    public void createReferences(WorldGenLevel world, StructureManager structureAccessor, ChunkAccess chunk) {
+    public static void createReferences(WorldGenLevel world, StructureManager structureAccessor, ChunkAccess chunk) {
         boolean flag = true;
         ChunkPos chunkcoordintpair = chunk.getPos();
         int i = chunkcoordintpair.x;
@@ -868,7 +868,7 @@ public abstract class ChunkGenerator {
 
                     try {
                         if (structurestart.isValid() && structurestart.getBoundingBox().intersects(k, l, k + 15, l + 15)) {
-                            structureAccessor.addReferenceForStructure(sectionposition, structurestart.getStructure(), k1, chunk);
+                            StructureManager.addReferenceForStructure(sectionposition, structurestart.getStructure(), k1, chunk);
                             DebugPackets.sendStructurePacket(world, structurestart);
                         }
                     } catch (Exception exception) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index 00cb9dafc711607f28529ea9afbcdb492b1b2595..7549e0750f1d63abbb467ebf673b564a979f19ff 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -101,7 +101,7 @@ public class ChunkStatus {
     public static final ChunkStatus STRUCTURE_REFERENCES = ChunkStatus.registerSimple("structure_references", ChunkStatus.STRUCTURE_STARTS, 8, ChunkStatus.PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkstatus, worldserver, chunkgenerator, list, ichunkaccess) -> {
         WorldGenRegion regionlimitedworldaccess = new WorldGenRegion(worldserver, list, chunkstatus, -1);
 
-        chunkgenerator.createReferences(regionlimitedworldaccess, worldserver.structureManager().forWorldGenRegion(regionlimitedworldaccess), ichunkaccess);
+        ChunkGenerator.createReferences(regionlimitedworldaccess, worldserver.structureManager().forWorldGenRegion(regionlimitedworldaccess), ichunkaccess);
     });
     public static final ChunkStatus BIOMES = ChunkStatus.register("biomes", ChunkStatus.STRUCTURE_REFERENCES, 8, ChunkStatus.PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkstatus, executor, worldserver, chunkgenerator, structuretemplatemanager, lightenginethreaded, function, list, ichunkaccess, flag) -> {
         if (!flag && ichunkaccess.getStatus().isOrAfter(chunkstatus)) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/ImposterProtoChunk.java b/src/main/java/net/minecraft/world/level/chunk/ImposterProtoChunk.java
index 8ffc206a858864d277ff94de7c66ffdb07d8f491..5df981236099c75929d7daee9fa4bc67f1aa2c97 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ImposterProtoChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ImposterProtoChunk.java
@@ -150,7 +150,7 @@ public class ImposterProtoChunk extends ProtoChunk {
     public void setHeightmap(Heightmap.Types type, long[] heightmap) {
     }
 
-    private Heightmap.Types fixType(Heightmap.Types type) {
+    private static Heightmap.Types fixType(Heightmap.Types type) {
         if (type == Heightmap.Types.WORLD_SURFACE_WG) {
             return Heightmap.Types.WORLD_SURFACE;
         } else {
@@ -165,7 +165,7 @@ public class ImposterProtoChunk extends ProtoChunk {
 
     @Override
     public int getHeight(Heightmap.Types type, int x, int z) {
-        return this.wrapped.getHeight(this.fixType(type), x, z);
+        return this.wrapped.getHeight(ImposterProtoChunk.fixType(type), x, z);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index d5faef554e6e7e133d8117c1b5f37dee367b816c..0a72bc2bab436eab8606c9bbccd747a08eba41cc 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -904,7 +904,7 @@ public class LevelChunk extends ChunkAccess {
         // Paper - rewrite chunk system - move into separate callback
         this.loadedTicketLevel = true;
         // Paper - rewrite chunk system - move into separate callback
-        org.bukkit.Server server = this.level.getCraftServer();
+        org.bukkit.Server server = Level.getCraftServer();
         // Paper - rewrite chunk system - move into separate callback
         ((ServerLevel)this.level).getChunkSource().chunkMap.playerChunkManager.onChunkLoad(this.chunkPos.x, this.chunkPos.z); // Paper - rewrite player chunk management
         if (server != null) {
@@ -944,7 +944,7 @@ public class LevelChunk extends ChunkAccess {
 
     public void unloadCallback() {
         if (!this.loadedTicketLevel) { LOGGER.error("Double calling chunk unload!", new Throwable()); } // Paper
-        org.bukkit.Server server = this.level.getCraftServer();
+        org.bukkit.Server server = Level.getCraftServer();
         this.chunkHolder.getEntityChunk().callEntitiesUnloadEvent(); // Paper - rewrite chunk system
         org.bukkit.event.world.ChunkUnloadEvent unloadEvent = new org.bukkit.event.world.ChunkUnloadEvent(this.bukkitChunk, this.isUnsaved());
         server.getPluginManager().callEvent(unloadEvent);
@@ -1299,7 +1299,7 @@ public class LevelChunk extends ChunkAccess {
                         // Paper start - Prevent tile entity and entity crashes
                         final String msg = String.format("BlockEntity threw exception at %s:%s,%s,%s", LevelChunk.this.getLevel().getWorld().getName(), Integer.valueOf(this.getPos().getX()), Integer.valueOf(this.getPos().getY()), Integer.valueOf(this.getPos().getZ()));
                         net.minecraft.server.MinecraftServer.LOGGER.error(msg, throwable);
-                        net.minecraft.world.level.chunk.LevelChunk.this.level.getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new ServerInternalException(msg, throwable)));
+                        Level.getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new ServerInternalException(msg, throwable)));
                         LevelChunk.this.removeBlockEntity(this.getPos());
                         // Paper end
                         // Spigot start
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java
index 65136b6d4661fad4f81a1517e434e059669a7bd4..311f8d2e9f3d9f59acee085cc35889287f1a8fb3 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java
@@ -10,11 +10,9 @@ import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.NbtUtils;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.chunk.ChunkGenerator;
@@ -45,7 +43,7 @@ public class ChunkStorage implements AutoCloseable {
         // Paper end - async chunk io
     }
 
-    public boolean isOldChunkAround(ChunkPos chunkPos, int checkRadius) {
+    public static boolean isOldChunkAround(ChunkPos chunkPos, int checkRadius) {
         return true; // Paper - (for now, old unoptimised behavior) TODO implement later? the chunk status that blender uses SHOULD already have this radius loaded, no need to go back for it...
     }
 
@@ -196,7 +194,7 @@ public class ChunkStorage implements AutoCloseable {
 
     }
 
-    public void flushWorker() {
+    public static void flushWorker() {
         io.papermc.paper.chunk.system.io.RegionFileIOThread.flush(); // Paper - rewrite chunk system
     }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
index 7cdfef679d94b08e3558776ab72187625892c3b1..c83818bc871ba918844c98dacce8d3ace21717fc 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
@@ -312,7 +312,7 @@ public class RegionFile implements AutoCloseable {
                     int sectorLength = 1;
 
                     try {
-                        this.file.write(this.createExternalStub(oversizedCompressionTypes[location]), sectorOffset * 4096);
+                        this.file.write(RegionFile.createExternalStub(oversizedCompressionTypes[location]), sectorOffset * 4096);
                         // only allocate in the new offsets if the write succeeds
                         calculatedOffsets[location] = sectorOffset << 8 | (sectorLength > 255 ? 255 : sectorLength); // support forge style oversized
                     } catch (IOException ex) {
@@ -661,7 +661,7 @@ public class RegionFile implements AutoCloseable {
                         return null;
                     } else {
                         // Paper start - recalculate header on regionfile corruption
-                        final DataInputStream ret = this.createChunkInputStream(pos, b0, RegionFile.createStream(bytebuffer, j1));
+                        final DataInputStream ret = RegionFile.createChunkInputStream(pos, b0, RegionFile.createStream(bytebuffer, j1));
                         if (ret == null && this.canRecalcHeader && this.recalculateHeader()) {
                             return this.getChunkDataInputStream(pos);
                         }
@@ -686,7 +686,7 @@ public class RegionFile implements AutoCloseable {
     }
 
     @Nullable
-    private DataInputStream createChunkInputStream(ChunkPos chunkcoordintpair, byte b0, InputStream inputstream) throws IOException {
+    private static DataInputStream createChunkInputStream(ChunkPos chunkcoordintpair, byte b0, InputStream inputstream) throws IOException {
         RegionFileVersion regionfilecompression = RegionFileVersion.fromId(b0);
 
         if (regionfilecompression == null) {
@@ -705,7 +705,7 @@ public class RegionFile implements AutoCloseable {
             RegionFile.LOGGER.error("External chunk path {} is not file", path);
             return null;
         } else {
-            return this.createChunkInputStream(chunkcoordintpair, b0, Files.newInputStream(path));
+            return RegionFile.createChunkInputStream(chunkcoordintpair, b0, Files.newInputStream(path));
         }
     }
 
@@ -713,7 +713,7 @@ public class RegionFile implements AutoCloseable {
         return new ByteArrayInputStream(buffer.array(), buffer.position(), length);
     }
 
-    private int packSectorOffset(int offset, int size) {
+    private static int packSectorOffset(int offset, int size) {
         return offset << 8 | size;
     }
 
@@ -830,7 +830,7 @@ public class RegionFile implements AutoCloseable {
             this.file.write(bytebuffer, (long) (k1 * 4096));
         }
 
-        this.offsets.put(i, this.packSectorOffset(k1, j1));
+        this.offsets.put(i, RegionFile.packSectorOffset(k1, j1));
         this.timestamps.put(i, RegionFile.getTimestamp());
         this.writeHeader();
         regionfile_b.run();
@@ -842,9 +842,9 @@ public class RegionFile implements AutoCloseable {
 
     private ByteBuffer createExternalStub() {
         // Paper start - add version param
-        return this.createExternalStub(this.version);
+        return RegionFile.createExternalStub(this.version);
     }
-    private ByteBuffer createExternalStub(RegionFileVersion version) {
+    private static ByteBuffer createExternalStub(RegionFileVersion version) {
         // Paper end - add version param
         ByteBuffer bytebuffer = ByteBuffer.allocate(5);
 
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index 703691de4250c5607e40910b7648b3e523172aa4..a9bc7fe10322a04fff820c65dd60858cf681ce62 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -281,7 +281,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     private boolean processChunkUnload(long chunkPos) {
         org.spigotmc.AsyncCatcher.catchOp("Entity chunk unload process"); // Paper
         boolean flag = this.storeChunkSections(chunkPos, (entityaccess) -> {
-            entityaccess.getPassengersAndSelf().forEach(this::unloadEntity);
+            entityaccess.getPassengersAndSelf().forEach(PersistentEntitySectionManager::unloadEntity);
         }, true); // CraftBukkit - add boolean for event call
 
         if (!flag) {
@@ -292,7 +292,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         }
     }
 
-    private void unloadEntity(EntityAccess entity) {
+    private static void unloadEntity(EntityAccess entity) {
         entity.setRemoved(Entity.RemovalReason.UNLOADED_TO_CHUNK);
         entity.setLevelCallback(EntityInLevelCallback.NULL);
     }
diff --git a/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java b/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
index 159e414f41787bc998b054fa227928f7bce9a152..48707b90b99fea0d1e0a450735b0d732b942696f 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
@@ -119,7 +119,7 @@ public class VibrationListener implements GameEventListener {
                     Entity entity = gameevent_a.sourceEntity();
                     BlockReceiveGameEvent event1 = new BlockReceiveGameEvent(org.bukkit.GameEvent.getByKey(CraftNamespacedKey.fromMinecraft(Registry.GAME_EVENT.getKey(gameevent))), CraftBlock.at(world, new BlockPos(vec3d1)), (entity == null) ? null : entity.getBukkitEntity());
                     event1.setCancelled(defaultCancel);
-                    world.getCraftServer().getPluginManager().callEvent(event1);
+                    Level.getCraftServer().getPluginManager().callEvent(event1);
                     if (event1.isCancelled()) {
                         // CraftBukkit end
                         return false;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index cf87490a446285132daaf9d90154ac6d477a62fe..c4debaf656b5af37c18314ba32cd34c3f6dd1a2b 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -361,7 +361,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
                                     iblockdata = this.defaultBlock;
                                 }
 
-                                iblockdata = this.debugPreliminarySurfaceLevel(noisechunk, i4, i3, l4, iblockdata);
+                                iblockdata = NoiseBasedChunkGenerator.debugPreliminarySurfaceLevel(noisechunk, i4, i3, l4, iblockdata);
                                 if (iblockdata != NoiseBasedChunkGenerator.AIR && !SharedConstants.debugVoidTerrain(chunk.getPos())) {
                                     if (iblockdata.getLightEmission() != 0 && chunk instanceof ProtoChunk) {
                                         blockposition_mutableblockposition.set(i4, i3, l4);
@@ -389,7 +389,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
         return chunk;
     }
 
-    private BlockState debugPreliminarySurfaceLevel(NoiseChunk chunkNoiseSampler, int x, int y, int z, BlockState state) {
+    private static BlockState debugPreliminarySurfaceLevel(NoiseChunk chunkNoiseSampler, int x, int y, int z, BlockState state) {
         return state;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java b/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java
index a908652f1ebb426d265ef614746f70cd1e538268..9fe50fdf21b739f943abb3f8dfff31478ac1f1ee 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java
@@ -10,7 +10,6 @@ import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.monster.PatrollingMonster;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.CustomSpawner;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.NaturalSpawner;
@@ -104,11 +103,11 @@ public class PatrolSpawner implements CustomSpawner {
                                             ++i1;
                                             blockposition_mutableblockposition.setY(world.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, blockposition_mutableblockposition).getY());
                                             if (k1 == 0) {
-                                                if (!this.spawnPatrolMember(world, blockposition_mutableblockposition, randomsource, true)) {
+                                                if (!PatrolSpawner.spawnPatrolMember(world, blockposition_mutableblockposition, randomsource, true)) {
                                                     break;
                                                 }
                                             } else {
-                                                this.spawnPatrolMember(world, blockposition_mutableblockposition, randomsource, false);
+                                                PatrolSpawner.spawnPatrolMember(world, blockposition_mutableblockposition, randomsource, false);
                                             }
 
                                             blockposition_mutableblockposition.setX(blockposition_mutableblockposition.getX() + randomsource.nextInt(5) - randomsource.nextInt(5));
@@ -128,7 +127,7 @@ public class PatrolSpawner implements CustomSpawner {
         }
     }
 
-    private boolean spawnPatrolMember(ServerLevel world, BlockPos pos, RandomSource random, boolean captain) {
+    private static boolean spawnPatrolMember(ServerLevel world, BlockPos pos, RandomSource random, boolean captain) {
         BlockState iblockdata = world.getBlockState(pos);
 
         if (!NaturalSpawner.isValidEmptySpawnBlock(world, pos, iblockdata, iblockdata.getFluidState(), EntityType.PILLAGER)) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java b/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
index b8649eab719a1b71dc686386a8db756eefb9802e..a0c79835063679e1c2d9f2ece44910c2efe75c8a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/Structure.java
@@ -129,7 +129,7 @@ public abstract class Structure {
 
     /** @deprecated */
     @Deprecated
-    protected BlockPos getLowestYIn5by5BoxOffset7Blocks(Structure.GenerationContext context, Rotation rotation) {
+    protected static BlockPos getLowestYIn5by5BoxOffset7Blocks(Structure.GenerationContext context, Rotation rotation) {
         int i = 5;
         int j = 5;
         if (rotation == Rotation.CLOCKWISE_90) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureCheck.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureCheck.java
index a26a909a678d9e5cb53d53846038b3e3b5657cd9..1417858a1f30b30c2f4c0e4b666feef59acb8814 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureCheck.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureCheck.java
@@ -16,15 +16,12 @@ import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.IntTag;
-import net.minecraft.nbt.NbtUtils;
 import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.visitors.CollectFields;
 import net.minecraft.nbt.visitors.FieldSelector;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeSource;
@@ -72,7 +69,7 @@ public class StructureCheck {
         long l = pos.toLong();
         Object2IntMap<Structure> object2IntMap = this.loadedChunks.get(l);
         if (object2IntMap != null) {
-            return this.checkStructureInfo(object2IntMap, type, skipReferencedStructures);
+            return StructureCheck.checkStructureInfo(object2IntMap, type, skipReferencedStructures);
         } else {
             StructureCheckResult structureCheckResult = this.tryLoadFromStorage(pos, type, skipReferencedStructures, l);
             if (structureCheckResult != null) {
@@ -126,7 +123,7 @@ public class StructureCheck {
                     return null;
                 } else {
                     this.storeFullResults(posLong, object2IntMap);
-                    return this.checkStructureInfo(object2IntMap, structure, skipReferencedStructures);
+                    return StructureCheck.checkStructureInfo(object2IntMap, structure, skipReferencedStructures);
                 }
             }
         }
@@ -175,7 +172,7 @@ public class StructureCheck {
         return map.isEmpty() ? Object2IntMaps.emptyMap() : map;
     }
 
-    private StructureCheckResult checkStructureInfo(Object2IntMap<Structure> referencesByStructure, Structure structure, boolean skipReferencedStructures) {
+    private static StructureCheckResult checkStructureInfo(Object2IntMap<Structure> referencesByStructure, Structure structure, boolean skipReferencedStructures) {
         int i = referencesByStructure.getOrDefault(structure, -1);
         return i == -1 || skipReferencedStructures && i != 0 ? StructureCheckResult.START_NOT_PRESENT : StructureCheckResult.START_PRESENT;
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index 28e373ef4b6f17f898d24d963c247999c0571672..522135c7bc36a0343cd14d788ec56b9d43412b32 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -224,7 +224,7 @@ public class StructureTemplate {
         }
     }
 
-    public BlockPos calculateConnectedPosition(StructurePlaceSettings placementData1, BlockPos pos1, StructurePlaceSettings placementData2, BlockPos pos2) {
+    public static BlockPos calculateConnectedPosition(StructurePlaceSettings placementData1, BlockPos pos1, StructurePlaceSettings placementData2, BlockPos pos2) {
         BlockPos blockposition2 = StructureTemplate.calculateRelativePosition(placementData1, pos1);
         BlockPos blockposition3 = StructureTemplate.calculateRelativePosition(placementData2, pos2);
 
@@ -633,7 +633,7 @@ public class StructureTemplate {
                 StructureTemplate.StructureBlockInfo definedstructure_blockinfo = (StructureTemplate.StructureBlockInfo) list1.get(j);
                 CompoundTag nbttagcompound1 = new CompoundTag();
 
-                nbttagcompound1.put("pos", this.newIntegerList(definedstructure_blockinfo.pos.getX(), definedstructure_blockinfo.pos.getY(), definedstructure_blockinfo.pos.getZ()));
+                nbttagcompound1.put("pos", StructureTemplate.newIntegerList(definedstructure_blockinfo.pos.getX(), definedstructure_blockinfo.pos.getY(), definedstructure_blockinfo.pos.getZ()));
                 int k = definedstructure_b.idFor(definedstructure_blockinfo.state);
 
                 nbttagcompound1.putInt("state", k);
@@ -695,15 +695,15 @@ public class StructureTemplate {
             StructureTemplate.StructureEntityInfo definedstructure_entityinfo = (StructureTemplate.StructureEntityInfo) iterator2.next();
 
             nbttagcompound2 = new CompoundTag();
-            nbttagcompound2.put("pos", this.newDoubleList(definedstructure_entityinfo.pos.x, definedstructure_entityinfo.pos.y, definedstructure_entityinfo.pos.z));
-            nbttagcompound2.put("blockPos", this.newIntegerList(definedstructure_entityinfo.blockPos.getX(), definedstructure_entityinfo.blockPos.getY(), definedstructure_entityinfo.blockPos.getZ()));
+            nbttagcompound2.put("pos", StructureTemplate.newDoubleList(definedstructure_entityinfo.pos.x, definedstructure_entityinfo.pos.y, definedstructure_entityinfo.pos.z));
+            nbttagcompound2.put("blockPos", StructureTemplate.newIntegerList(definedstructure_entityinfo.blockPos.getX(), definedstructure_entityinfo.blockPos.getY(), definedstructure_entityinfo.blockPos.getZ()));
             if (definedstructure_entityinfo.nbt != null) {
                 nbttagcompound2.put("nbt", definedstructure_entityinfo.nbt);
             }
         }
 
         nbt.put("entities", nbttaglist3);
-        nbt.put("size", this.newIntegerList(this.size.getX(), this.size.getY(), this.size.getZ()));
+        nbt.put("size", StructureTemplate.newIntegerList(this.size.getX(), this.size.getY(), this.size.getZ()));
         nbt.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
 
         // CraftBukkit Start - PDC
@@ -793,7 +793,7 @@ public class StructureTemplate {
         this.palettes.add(new StructureTemplate.Palette(list3));
     }
 
-    private ListTag newIntegerList(int... ints) {
+    private static ListTag newIntegerList(int... ints) {
         ListTag nbttaglist = new ListTag();
         int[] aint1 = ints;
         int i = ints.length;
@@ -807,7 +807,7 @@ public class StructureTemplate {
         return nbttaglist;
     }
 
-    private ListTag newDoubleList(double... doubles) {
+    private static ListTag newDoubleList(double... doubles) {
         ListTag nbttaglist = new ListTag();
         double[] adouble1 = doubles;
         int i = doubles.length;
diff --git a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
index 85175b01b1623b3bc66c65805cec26eaead48265..c8bce8e9241040b4fec76eca4ba45503378e36e3 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LayerLightSectionStorage.java
@@ -159,7 +159,7 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
         return dataLayer != null ? dataLayer : new DataLayer();
     }
 
-    protected void clearQueuedSectionBlocks(LayerLightEngine<?, ?> storage, long sectionPos) {
+    protected static void clearQueuedSectionBlocks(LayerLightEngine<?, ?> storage, long sectionPos) {
         if (storage.getQueueSize() != 0) {
             if (storage.getQueueSize() < 8192) {
                 storage.removeIf((mx) -> {
@@ -190,7 +190,7 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
     protected void markNewInconsistencies(LayerLightEngine<M, ?> lightProvider, boolean doSkylight, boolean skipEdgeLightPropagation) {
         if (this.hasInconsistencies() || !this.queuedSections.isEmpty()) {
             for(long l : this.toRemove) {
-                this.clearQueuedSectionBlocks(lightProvider, l);
+                LayerLightSectionStorage.clearQueuedSectionBlocks(lightProvider, l);
                 DataLayer dataLayer = this.queuedSections.remove(l);
                 DataLayer dataLayer2 = this.updatingSectionData.removeLayer(l);
                 if (this.columnsToRetainQueuedDataFor.contains(SectionPos.getZeroNode(l))) {
@@ -216,7 +216,7 @@ public abstract class LayerLightSectionStorage<M extends DataLayerStorageMap<M>>
                 if (this.storingLightForSection(n)) {
                     DataLayer dataLayer3 = entry.getValue();
                     if (this.updatingSectionData.getLayer(n) != dataLayer3) {
-                        this.clearQueuedSectionBlocks(lightProvider, n);
+                        LayerLightSectionStorage.clearQueuedSectionBlocks(lightProvider, n);
                         this.updatingSectionData.setLayer(n, dataLayer3);
                         this.changedSections.add(n);
                     }
diff --git a/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
index e6c857c8b4e4e65e3cf6a75ce6d844ff61acb566..861785feaabf5f980b24fedb49985b68ebbe0bb3 100644
--- a/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.lighting;
 
-import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import java.util.Arrays;
@@ -192,7 +190,7 @@ public class SkyLightSectionStorage extends LayerLightSectionStorage<SkyLightSec
                     int i = this.getLevel(l);
                     if (i != 2 && !this.sectionsToRemoveSourcesFrom.contains(l) && this.sectionsWithSources.add(l)) {
                         if (i == 1) {
-                            this.clearQueuedSectionBlocks(lightProvider, l);
+                            LayerLightSectionStorage.clearQueuedSectionBlocks(lightProvider, l);
                             if (this.changedSections.add(l)) {
                                 this.updatingSectionData.copyDataLayer(l);
                             }
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index bf9c3faa377af89f9d84147373a10f415ffc76f9..14a5ee544faba96d5843e10625044f6cb6e8f37a 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -141,7 +141,7 @@ public abstract class FlowingFluid extends Fluid {
                 // CraftBukkit start
                 org.bukkit.block.Block source = CraftBlock.at(world, fluidPos);
                 BlockFromToEvent event = new BlockFromToEvent(source, BlockFace.DOWN);
-                world.getMinecraftWorld().getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
                     return;
@@ -181,7 +181,7 @@ public abstract class FlowingFluid extends Fluid {
                     // CraftBukkit start
                     org.bukkit.block.Block source = CraftBlock.at(world, pos);
                     BlockFromToEvent event = new BlockFromToEvent(source, org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(enumdirection));
-                    world.getMinecraftWorld().getCraftServer().getPluginManager().callEvent(event);
+                    Level.getCraftServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
                         continue;
@@ -207,7 +207,7 @@ public abstract class FlowingFluid extends Fluid {
             if (iblockdata1 == null) continue; // Paper
             FluidState fluid = iblockdata1.getFluidState();
 
-            if (fluid.getType().isSame(this) && this.canPassThroughWall(enumdirection, world, pos, state, blockposition1, iblockdata1)) {
+            if (fluid.getType().isSame(this) && FlowingFluid.canPassThroughWall(enumdirection, world, pos, state, blockposition1, iblockdata1)) {
                 if (fluid.isSource()) {
                     ++j;
                 }
@@ -229,7 +229,7 @@ public abstract class FlowingFluid extends Fluid {
         BlockState iblockdata3 = world.getBlockState(blockposition2);
         FluidState fluid2 = iblockdata3.getFluidState();
 
-        if (!fluid2.isEmpty() && fluid2.getType().isSame(this) && this.canPassThroughWall(Direction.UP, world, pos, state, blockposition2, iblockdata3)) {
+        if (!fluid2.isEmpty() && fluid2.getType().isSame(this) && FlowingFluid.canPassThroughWall(Direction.UP, world, pos, state, blockposition2, iblockdata3)) {
             return this.getFlowing(8, true);
         } else {
             int k = i - this.getDropOff(world);
@@ -238,7 +238,7 @@ public abstract class FlowingFluid extends Fluid {
         }
     }
 
-    private boolean canPassThroughWall(Direction face, BlockGetter world, BlockPos pos, BlockState state, BlockPos fromPos, BlockState fromState) {
+    private static boolean canPassThroughWall(Direction face, BlockGetter world, BlockPos pos, BlockState state, BlockPos fromPos, BlockState fromState) {
         Object2ByteLinkedOpenHashMap object2bytelinkedopenhashmap;
 
         if (!state.getBlock().hasDynamicShape() && !fromState.getBlock().hasDynamicShape()) {
@@ -364,11 +364,11 @@ public abstract class FlowingFluid extends Fluid {
     }
 
     private boolean isWaterHole(BlockGetter world, Fluid fluid, BlockPos pos, BlockState state, BlockPos fromPos, BlockState fromState) {
-        return !this.canPassThroughWall(Direction.DOWN, world, pos, state, fromPos, fromState) ? false : (fromState.getFluidState().getType().isSame(this) ? true : this.canHoldFluid(world, fromPos, fromState, fluid));
+        return !FlowingFluid.canPassThroughWall(Direction.DOWN, world, pos, state, fromPos, fromState) ? false : (fromState.getFluidState().getType().isSame(this) ? true : FlowingFluid.canHoldFluid(world, fromPos, fromState, fluid));
     }
 
     private boolean canPassThrough(BlockGetter world, Fluid fluid, BlockPos pos, BlockState state, Direction face, BlockPos fromPos, BlockState fromState, FluidState fluidState) {
-        return !this.isSourceBlockOfThisType(fluidState) && this.canPassThroughWall(face, world, pos, state, fromPos, fromState) && this.canHoldFluid(world, fromPos, fromState, fluid);
+        return !this.isSourceBlockOfThisType(fluidState) && FlowingFluid.canPassThroughWall(face, world, pos, state, fromPos, fromState) && FlowingFluid.canHoldFluid(world, fromPos, fromState, fluid);
     }
 
     private boolean isSourceBlockOfThisType(FluidState state) {
@@ -448,7 +448,7 @@ public abstract class FlowingFluid extends Fluid {
         return map;
     }
 
-    private boolean canHoldFluid(BlockGetter world, BlockPos pos, BlockState state, Fluid fluid) {
+    private static boolean canHoldFluid(BlockGetter world, BlockPos pos, BlockState state, Fluid fluid) {
         Block block = state.getBlock();
 
         if (block instanceof LiquidBlockContainer) {
@@ -463,7 +463,7 @@ public abstract class FlowingFluid extends Fluid {
     }
 
     protected boolean canSpreadTo(BlockGetter world, BlockPos fluidPos, BlockState fluidBlockState, Direction flowDirection, BlockPos flowTo, BlockState flowToBlockState, FluidState fluidState, Fluid fluid) {
-        return fluidState.canBeReplacedWith(world, flowTo, fluid, flowDirection) && this.canPassThroughWall(flowDirection, world, fluidPos, fluidBlockState, flowTo, flowToBlockState) && this.canHoldFluid(world, flowTo, flowToBlockState, fluid);
+        return fluidState.canBeReplacedWith(world, flowTo, fluid, flowDirection) && FlowingFluid.canPassThroughWall(flowDirection, world, fluidPos, fluidBlockState, flowTo, flowToBlockState) && FlowingFluid.canHoldFluid(world, flowTo, flowToBlockState, fluid);
     }
 
     protected abstract int getDropOff(LevelReader world);
diff --git a/src/main/java/net/minecraft/world/level/material/LavaFluid.java b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
index d20c02d63a597dac6d2aacc03478e7dd01f44899..eaeb6c1b0781d469c632129386d31f91b492eced 100644
--- a/src/main/java/net/minecraft/world/level/material/LavaFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
@@ -106,7 +106,7 @@ public abstract class LavaFluid extends FlowingFluid {
                         return;
                     }
 
-                    if (world.isEmptyBlock(blockposition2.above()) && this.isFlammable(world, blockposition2)) {
+                    if (world.isEmptyBlock(blockposition2.above()) && LavaFluid.isFlammable(world, blockposition2)) {
                         // CraftBukkit start - Prevent lava putting something on fire
                         BlockPos up = blockposition2.above();
                         if (world.getBlockState(up).getBlock() != Blocks.FIRE) {
@@ -130,7 +130,7 @@ public abstract class LavaFluid extends FlowingFluid {
         for (int j = 0; j < i; ++j) {
             Direction enumdirection = aenumdirection[j];
 
-            if (this.isFlammable(world, pos.relative(enumdirection))) {
+            if (LavaFluid.isFlammable(world, pos.relative(enumdirection))) {
                 return true;
             }
         }
@@ -138,7 +138,7 @@ public abstract class LavaFluid extends FlowingFluid {
         return false;
     }
 
-    private boolean isFlammable(LevelReader world, BlockPos pos) {
+    private static boolean isFlammable(LevelReader world, BlockPos pos) {
         return pos.getY() >= world.getMinBuildHeight() && pos.getY() < world.getMaxBuildHeight() && !world.hasChunkAt(pos) ? false : world.getBlockState(pos).getMaterial().isFlammable();
     }
 
@@ -150,7 +150,7 @@ public abstract class LavaFluid extends FlowingFluid {
 
     @Override
     protected void beforeDestroyingBlock(LevelAccessor world, BlockPos pos, BlockState state) {
-        this.fizz(world, pos);
+        LavaFluid.fizz(world, pos);
     }
 
     @Override
@@ -194,7 +194,7 @@ public abstract class LavaFluid extends FlowingFluid {
         return i;
     }
 
-    private void fizz(LevelAccessor world, BlockPos pos) {
+    private static void fizz(LevelAccessor world, BlockPos pos) {
         world.levelEvent(1501, pos, 0);
     }
 
@@ -217,7 +217,7 @@ public abstract class LavaFluid extends FlowingFluid {
                     // CraftBukkit end
                 }
 
-                this.fizz(world, pos);
+                LavaFluid.fizz(world, pos);
                 return;
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java b/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
index d23481453717f715124156b5d83f6448f720d049..c2999312cfa8549167a0b9dfe265e468e019d858 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathFinder.java
@@ -1,15 +1,11 @@
 package net.minecraft.world.level.pathfinder;
 
-import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
+
 import java.util.Comparator;
 import java.util.List;
 import java.util.Map;
-import java.util.Optional;
 import java.util.Set;
-import java.util.function.Function;
-import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.util.profiling.ProfilerFiller;
@@ -57,7 +53,7 @@ public class PathFinder {
         profiler.markForCharting(MetricCategory.PATH_FINDING);
         // Set<Target> set = positions.keySet();
         startNode.g = 0.0F;
-        startNode.h = this.getBestH(startNode, positions); // Paper - optimize collection
+        startNode.h = PathFinder.getBestH(startNode, positions); // Paper - optimize collection
         startNode.f = startNode.h;
         this.openSet.clear();
         this.openSet.insert(startNode);
@@ -101,7 +97,7 @@ public class PathFinder {
                     if (node2.walkedDistance < followRange && (!node2.inOpenSet() || g < node2.g)) {
                         node2.cameFrom = node;
                         node2.g = g;
-                        node2.h = this.getBestH(node2, positions) * 1.5F; // Paper - list instead of set
+                        node2.h = PathFinder.getBestH(node2, positions) * 1.5F; // Paper - list instead of set
                         if (node2.inOpenSet()) {
                             this.openSet.changeCost(node2, node2.g + node2.h);
                         } else {
@@ -119,7 +115,7 @@ public class PathFinder {
         Comparator<Path> comparator = entryListIsEmpty ? Comparator.comparingInt(Path::getNodeCount)
             : Comparator.comparingDouble(Path::getDistToTarget).thenComparingInt(Path::getNodeCount);
         for (Map.Entry<Target, BlockPos> entry : entryListIsEmpty ? positions : entryList) {
-            Path path = this.reconstructPath(entry.getKey().getBestNode(), entry.getValue(), !entryListIsEmpty);
+            Path path = PathFinder.reconstructPath(entry.getKey().getBestNode(), entry.getValue(), !entryListIsEmpty);
             if (best == null || comparator.compare(path, best) < 0)
                 best = path;
         }
@@ -131,7 +127,7 @@ public class PathFinder {
         return a.distanceTo(b);
     }
 
-    private float getBestH(Node node, List<Map.Entry<Target, BlockPos>> targets) { // Paper - optimize collection - Set<Target> -> List<Map.Entry<Target, BlockPos>>
+    private static float getBestH(Node node, List<Map.Entry<Target, BlockPos>> targets) { // Paper - optimize collection - Set<Target> -> List<Map.Entry<Target, BlockPos>>
         float f = Float.MAX_VALUE;
 
         // Paper start - optimize collection
@@ -146,7 +142,7 @@ public class PathFinder {
         return f;
     }
 
-    private Path reconstructPath(Node endNode, BlockPos target, boolean reachesTarget) {
+    private static Path reconstructPath(Node endNode, BlockPos target, boolean reachesTarget) {
         List<Node> list = Lists.newArrayList();
         Node node = endNode;
         list.add(0, endNode);
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
index 2a1f9a252f243d1692282c96c85b5131324eae3a..0005e53f8667a7c3b3e9904e87076bf8f7221869 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -130,22 +130,22 @@ public class WalkNodeEvaluator extends NodeEvaluator {
 
         double d = this.getFloorLevel(new BlockPos(node.x, node.y, node.z));
         Node node2 = this.findAcceptedNode(node.x, node.y, node.z + 1, j, d, Direction.SOUTH, blockPathTypes2);
-        if (this.isNeighborValid(node2, node)) {
+        if (WalkNodeEvaluator.isNeighborValid(node2, node)) {
             successors[i++] = node2;
         }
 
         Node node3 = this.findAcceptedNode(node.x - 1, node.y, node.z, j, d, Direction.WEST, blockPathTypes2);
-        if (this.isNeighborValid(node3, node)) {
+        if (WalkNodeEvaluator.isNeighborValid(node3, node)) {
             successors[i++] = node3;
         }
 
         Node node4 = this.findAcceptedNode(node.x + 1, node.y, node.z, j, d, Direction.EAST, blockPathTypes2);
-        if (this.isNeighborValid(node4, node)) {
+        if (WalkNodeEvaluator.isNeighborValid(node4, node)) {
             successors[i++] = node4;
         }
 
         Node node5 = this.findAcceptedNode(node.x, node.y, node.z - 1, j, d, Direction.NORTH, blockPathTypes2);
-        if (this.isNeighborValid(node5, node)) {
+        if (WalkNodeEvaluator.isNeighborValid(node5, node)) {
             successors[i++] = node5;
         }
 
@@ -172,7 +172,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
         return i;
     }
 
-    protected boolean isNeighborValid(@Nullable Node node, Node successor1) {
+    protected static boolean isNeighborValid(@Nullable Node node, Node successor1) {
         return node != null && !node.closed && (node.costMalus >= 0.0F || successor1.costMalus < 0.0F);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index b7cb9fbb15c83cd4225a241e44132279d9308f96..2a2c4aaa533cf5da3f422d8e3c36cb333350c59c 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.level.portal;
 
-import java.util.Comparator;
 import java.util.Iterator;
 import java.util.Optional;
 import net.minecraft.BlockUtil;
@@ -13,6 +12,7 @@ import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiRecord;
 import net.minecraft.world.entity.ai.village.poi.PoiTypes;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.NetherPortalBlock;
 import net.minecraft.world.level.block.state.BlockState;
@@ -221,7 +221,7 @@ public class PortalForcer {
         org.bukkit.World bworld = this.level.getWorld();
         org.bukkit.event.world.PortalCreateEvent event = new org.bukkit.event.world.PortalCreateEvent((java.util.List<org.bukkit.block.BlockState>) (java.util.List) blockList.getList(), bworld, (entity == null) ? null : entity.getBukkitEntity(), org.bukkit.event.world.PortalCreateEvent.CreateReason.NETHER_PAIR);
 
-        this.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         if (event.isCancelled()) {
             return Optional.empty();
         }
diff --git a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
index f785d424eabdad906b342ab06aef9437c5fbc527..41ea7a2278f570a9ffd1297b0367303d54880128 100644
--- a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
+++ b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
@@ -56,7 +56,7 @@ public interface NeighborUpdater {
             CraftWorld cworld = ((ServerLevel) world).getWorld();
             if (cworld != null) {
                 BlockPhysicsEvent event = new BlockPhysicsEvent(CraftBlock.at(world, pos), CraftBlockData.fromData(state), CraftBlock.at(world, sourcePos));
-                ((ServerLevel) world).getCraftServer().getPluginManager().callEvent(event);
+                Level.getCraftServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
                     return;
diff --git a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
index 0465b397b628b11a6fc52e3375945c94d68cfdd5..fb0ea2c4a6fbad2bcf438ba1e69f0a7ce52bf59a 100644
--- a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
@@ -86,7 +86,7 @@ public class DimensionDataStorage {
 
             try {
                 CompoundTag compoundTag;
-                if (this.isGzip(pushbackInputStream)) {
+                if (DimensionDataStorage.isGzip(pushbackInputStream)) {
                     compoundTag = NbtIo.readCompressed(pushbackInputStream);
                 } else {
                     DataInputStream dataInputStream = new DataInputStream(pushbackInputStream);
@@ -134,7 +134,7 @@ public class DimensionDataStorage {
         return var8;
     }
 
-    private boolean isGzip(PushbackInputStream pushbackInputStream) throws IOException {
+    private static boolean isGzip(PushbackInputStream pushbackInputStream) throws IOException {
         byte[] bs = new byte[2];
         boolean bl = false;
         int i = pushbackInputStream.read(bs, 0, 2);
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index fbc81ad770556dba361ff98accdb5be2c63c780b..ca31632b9f0cba1e060427d0bc2e185ddc732d45 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -122,7 +122,7 @@ public class LevelStorageSource {
         return (DataPackConfig) dataresult.resultOrPartial(logger::error).orElse(DataPackConfig.DEFAULT);
     }
 
-    public String getName() {
+    public static String getName() {
         return "Anvil";
     }
 
@@ -183,7 +183,7 @@ public class LevelStorageSource {
         });
     }
 
-    private int getStorageVersion() {
+    private static int getStorageVersion() {
         return 19133;
     }
 
@@ -268,7 +268,7 @@ public class LevelStorageSource {
                     int j = levelversion.levelDataVersion();
 
                     if (j == 19132 || j == 19133) {
-                        boolean flag1 = j != this.getStorageVersion();
+                        boolean flag1 = j != LevelStorageSource.getStorageVersion();
                         Path path1 = levelSave.iconFile();
                         DataPackConfig datapackconfiguration = (DataPackConfig) dynamic.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
                         LevelSettings worldsettings = LevelSettings.parse(dynamic, datapackconfiguration);
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
index a6dd4e761c0a150b3aef1d065a9311bba6adc488..63de8410474906e63031ab60fbdb3d8541d5c63a 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
@@ -12,7 +12,6 @@ import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
 import java.lang.reflect.Type;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.function.BiFunction;
@@ -33,7 +32,6 @@ import org.apache.commons.lang3.ArrayUtils;
 import org.slf4j.Logger;
 
 // CraftBukkit start
-import java.util.stream.Collectors;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.world.LootGenerateEvent;
@@ -147,9 +145,9 @@ public class LootTable {
         }
         objectarraylist = event.getLoot().stream().map(CraftItemStack::asNMSCopy).collect(ObjectArrayList.toList());
         // CraftBukkit end
-        List<Integer> list = this.getAvailableSlots(iinventory, randomsource);
+        List<Integer> list = LootTable.getAvailableSlots(iinventory, randomsource);
 
-        this.shuffleAndSplitItems(objectarraylist, list.size(), randomsource);
+        LootTable.shuffleAndSplitItems(objectarraylist, list.size(), randomsource);
         ObjectListIterator objectlistiterator = objectarraylist.iterator();
 
         while (objectlistiterator.hasNext()) {
@@ -169,7 +167,7 @@ public class LootTable {
 
     }
 
-    private void shuffleAndSplitItems(ObjectArrayList<ItemStack> drops, int freeSlots, RandomSource random) {
+    private static void shuffleAndSplitItems(ObjectArrayList<ItemStack> drops, int freeSlots, RandomSource random) {
         List<ItemStack> list = Lists.newArrayList();
         ObjectListIterator objectlistiterator = drops.iterator();
 
@@ -206,7 +204,7 @@ public class LootTable {
         Util.shuffle(drops, random);
     }
 
-    private List<Integer> getAvailableSlots(Container inventory, RandomSource random) {
+    private static List<Integer> getAvailableSlots(Container inventory, RandomSource random) {
         ObjectArrayList<Integer> objectarraylist = new ObjectArrayList();
 
         for (int i = 0; i < inventory.getContainerSize(); ++i) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
index 584d31bfe294efd0c8c7c88e79418a54fc18d56b..c74231ac00c7a891e375c7b9d051e074116d35c1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
@@ -21,7 +21,7 @@ public class CraftEffect {
             datavalue = ((Integer) data).intValue();
             break;
         case POTION_BREAK:
-            datavalue = ((Potion) data).toDamageValue() & 0x3F;
+            datavalue = Potion.toDamageValue() & 0x3F;
             break;
         case INSTANT_POTION_BREAK:
             datavalue = ((Color) data).asRGB();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
index ed2f27061fe220122458e16733e9ed1dc175a6b9..c4d91865fe2e13c6d259e3e563f2f2322b43a6c0 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
@@ -29,7 +29,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
     public org.bukkit.BanEntry getBanEntry(@NotNull String target) {
         Validate.notNull(target, "Target cannot be null");
 
-        GameProfile profile = this.getProfile(target);
+        GameProfile profile = CraftProfileBanList.getProfile(target);
         if (profile == null) {
             return null;
         }
@@ -46,7 +46,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
     public org.bukkit.BanEntry addBan(@NotNull String target, String reason, Date expires, String source) {
         Validate.notNull(target, "Ban target cannot be null");
 
-        GameProfile profile = this.getProfile(target);
+        GameProfile profile = CraftProfileBanList.getProfile(target);
         if (profile == null) {
             return null;
         }
@@ -82,7 +82,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
     public boolean isBanned(@NotNull String target) {
         Validate.notNull(target, "Target cannot be null");
 
-        GameProfile profile = this.getProfile(target);
+        GameProfile profile = CraftProfileBanList.getProfile(target);
         if (profile == null) {
             return false;
         }
@@ -94,11 +94,11 @@ public class CraftProfileBanList implements org.bukkit.BanList {
     public void pardon(@NotNull String target) {
         Validate.notNull(target, "Target cannot be null");
 
-        GameProfile profile = this.getProfile(target);
+        GameProfile profile = CraftProfileBanList.getProfile(target);
         this.list.remove(profile);
     }
 
-    private @Nullable GameProfile getProfile(@NotNull String target) {
+    private static @Nullable GameProfile getProfile(@NotNull String target) {
         UUID uuid = null;
 
         try {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRaid.java b/src/main/java/org/bukkit/craftbukkit/CraftRaid.java
index 7c88fe218c98d0fa5395fbb3189cea09d72df5d6..00580b3b2b50a8cc7915f24f7df2332f989ba133 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRaid.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRaid.java
@@ -11,7 +11,6 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
 import org.bukkit.Location;
 import org.bukkit.Raid;
-import org.bukkit.Raid.RaidStatus;
 import org.bukkit.entity.Raider;
 import org.jetbrains.annotations.NotNull;
 
@@ -41,7 +40,7 @@ public final class CraftRaid implements Raid {
 
     @Override
     public void setBadOmenLevel(int badOmenLevel) {
-        int max = this.handle.getMaxBadOmenLevel();
+        int max = net.minecraft.world.entity.raid.Raid.getMaxBadOmenLevel();
         Preconditions.checkArgument(0 <= badOmenLevel && badOmenLevel <= max, "Bad Omen level must be between 0 and %s", max);
         handle.badOmenLevel = badOmenLevel;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
index 3c2a93c8ec1d679ad716e2e98a5779b833f6d4bd..ca62f77116632ad287096f86ad03e0003836c7a9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
@@ -296,7 +296,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     @Override
     public boolean generateTree(@NotNull Location location, Random random, @NotNull TreeType treeType) {
         BlockPos pos = new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ());
-        return this.generateTree(this.getHandle(), this.getHandle().getMinecraftWorld().getChunkSource().getGenerator(), pos, new RandomSourceWrapper(random), treeType);
+        return CraftRegionAccessor.generateTree(this.getHandle(), this.getHandle().getMinecraftWorld().getChunkSource().getGenerator(), pos, new RandomSourceWrapper(random), treeType);
     }
 
     @Override
@@ -311,7 +311,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     public boolean generateTree(@NotNull Location location, Random random, @NotNull TreeType treeType, @Nullable Predicate<BlockState> predicate) {
         BlockPos pos = new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ());
         BlockStateListPopulator populator = new BlockStateListPopulator(this.getHandle());
-        boolean result = this.generateTree(populator, this.getHandle().getMinecraftWorld().getChunkSource().getGenerator(), pos, new RandomSourceWrapper(random), treeType);
+        boolean result = CraftRegionAccessor.generateTree(populator, this.getHandle().getMinecraftWorld().getChunkSource().getGenerator(), pos, new RandomSourceWrapper(random), treeType);
         populator.refreshTiles();
 
         for (BlockState blockState : populator.getList()) {
@@ -323,7 +323,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
         return result;
     }
 
-    public boolean generateTree(@NotNull WorldGenLevel access, @NotNull ChunkGenerator chunkGenerator, @NotNull BlockPos pos, @NotNull RandomSource random, @NotNull TreeType treeType) {
+    public static boolean generateTree(@NotNull WorldGenLevel access, @NotNull ChunkGenerator chunkGenerator, @NotNull BlockPos pos, @NotNull RandomSource random, @NotNull TreeType treeType) {
         Holder<?> gen;
         switch (treeType) {
             case BIG_TREE:
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a03ceeb3dbd5ff25909275022163cc6e6a35ccd9..3fdaf3e4c9433bc6b6f9ce2897eb5e5f57d5fe2d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -360,7 +360,7 @@ public final class CraftServer implements Server {
         this.saveCommandsConfig();
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
-        this.pluginManager.useTimings(this.configuration.getBoolean("settings.plugin-profiling"));
+        SimplePluginManager.useTimings(this.configuration.getBoolean("settings.plugin-profiling"));
         this.overrideSpawnLimits();
         console.autosavePeriod = this.configuration.getInt("ticks-per.autosave");
         this.warningState = WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
@@ -1126,19 +1126,19 @@ public final class CraftServer implements Server {
         return "CraftServer{" + "serverName=" + this.serverName + ",serverVersion=" + this.serverVersion + ",minecraftVersion=" + this.console.getServerVersion() + '}';
     }
 
-    public @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, World.@NotNull Environment environment) {
+    public static @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, World.@NotNull Environment environment) {
         return WorldCreator.name(name).environment(environment).createWorld();
     }
 
-    public @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, World.@NotNull Environment environment, long seed) {
+    public static @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, World.@NotNull Environment environment, long seed) {
         return WorldCreator.name(name).environment(environment).seed(seed).createWorld();
     }
 
-    public @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, @NotNull Environment environment, ChunkGenerator generator) {
+    public static @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, @NotNull Environment environment, ChunkGenerator generator) {
         return WorldCreator.name(name).environment(environment).generator(generator).createWorld();
     }
 
-    public @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, @NotNull Environment environment, long seed, ChunkGenerator generator) {
+    public static @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, @NotNull Environment environment, long seed, ChunkGenerator generator) {
         return WorldCreator.name(name).environment(environment).seed(seed).generator(generator).createWorld();
     }
 
@@ -1212,7 +1212,7 @@ public final class CraftServer implements Server {
             worlddata = new PrimaryLevelData(worldSettings, generatorsettings, Lifecycle.stable());
         }
         worlddata.checkName(name);
-        worlddata.setModdedInfo(this.console.getServerModName(), this.console.getModdedStatus().shouldReportAsModified());
+        worlddata.setModdedInfo(MinecraftServer.getServerModName(), this.console.getModdedStatus().shouldReportAsModified());
         // Paper - move down
 
         long j = BiomeManager.obfuscateSeed(creator.seed());
@@ -1222,7 +1222,7 @@ public final class CraftServer implements Server {
 
         WorldInfo worldInfo = new CraftWorldInfo(worlddata, worldSession, creator.environment(), worlddimension.typeHolder().value(), worlddimension.generator(), this.getHandle().getServer().registryAccess()); // Paper
         if (biomeProvider == null && generator != null) {
-            biomeProvider = generator.getDefaultBiomeProvider(worldInfo);
+            biomeProvider = ChunkGenerator.getDefaultBiomeProvider(worldInfo);
         }
 
         // Paper start - fix and optimise world upgrading
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 7fe2dd117145340d0e6f11a6374d80500747822b..76bf6d22c435f9a39a8727faa63e9ab4e337e4eb 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -5,7 +5,6 @@ import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.datafixers.util.Pair;
-import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.io.File;
@@ -21,7 +20,6 @@ import java.util.Objects;
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.ExecutionException;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import net.minecraft.core.BlockPos;
@@ -43,7 +41,6 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.Ticket;
 import net.minecraft.server.level.TicketType;
 import net.minecraft.sounds.SoundSource;
-import net.minecraft.tags.TagKey;
 import net.minecraft.util.SortedArraySet;
 import net.minecraft.util.Unit;
 import net.minecraft.world.entity.EntityType;
@@ -115,7 +112,6 @@ import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.Trident;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.event.weather.LightningStrikeEvent;
-import org.bukkit.event.world.SpawnChangeEvent;
 import org.bukkit.event.world.TimeSkipEvent;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.BlockPopulator;
@@ -1940,13 +1936,13 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     @Override
     public <T> T getGameRuleValue(@NotNull GameRule<T> rule) {
         Validate.notNull(rule, "GameRule cannot be null");
-        return this.convert(rule, this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule.getName())));
+        return CraftWorld.convert(rule, this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule.getName())));
     }
 
     @Override
     public <T> T getGameRuleDefault(@NotNull GameRule<T> rule) {
         Validate.notNull(rule, "GameRule cannot be null");
-        return this.convert(rule, CraftWorld.getGameRuleDefinitions().get(rule.getName()).createRule());
+        return CraftWorld.convert(rule, CraftWorld.getGameRuleDefinitions().get(rule.getName()).createRule());
     }
 
     @Override
@@ -1966,7 +1962,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return true;
     }
 
-    private <T> T convert(@NotNull GameRule<T> rule, GameRules.@Nullable Value<?> value) {
+    private static <T> T convert(@NotNull GameRule<T> rule, GameRules.@Nullable Value<?> value) {
         if (value == null) {
             return null;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 84e1ff89d18096426487fa6a9ba8131043493904..f8dcb18f460400bd82c4be8a4eea9c4b18c009ad 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -5,7 +5,6 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
-import java.util.Objects;
 import java.util.stream.Collectors;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -594,7 +593,7 @@ public class CraftBlock implements Block {
         net.minecraft.world.item.ItemStack nms = CraftItemStack.asNMSCopy(item);
 
         // Modelled off EntityHuman#hasBlock
-        if (item == null || this.isPreferredTool(iblockdata, nms)) {
+        if (item == null || CraftBlock.isPreferredTool(iblockdata, nms)) {
             return net.minecraft.world.level.block.Block.getDrops(iblockdata, (ServerLevel) this.world.getMinecraftWorld(), position, this.world.getBlockEntity(position), entity == null ? null : ((CraftEntity) entity).getHandle(), nms)
                     .stream().map(CraftItemStack::asBukkitCopy).collect(Collectors.toList());
         } else {
@@ -606,7 +605,7 @@ public class CraftBlock implements Block {
     public boolean isPreferredTool(ItemStack item) {
         net.minecraft.world.level.block.state.BlockState iblockdata = this.getNMS();
         net.minecraft.world.item.ItemStack nms = CraftItemStack.asNMSCopy(item);
-        return this.isPreferredTool(iblockdata, nms);
+        return CraftBlock.isPreferredTool(iblockdata, nms);
     }
 
     @Override
@@ -615,7 +614,7 @@ public class CraftBlock implements Block {
         return this.getNMS().getDestroyProgress(((CraftPlayer) player).getHandle(), world, position);
     }
 
-    private boolean isPreferredTool(net.minecraft.world.level.block.state.@NotNull BlockState iblockdata, net.minecraft.world.item.@NotNull ItemStack nmsItem) {
+    private static boolean isPreferredTool(net.minecraft.world.level.block.state.@NotNull BlockState iblockdata, net.minecraft.world.item.@NotNull ItemStack nmsItem) {
         return !iblockdata.requiresCorrectToolForDrops() || nmsItem.isCorrectToolForDrops(iblockdata);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java b/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
index 0ba9590f2d0ba12db24aeef5b7764e46df891d37..355a7a41ffc816fedef2650fd2e3443b5bdda60d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.block;
 
-import com.google.common.base.Preconditions;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.JukeboxBlock;
@@ -92,7 +91,7 @@ public class CraftJukebox extends CraftBlockEntityState<JukeboxBlockEntity> impl
         JukeboxBlockEntity jukebox = (JukeboxBlockEntity) tileEntity;
         boolean result = !jukebox.getRecord().isEmpty();
         CraftWorld world = (CraftWorld) this.getWorld();
-        ((JukeboxBlock) Blocks.JUKEBOX).dropRecording(world.getHandle(), getPosition());
+        JukeboxBlock.dropRecording(world.getHandle(), getPosition());
         return result;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
index e695a9990a6504cc82408de6238409ad0e4b4b4e..7a07bc41d3db816addbb6e8a9f86094916d3d2f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
@@ -82,7 +82,7 @@ public class CraftBlockData implements BlockData {
      * @return an immutable Set of values in their appropriate Bukkit type
      */
     @SuppressWarnings("unchecked")
-    protected <B extends Enum<B>> @NotNull Set<B> getValues(@NotNull EnumProperty<?> nms, Class<B> bukkit) {
+    protected static <B extends Enum<B>> @NotNull Set<B> getValues(@NotNull EnumProperty<?> nms, Class<B> bukkit) {
         ImmutableSet.Builder<B> values = ImmutableSet.builder();
 
         for (Enum<?> e : nms.getPossibleValues()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
index 28704c9615732c24f30119a02391fe43254ae96d..940a66070f9f97678238ca276641d519d56455ad 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -4,7 +4,6 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 
 import java.util.EnumMap;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Consumer;
@@ -32,8 +31,8 @@ public class CraftBossBar implements BossBar {
     public CraftBossBar(String title, @NotNull BarColor color, @NotNull BarStyle style, BarFlag @NotNull ... flags) {
         this.handle = new ServerBossEvent(
                 CraftChatMessage.fromString(title, true)[0],
-                this.convertColor(color),
-                this.convertStyle(style)
+                CraftBossBar.convertColor(color),
+                CraftBossBar.convertStyle(style)
         );
 
         this.initialize();
@@ -58,17 +57,17 @@ public class CraftBossBar implements BossBar {
         this.flags.put(BarFlag.CREATE_FOG, new FlagContainer(handle::shouldCreateWorldFog, handle::setCreateWorldFog));
     }
 
-    private @NotNull BarColor convertColor(BossEvent.@NotNull BossBarColor color) {
+    private static @NotNull BarColor convertColor(BossEvent.@NotNull BossBarColor color) {
         BarColor bukkitColor = BarColor.valueOf(color.name());
         return (bukkitColor == null) ? BarColor.WHITE : bukkitColor;
     }
 
-    private BossEvent.@NotNull BossBarColor convertColor(@NotNull BarColor color) {
+    private static BossEvent.@NotNull BossBarColor convertColor(@NotNull BarColor color) {
         BossEvent.BossBarColor nmsColor = BossEvent.BossBarColor.valueOf(color.name());
         return (nmsColor == null) ? BossEvent.BossBarColor.WHITE : nmsColor;
     }
 
-    private BossEvent.@NotNull BossBarOverlay convertStyle(@NotNull BarStyle style) {
+    private static BossEvent.@NotNull BossBarOverlay convertStyle(@NotNull BarStyle style) {
         switch (style) {
             default:
             case SOLID:
@@ -84,7 +83,7 @@ public class CraftBossBar implements BossBar {
         }
     }
 
-    private @NotNull BarStyle convertStyle(BossEvent.@NotNull BossBarOverlay style) {
+    private static @NotNull BarStyle convertStyle(BossEvent.@NotNull BossBarOverlay style) {
         switch (style) {
             default:
             case PROGRESS:
@@ -113,23 +112,23 @@ public class CraftBossBar implements BossBar {
 
     @Override
     public @NotNull BarColor getColor() {
-        return this.convertColor(handle.color);
+        return CraftBossBar.convertColor(handle.color);
     }
 
     @Override
     public void setColor(@NotNull BarColor color) {
-        handle.color = this.convertColor(color);
+        handle.color = CraftBossBar.convertColor(color);
         this.handle.broadcast(ClientboundBossEventPacket::createUpdateStylePacket);
     }
 
     @Override
     public @NotNull BarStyle getStyle() {
-        return this.convertStyle(handle.overlay);
+        return CraftBossBar.convertStyle(handle.overlay);
     }
 
     @Override
     public void setStyle(@NotNull BarStyle style) {
-        handle.overlay = this.convertStyle(style);
+        handle.overlay = CraftBossBar.convertStyle(style);
         this.handle.broadcast(ClientboundBossEventPacket::createUpdateStylePacket);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java
index 87e94c7b98a1e96b7ae937f78b51d0660a63b965..bc090a9e83539ab990f03b2b473e989ba888ee49 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java
@@ -7,7 +7,6 @@ import net.minecraft.world.level.dimension.end.EndDragonFight;
 import org.bukkit.Location;
 import org.bukkit.boss.BossBar;
 import org.bukkit.boss.DragonBattle;
-import org.bukkit.boss.DragonBattle.RespawnPhase;
 import org.bukkit.entity.EnderDragon;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -63,7 +62,7 @@ public class CraftDragonBattle implements DragonBattle {
 
     @Override
     public @NotNull RespawnPhase getRespawnPhase() {
-        return this.toBukkitRespawnPhase(handle.respawnStage);
+        return CraftDragonBattle.toBukkitRespawnPhase(handle.respawnStage);
     }
 
     @Override
@@ -74,7 +73,7 @@ public class CraftDragonBattle implements DragonBattle {
             return false;
         }
 
-        this.handle.setRespawnStage(this.toNMSRespawnPhase(phase));
+        this.handle.setRespawnStage(CraftDragonBattle.toNMSRespawnPhase(phase));
         return true;
     }
 
@@ -93,11 +92,11 @@ public class CraftDragonBattle implements DragonBattle {
         return obj instanceof CraftDragonBattle && ((CraftDragonBattle) obj).handle == this.handle;
     }
 
-    private RespawnPhase toBukkitRespawnPhase(@Nullable DragonRespawnAnimation phase) {
+    private static RespawnPhase toBukkitRespawnPhase(@Nullable DragonRespawnAnimation phase) {
         return (phase != null) ? RespawnPhase.values()[phase.ordinal()] : RespawnPhase.NONE;
     }
 
-    private @Nullable DragonRespawnAnimation toNMSRespawnPhase(@NotNull RespawnPhase phase) {
+    private static @Nullable DragonRespawnAnimation toNMSRespawnPhase(@NotNull RespawnPhase phase) {
         return (phase != RespawnPhase.NONE) ? DragonRespawnAnimation.values()[phase.ordinal()] : null;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java b/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
index b47916c0bf3584908838962cbcf92ca016df570f..35b44cc7ee63788464632db294fdea77e01f2965 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
@@ -138,7 +138,7 @@ public class ConsoleCommandCompleter implements Completer {
     }
 
     // Paper start
-    private boolean notNewSuggestion(final @NotNull List<com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion> completions, final String completion) {
+    private static boolean notNewSuggestion(final @NotNull List<com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion> completions, final String completion) {
         for (final com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion it : completions) {
             if (it.suggestion().equals(completion)) {
                 return true;
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
index 5e4e91ae14abcd723348f2fa596c4a3abd8a2d6b..4ebd65878c5b41995c3b7a4012d4bb30a69b1979 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
@@ -90,7 +90,7 @@ public abstract class ServerCommandSender implements CommandSender {
         return this.perm.getEffectivePermissions();
     }
 
-    public boolean isPlayer() {
+    public static boolean isPlayer() {
         return false;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index e8fe6609406ea2a44ee9847f3956f6260ceef9ac..bfd2cd44b9321eb2ac30ceb219a3c3cbd79c7a9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -21,8 +21,6 @@ import org.bukkit.command.RemoteConsoleCommandSender;
 import org.bukkit.command.defaults.BukkitCommand;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.entity.CraftMinecartCommand;
-import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.entity.Player;
 import org.bukkit.entity.minecart.CommandMinecart;
 import org.jetbrains.annotations.NotNull;
 
@@ -44,7 +42,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         if (!testPermission(sender)) return true;
 
         CommandSourceStack icommandlistener = VanillaCommandWrapper.getListener(sender);
-        this.dispatcher.performPrefixedCommand(icommandlistener, this.toDispatcher(args, getName()), this.toDispatcher(args, commandLabel));
+        this.dispatcher.performPrefixedCommand(icommandlistener, VanillaCommandWrapper.toDispatcher(args, getName()), VanillaCommandWrapper.toDispatcher(args, commandLabel));
         return true;
     }
 
@@ -55,7 +53,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         Validate.notNull(alias, "Alias cannot be null");
 
         CommandSourceStack icommandlistener = VanillaCommandWrapper.getListener(sender);
-        ParseResults<CommandSourceStack> parsed = this.dispatcher.getDispatcher().parse(this.toDispatcher(args, getName()), icommandlistener);
+        ParseResults<CommandSourceStack> parsed = this.dispatcher.getDispatcher().parse(VanillaCommandWrapper.toDispatcher(args, getName()), icommandlistener);
 
         List<String> results = new ArrayList<>();
         this.dispatcher.getDispatcher().getCompletionSuggestions(parsed).thenAccept((suggestions) -> {
@@ -115,7 +113,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         // Paper end
     }
 
-    private @NotNull String toDispatcher(String @NotNull [] args, String name) {
+    private static @NotNull String toDispatcher(String @NotNull [] args, String name) {
         return name + ((args.length > 0) ? " " + Joiner.on(' ').join(args) : "");
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 3ece10be63be154e98a7ea67e7e4b7bba425f55d..3f55e1ee615b49f264bc59bcc404e719d91f517b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -650,7 +650,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public int getMaxFreezeTicks() {
-        return this.getHandle().getTicksRequiredToFreeze();
+        return Entity.getTicksRequiredToFreeze();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 9a4f7db8723d8920eb09d3351bc11c5a1020ed99..9ca67f9dec6ce4b5ac4472ea1375671a725f9cec 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -15,7 +15,6 @@ import java.lang.ref.WeakReference;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -34,7 +33,6 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.chat.ChatMessageContent;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
@@ -71,8 +69,10 @@ import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.players.UserWhiteListEntry;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.ai.attributes.AttributeInstance;
 import net.minecraft.world.entity.ai.attributes.AttributeMap;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -128,7 +128,6 @@ import org.bukkit.craftbukkit.conversations.ConversationTracker;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.map.CraftMapView;
 import org.bukkit.craftbukkit.map.RenderData;
-import org.bukkit.craftbukkit.profile.CraftPlayerProfile;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
@@ -149,7 +148,6 @@ import org.bukkit.map.MapView;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
-import org.bukkit.profile.PlayerProfile;
 import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 
@@ -1630,12 +1628,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             orb.spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.CUSTOM;
             orb.setPosRaw(handle.getX(), handle.getY(), handle.getZ());
 
-            int i = Math.min(orb.xpToDurability(amount), itemstack.getDamageValue());
+            int i = Math.min(ExperienceOrb.xpToDurability(amount), itemstack.getDamageValue());
             org.bukkit.event.player.PlayerItemMendEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerItemMendEvent(handle, orb, itemstack, stackEntry.getKey(), i);
             i = event.getRepairAmount();
             orb.discard();
             if (!event.isCancelled()) {
-                amount -= orb.durabilityToXp(i);
+                amount -= ExperienceOrb.durabilityToXp(i);
                 itemstack.setDamageValue(itemstack.getDamageValue() - i);
             }
         }
@@ -1863,7 +1861,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         connection.send(new net.minecraft.network.protocol.game.ClientboundRespawnPacket(worldserver.dimensionTypeId(), worldserver.dimension(), BiomeManager.obfuscateSeed(worldserver.getSeed()), handle.gameMode.getGameModeForPlayer(), handle.gameMode.getPreviousGameModeForPlayer(), worldserver.isDebug(), worldserver.isFlat(), true, this.getHandle().getLastDeathLocation()));
         handle.onUpdateAbilities();
         connection.internalTeleport(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), loc.getPitch(), java.util.Collections.emptySet(), false);
-        net.minecraft.server.MinecraftServer.getServer().getPlayerList().sendAllPlayerInfo(handle);
+        PlayerList.sendAllPlayerInfo(handle);
 
         if (this.isOp()) {
             this.setOp(false);
@@ -2221,7 +2219,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setFlySpeed(float value) {
-        this.validateSpeed(value);
+        CraftPlayer.validateSpeed(value);
         ServerPlayer player = this.getHandle();
         player.getAbilities().flyingSpeed = value / 2f;
         player.onUpdateAbilities();
@@ -2230,7 +2228,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setWalkSpeed(float value) {
-        this.validateSpeed(value);
+        CraftPlayer.validateSpeed(value);
         ServerPlayer player = this.getHandle();
         player.getAbilities().walkingSpeed = value / 2f;
         player.onUpdateAbilities();
@@ -2247,7 +2245,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return this.getHandle().getAbilities().walkingSpeed * 2f;
     }
 
-    private void validateSpeed(float value) {
+    private static void validateSpeed(float value) {
         if (value < 0) {
             if (value < -1f) {
                 throw new IllegalArgumentException(value + " is too low");
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 05115150f87f4d95c2eb41c8aca41068f8fc1f7a..feeff59be069a4fe4be38ff80cad90a26ce46607 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -2,7 +2,6 @@ package org.bukkit.craftbukkit.event;
 
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
-import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Either;
 import java.net.InetAddress;
 import java.util.ArrayList;
@@ -342,7 +341,7 @@ public class CraftEventFactory {
      */
     public static @NotNull BlockMultiPlaceEvent callBlockMultiPlaceEvent(@NotNull ServerLevel world, net.minecraft.world.entity.player.@NotNull Player who, InteractionHand hand, @NotNull List<BlockState> blockStates, int clickedX, int clickedY, int clickedZ) {
         CraftWorld craftWorld = world.getWorld();
-        CraftServer craftServer = world.getCraftServer();
+        CraftServer craftServer = Level.getCraftServer();
         Player player = (Player) who.getBukkitEntity();
 
         Block blockClicked = craftWorld.getBlockAt(clickedX, clickedY, clickedZ);
@@ -375,7 +374,7 @@ public class CraftEventFactory {
 
     public static @NotNull BlockPlaceEvent callBlockPlaceEvent(@NotNull ServerLevel world, net.minecraft.world.entity.player.@NotNull Player who, InteractionHand hand, @NotNull BlockState replacedBlockState, int clickedX, int clickedY, int clickedZ) {
         CraftWorld craftWorld = world.getWorld();
-        CraftServer craftServer = world.getCraftServer();
+        CraftServer craftServer = Level.getCraftServer();
 
         Player player = (Player) who.getBukkitEntity();
 
@@ -438,7 +437,7 @@ public class CraftEventFactory {
         org.bukkit.block.BlockFace blockFace = org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(clickedFace);
 
         EntityPlaceEvent event = new EntityPlaceEvent(entity.getBukkitEntity(), who, blockClicked, blockFace, CraftEquipmentSlot.getHand(enumhand));
-        entity.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
 
         return event;
     }
@@ -638,7 +637,7 @@ public class CraftEventFactory {
             boolean isNpc = entity instanceof Npc;
 
             if (spawnReason != SpawnReason.CUSTOM) {
-                if (isAnimal && !world.getWorld().getAllowAnimals() || isMonster && !world.getWorld().getAllowMonsters() || isNpc && !world.getCraftServer().getServer().areNpcsEnabled()) {
+                if (isAnimal && !world.getWorld().getAllowAnimals() || isMonster && !world.getWorld().getAllowMonsters() || isNpc && !Level.getCraftServer().getServer().areNpcsEnabled()) {
                     entity.discard();
                     return false;
                 }
@@ -1266,7 +1265,7 @@ public class CraftEventFactory {
 
     public static @NotNull FluidLevelChangeEvent callFluidLevelChangeEvent(@NotNull Level world, @NotNull BlockPos block, net.minecraft.world.level.block.state.@NotNull BlockState newData) {
         FluidLevelChangeEvent event = new FluidLevelChangeEvent(CraftBlock.at(world, block), CraftBlockData.fromData(newData));
-        world.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1350,7 +1349,7 @@ public class CraftEventFactory {
             player.connection.handleContainerClose(new ServerboundContainerClosePacket(player.containerMenu.containerId), InventoryCloseEvent.Reason.OPEN_NEW); // Paper
         }
 
-        CraftServer server = player.level.getCraftServer();
+        CraftServer server = Level.getCraftServer();
         CraftPlayer craftPlayer = player.getBukkitEntity();
         player.containerMenu.transferTo(container, craftPlayer);
 
@@ -1422,7 +1421,7 @@ public class CraftEventFactory {
         }
 
         ProjectileHitEvent event = new ProjectileHitEvent((Projectile) entity.getBukkitEntity(), hitEntity, hitBlock, hitFace);
-        entity.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1435,13 +1434,13 @@ public class CraftEventFactory {
 
     public static @NotNull BlockRedstoneEvent callRedstoneChange(@NotNull Level world, @NotNull BlockPos pos, int oldCurrent, int newCurrent) {
         BlockRedstoneEvent event = new BlockRedstoneEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), oldCurrent, newCurrent);
-        world.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
     public static @NotNull NotePlayEvent callNotePlayEvent(@NotNull Level world, @NotNull BlockPos pos, @NotNull NoteBlockInstrument instrument, int note) {
         NotePlayEvent event = new NotePlayEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), org.bukkit.Instrument.getByType((byte) instrument.ordinal()), new org.bukkit.Note(note));
-        world.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1468,7 +1467,7 @@ public class CraftEventFactory {
         }
 
         BlockIgniteEvent event = new BlockIgniteEvent(bukkitWorld.getBlockAt(block.getX(), block.getY(), block.getZ()), cause, igniter);
-        world.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1502,7 +1501,7 @@ public class CraftEventFactory {
         }
 
         BlockIgniteEvent event = new BlockIgniteEvent(bukkitWorld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()), cause, bukkitIgniter);
-        world.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1511,13 +1510,13 @@ public class CraftEventFactory {
         org.bukkit.entity.Entity igniter = explosion.source == null ? null : explosion.source.getBukkitEntity();
 
         BlockIgniteEvent event = new BlockIgniteEvent(bukkitWorld.getBlockAt(x, y, z), IgniteCause.EXPLOSION, igniter);
-        world.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
     public static @NotNull BlockIgniteEvent callBlockIgniteEvent(@NotNull Level world, @NotNull BlockPos pos, @NotNull IgniteCause cause, @NotNull Entity igniter) {
         BlockIgniteEvent event = new BlockIgniteEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), cause, igniter.getBukkitEntity());
-        world.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1533,13 +1532,13 @@ public class CraftEventFactory {
     public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.@NotNull Player human, org.bukkit.event.inventory.InventoryCloseEvent.@NotNull Reason reason) {
         // Paper end
         InventoryCloseEvent event = new InventoryCloseEvent(human.containerMenu.getBukkitView(), reason); // Paper
-        human.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         human.containerMenu.transferTo(human.inventoryMenu, human.getBukkitEntity());
     }
 
     public static @org.jetbrains.annotations.Nullable ItemStack handleEditBookEvent(@NotNull ServerPlayer player, int itemInHandIndex, @org.jetbrains.annotations.Nullable ItemStack itemInHand, @NotNull ItemStack newBookItem) {
         PlayerEditBookEvent editBookEvent = new PlayerEditBookEvent(player.getBukkitEntity(), (itemInHandIndex >= 0 && itemInHandIndex <= 8) ? itemInHandIndex : -1, (BookMeta) CraftItemStack.getItemMeta(itemInHand), (BookMeta) CraftItemStack.getItemMeta(newBookItem), newBookItem.getItem() == Items.WRITTEN_BOOK);
-        player.level.getCraftServer().getPluginManager().callEvent(editBookEvent);
+        Level.getCraftServer().getPluginManager().callEvent(editBookEvent);
 
         // If they've got the same item in their hand, it'll need to be updated.
         if (itemInHand != null && itemInHand.getItem() == Items.WRITABLE_BOOK) {
@@ -1559,13 +1558,13 @@ public class CraftEventFactory {
     public static @NotNull PlayerUnleashEntityEvent callPlayerUnleashEntityEvent(@NotNull Mob entity, net.minecraft.world.entity.player.@NotNull Player player, InteractionHand enumhand, boolean dropLeash) {
         PlayerUnleashEntityEvent event = new PlayerUnleashEntityEvent(entity.getBukkitEntity(), (Player) player.getBukkitEntity(), CraftEquipmentSlot.getHand(enumhand), dropLeash);
         // Paper end
-        entity.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
     public static @NotNull PlayerLeashEntityEvent callPlayerLeashEntityEvent(@NotNull Mob entity, @NotNull Entity leashHolder, net.minecraft.world.entity.player.@NotNull Player player, InteractionHand enumhand) {
         PlayerLeashEntityEvent event = new PlayerLeashEntityEvent(entity.getBukkitEntity(), leashHolder.getBukkitEntity(), (Player) player.getBukkitEntity(), CraftEquipmentSlot.getHand(enumhand));
-        entity.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1629,13 +1628,13 @@ public class CraftEventFactory {
                 event = new PlayerStatisticIncrementEvent(player, stat, current, newValue, material);
             }
         }
-        entityHuman.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return (Cancellable) event;
     }
 
     public static @NotNull FireworkExplodeEvent callFireworkExplodeEvent(@NotNull FireworkRocketEntity firework) {
         FireworkExplodeEvent event = new FireworkExplodeEvent((Firework) firework.getBukkitEntity());
-        firework.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1695,19 +1694,19 @@ public class CraftEventFactory {
 
     public static @NotNull EntityToggleGlideEvent callToggleGlideEvent(net.minecraft.world.entity.@NotNull LivingEntity entity, boolean gliding) {
         EntityToggleGlideEvent event = new EntityToggleGlideEvent((LivingEntity) entity.getBukkitEntity(), gliding);
-        entity.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
     public static @NotNull EntityToggleSwimEvent callToggleSwimEvent(net.minecraft.world.entity.@NotNull LivingEntity entity, boolean swimming) {
         EntityToggleSwimEvent event = new EntityToggleSwimEvent((LivingEntity) entity.getBukkitEntity(), swimming);
-        entity.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
     public static @NotNull AreaEffectCloudApplyEvent callAreaEffectCloudApplyEvent(net.minecraft.world.entity.@NotNull AreaEffectCloud cloud, @NotNull List<LivingEntity> entities) {
         AreaEffectCloudApplyEvent event = new AreaEffectCloudApplyEvent((AreaEffectCloud) cloud.getBukkitEntity(), entities);
-        cloud.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1723,7 +1722,7 @@ public class CraftEventFactory {
         CraftItemStack bredWithStack = bredWith == null ? null : CraftItemStack.asCraftMirror(bredWith).clone();
 
         EntityBreedEvent event = new EntityBreedEvent((LivingEntity) child.getBukkitEntity(), (LivingEntity) mother.getBukkitEntity(), (LivingEntity) father.getBukkitEntity(), breederEntity, bredWithStack, experience);
-        child.level.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -1787,7 +1786,7 @@ public class CraftEventFactory {
         blockState.setData(block);
 
         BlockFormEvent event = (entity == null) ? new BlockFormEvent(blockState.getBlock(), blockState) : new EntityBlockFormEvent(entity.getBukkitEntity(), blockState.getBlock(), blockState);
-        world.getCraftServer().getPluginManager().callEvent(event);
+        Level.getCraftServer().getPluginManager().callEvent(event);
 
         if (!event.isCancelled()) {
             blockState.update(true);
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index aa8b45717a16339a56e7323897a745f86e8f3529..56dd2a6ae67ef2e44e592a2462598e92a2294c0c 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -118,14 +118,14 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
 
     @Override
     public void createStructures(RegistryAccess registryManager, RandomState noiseConfig, StructureManager structureAccessor, ChunkAccess chunk, StructureTemplateManager structureTemplateManager, long seed) {
-        if (this.generator.shouldGenerateStructures()) {
+        if (ChunkGenerator.shouldGenerateStructures()) {
             super.createStructures(registryManager, noiseConfig, structureAccessor, chunk, structureTemplateManager, seed);
         }
     }
 
     @Override
     public void buildSurface(WorldGenRegion region, StructureManager structures, RandomState noiseConfig, ChunkAccess chunk) {
-        if (this.generator.shouldGenerateSurface()) {
+        if (ChunkGenerator.shouldGenerateSurface()) {
             this.delegate.buildSurface(region, structures, noiseConfig, chunk);
         }
 
@@ -136,7 +136,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
         random.setSeed((long) x * 341873128712L + (long) z * 132897987541L);
         this.generator.generateSurface(this.world.getWorld(), new RandomSourceWrapper.RandomWrapper(random), x, z, chunkData);
 
-        if (this.generator.shouldGenerateBedrock()) {
+        if (ChunkGenerator.shouldGenerateBedrock()) {
             random = CustomChunkGenerator.getSeededRandom();
             random.setSeed((long) x * 341873128712L + (long) z * 132897987541L);
             // delegate.buildBedrock(ichunkaccess, random);
@@ -161,11 +161,11 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
 
         ChunkData data;
         try {
-            if (this.generator.isParallelCapable()) {
-                data = this.generator.generateChunkData(this.world.getWorld(), this.random, x, z, biomegrid);
+            if (ChunkGenerator.isParallelCapable()) {
+                data = ChunkGenerator.generateChunkData(this.world.getWorld(), this.random, x, z, biomegrid);
             } else {
                 synchronized (this) {
-                    data = this.generator.generateChunkData(this.world.getWorld(), this.random, x, z, biomegrid);
+                    data = ChunkGenerator.generateChunkData(this.world.getWorld(), this.random, x, z, biomegrid);
                 }
             }
         } catch (UnsupportedOperationException exception) {
@@ -223,7 +223,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
 
     @Override
     public void applyCarvers(WorldGenRegion chunkRegion, long seed, RandomState noiseConfig, BiomeManager biomeAccess, StructureManager structureAccessor, ChunkAccess chunk, GenerationStep.Carving carverStep) {
-        if (this.generator.shouldGenerateCaves()) {
+        if (ChunkGenerator.shouldGenerateCaves()) {
             this.delegate.applyCarvers(chunkRegion, seed, noiseConfig, biomeAccess, structureAccessor, chunk, carverStep);
         }
 
@@ -242,7 +242,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
     @Override
     public CompletableFuture<ChunkAccess> fillFromNoise(Executor executor, Blender blender, RandomState noiseConfig, StructureManager structureAccessor, ChunkAccess chunk) {
         CompletableFuture<ChunkAccess> future = null;
-        if (this.generator.shouldGenerateNoise()) {
+        if (ChunkGenerator.shouldGenerateNoise()) {
             future = this.delegate.fillFromNoise(executor, blender, noiseConfig, structureAccessor, chunk);
         }
 
@@ -270,7 +270,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
                 int zChunk = z >> 4;
                 random.setSeed((long) xChunk * 341873128712L + (long) zChunk * 132897987541L);
 
-                return this.generator.getBaseHeight(this.world.getWorld(), new RandomSourceWrapper.RandomWrapper(random), x, z, CraftHeightMap.fromNMS(heightmap));
+                return ChunkGenerator.getBaseHeight(this.world.getWorld(), new RandomSourceWrapper.RandomWrapper(random), x, z, CraftHeightMap.fromNMS(heightmap));
             } catch (UnsupportedOperationException exception) {
                 this.implementBaseHeight = false;
             }
@@ -286,7 +286,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
 
     @Override
     public void applyBiomeDecoration(WorldGenLevel world, ChunkAccess chunk, StructureManager structureAccessor) {
-        super.applyBiomeDecoration(world, chunk, structureAccessor, this.generator.shouldGenerateDecorations());
+        super.applyBiomeDecoration(world, chunk, structureAccessor, ChunkGenerator.shouldGenerateDecorations());
     }
 
     @Override
@@ -296,7 +296,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
 
     @Override
     public void spawnOriginalMobs(WorldGenRegion region) {
-        if (this.generator.shouldGenerateMobs()) {
+        if (ChunkGenerator.shouldGenerateMobs()) {
             this.delegate.spawnOriginalMobs(region);
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
index 8b27744d27054044c10acf07501ef4f3631a9fe0..e6c87bf061df67f0d13facef37b42741d041cf55 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
@@ -127,7 +127,7 @@ public class SimpleHelpMap implements HelpMap {
 
         // Initialize help topics from the server's command map
         outer: for (Command command : this.server.getCommandMap().getCommands()) {
-            if (this.commandInIgnoredPlugin(command, ignoredPlugins)) {
+            if (SimpleHelpMap.commandInIgnoredPlugin(command, ignoredPlugins)) {
                 continue;
             }
 
@@ -150,7 +150,7 @@ public class SimpleHelpMap implements HelpMap {
 
         // Initialize command alias help topics
         for (Command command : this.server.getCommandMap().getCommands()) {
-            if (this.commandInIgnoredPlugin(command, ignoredPlugins)) {
+            if (SimpleHelpMap.commandInIgnoredPlugin(command, ignoredPlugins)) {
                 continue;
             }
             for (String alias : command.getAliases()) {
@@ -188,7 +188,7 @@ public class SimpleHelpMap implements HelpMap {
 
     private void fillPluginIndexes(@NotNull Map<String, Set<HelpTopic>> pluginIndexes, @NotNull Collection<? extends Command> commands) {
         for (Command command : commands) {
-            String pluginName = this.getCommandPluginName(command);
+            String pluginName = SimpleHelpMap.getCommandPluginName(command);
             if (pluginName != null) {
                 HelpTopic topic = this.getHelpTopic("/" + command.getLabel());
                 if (topic != null) {
@@ -201,7 +201,7 @@ public class SimpleHelpMap implements HelpMap {
         }
     }
 
-    private String getCommandPluginName(Command command) {
+    private static String getCommandPluginName(Command command) {
         if (command instanceof VanillaCommandWrapper) {
             return "Minecraft";
         }
@@ -214,7 +214,7 @@ public class SimpleHelpMap implements HelpMap {
         return null;
     }
 
-    private boolean commandInIgnoredPlugin(Command command, @NotNull Set<String> ignoredPlugins) {
+    private static boolean commandInIgnoredPlugin(Command command, @NotNull Set<String> ignoredPlugins) {
         if ((command instanceof BukkitCommand) && ignoredPlugins.contains("Bukkit")) {
             return true;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 3948c5b6f9e49da34bb2cf81279526b03993ca1b..99b54ac566d19387e111bf30859de6b0749cc1eb 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -53,7 +53,7 @@ public class CraftInventory implements Inventory {
         return item.isEmpty() ? null : CraftItemStack.asCraftMirror(item);
     }
 
-    protected ItemStack @NotNull [] asCraftMirror(@NotNull List<net.minecraft.world.item.ItemStack> mcItems) {
+    protected static ItemStack @NotNull [] asCraftMirror(@NotNull List<net.minecraft.world.item.ItemStack> mcItems) {
         int size = mcItems.size();
         ItemStack[] items = new ItemStack[size];
 
@@ -79,7 +79,7 @@ public class CraftInventory implements Inventory {
     public ItemStack[] getContents() {
         List<net.minecraft.world.item.ItemStack> mcItems = this.getInventory().getContents();
 
-        return this.asCraftMirror(mcItems);
+        return CraftInventory.asCraftMirror(mcItems);
     }
 
     @Override
@@ -230,7 +230,7 @@ public class CraftInventory implements Inventory {
         return first(item, withAmount, getStorageContents());
     }
 
-    private int first(@Nullable ItemStack item, boolean withAmount, ItemStack @NotNull [] inventory) {
+    private static int first(@Nullable ItemStack item, boolean withAmount, ItemStack @NotNull [] inventory) {
         // Paper end
         if (item == null) {
             return -1;
@@ -381,7 +381,7 @@ public class CraftInventory implements Inventory {
             while (true) {
                 // Paper start - Allow searching entire contents
                 ItemStack[] toSearch = searchEntire ? getContents() : getStorageContents();
-                int first = this.first(item, false, toSearch);
+                int first = CraftInventory.first(item, false, toSearch);
                 // Paper end
 
                 // Drat! we don't have this type in the inventory
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index bfa3f7cbcc6ee18326b34c895fd3dc9071a14020..4745dcfa79f5ce976cf6b8b9dec4f7989a4b848a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -55,10 +55,10 @@ public final class CraftItemFactory implements ItemFactory {
     @Override
     public @Nullable ItemMeta getItemMeta(Material material) {
         Validate.notNull(material, "Material cannot be null");
-        return this.getItemMeta(material, null);
+        return CraftItemFactory.getItemMeta(material, null);
     }
 
-    private @Nullable ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
+    private static @Nullable ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
         material = CraftLegacy.fromLegacy(material); // This may be called from legacy item stacks, try to get the right material
         switch (material) {
         case AIR:
@@ -320,10 +320,10 @@ public final class CraftItemFactory implements ItemFactory {
             return ((CraftMetaItem) meta1).isEmpty();
         }
 
-        return this.equals((CraftMetaItem) meta1, (CraftMetaItem) meta2);
+        return CraftItemFactory.equals((CraftMetaItem) meta1, (CraftMetaItem) meta2);
     }
 
-    boolean equals(@NotNull CraftMetaItem meta1, @NotNull CraftMetaItem meta2) {
+    static boolean equals(@NotNull CraftMetaItem meta1, @NotNull CraftMetaItem meta2) {
         /*
          * This couldn't be done inside of the objects themselves, else force recursion.
          * This is a fairly clean way of implementing it, by dividing the methods into purposes and letting each method perform its own function.
@@ -352,7 +352,7 @@ public final class CraftItemFactory implements ItemFactory {
         if (!(meta instanceof CraftMetaItem)) {
             throw new IllegalArgumentException("Meta of " + (meta != null ? meta.getClass().toString() : "null") + " not created by " + CraftItemFactory.class.getName());
         }
-        return this.getItemMeta(material, (CraftMetaItem) meta);
+        return CraftItemFactory.getItemMeta(material, (CraftMetaItem) meta);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index d350ccb7cce18a07265ad07ca43e2642c6ff77d9..e1e7b6a5ee67a9911142e6818c387e287a80d1f4 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -121,7 +121,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
                 if (expectJson) {
                     page = CraftChatMessage.fromJSONOrStringToJSON(page, false, true, MAX_PAGE_LENGTH, false);
                 } else {
-                    page = this.validatePage(page);
+                    page = CraftMetaBook.validatePage(page);
                 }
                 this.pages.add( limit( page, io.papermc.paper.configuration.GlobalConfiguration.get().itemValidation.book.page ) ); // Spigot // Paper - make configurable
             }
@@ -151,7 +151,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
 
     protected String deserializePage(String pageData) {
         // We expect the page data to already be a plain String.
-        return this.validatePage(pageData);
+        return CraftMetaBook.validatePage(pageData);
     }
 
     protected String convertPlainPageToData(String page) {
@@ -418,7 +418,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
         // assert: pages != null
 
-        String newText = this.validatePage(text);
+        String newText = CraftMetaBook.validatePage(text);
         this.pages.set(page - 1, this.convertPlainPageToData(newText));
     }
 
@@ -430,12 +430,13 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     @Override
     public void addPage(final String @NotNull ... pages) {
         for (String page : pages) {
-            page = this.validatePage(page);
+            page = CraftMetaBook.validatePage(page);
             this.internalAddPage(this.convertPlainPageToData(page));
         }
     }
 
-    @NotNull String validatePage(@Nullable String page) {
+    @NotNull
+    static String validatePage(@Nullable String page) {
         if (page == null) {
             page = "";
         } else if (page.length() > CraftMetaBook.MAX_PAGE_LENGTH) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index d6a7d401ee5b8d49ee05ab9f085c1f8a11f46009..664a742a0a488eb57f562040cda49867f4e2183a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -410,7 +410,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (tag.contains(CAN_DESTROY.NBT)) {
             ListTag list = tag.getList(CAN_DESTROY.NBT, CraftMagicNumbers.NBT.TAG_STRING);
             for (int i = 0; i < list.size(); i++) {
-                Namespaced namespaced = this.deserializeNamespaced(list.getString(i));
+                Namespaced namespaced = CraftMetaItem.deserializeNamespaced(list.getString(i));
                 if (namespaced == null) {
                     continue;
                 }
@@ -422,7 +422,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (tag.contains(CAN_PLACE_ON.NBT)) {
             ListTag list = tag.getList(CAN_PLACE_ON.NBT, CraftMagicNumbers.NBT.TAG_STRING);
             for (int i = 0; i < list.size(); i++) {
-                Namespaced namespaced = this.deserializeNamespaced(list.getString(i));
+                Namespaced namespaced = CraftMetaItem.deserializeNamespaced(list.getString(i));
                 if (namespaced == null) {
                     continue;
                 }
@@ -574,7 +574,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (canPlaceOnSerialized != null) {
             for (Object canPlaceOnElement : canPlaceOnSerialized) {
                 String canPlaceOnRaw = (String) canPlaceOnElement;
-                Namespaced value = this.deserializeNamespaced(canPlaceOnRaw);
+                Namespaced value = CraftMetaItem.deserializeNamespaced(canPlaceOnRaw);
                 if (value == null) {
                     continue;
                 }
@@ -587,7 +587,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (canDestroySerialized != null) {
             for (Object canDestroyElement : canDestroySerialized) {
                 String canDestroyRaw = (String) canDestroyElement;
-                Namespaced value = this.deserializeNamespaced(canDestroyRaw);
+                Namespaced value = CraftMetaItem.deserializeNamespaced(canDestroyRaw);
                 if (value == null) {
                     continue;
                 }
@@ -689,14 +689,14 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     @Overridden
     void applyToItem(@NotNull CompoundTag itemTag) {
         if (this.hasDisplayName()) {
-            this.setDisplayTag(itemTag, NAME.NBT, StringTag.valueOf(displayName));
+            CraftMetaItem.setDisplayTag(itemTag, NAME.NBT, StringTag.valueOf(displayName));
         }
         if (this.hasLocalizedName()) {
-            this.setDisplayTag(itemTag, LOCNAME.NBT, StringTag.valueOf(locName));
+            CraftMetaItem.setDisplayTag(itemTag, LOCNAME.NBT, StringTag.valueOf(locName));
         }
 
         if (this.lore != null) {
-            this.setDisplayTag(itemTag, LORE.NBT, this.createStringList(this.lore));
+            CraftMetaItem.setDisplayTag(itemTag, LORE.NBT, this.createStringList(this.lore));
         }
 
         if (this.hasCustomModelData()) {
@@ -728,7 +728,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         // Paper start - Implement an API for CanPlaceOn and CanDestroy NBT values
         if (hasPlaceableKeys()) {
             List<String> items = this.placeableKeys.stream()
-                .map(this::serializeNamespaced)
+                .map(CraftMetaItem::serializeNamespaced)
                 .collect(java.util.stream.Collectors.toList());
 
             itemTag.put(CAN_PLACE_ON.NBT, createNonComponentStringList(items));
@@ -736,7 +736,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
         if (hasDestroyableKeys()) {
             List<String> items = this.destroyableKeys.stream()
-                .map(this::serializeNamespaced)
+                .map(CraftMetaItem::serializeNamespaced)
                 .collect(java.util.stream.Collectors.toList());
 
             itemTag.put(CAN_DESTROY.NBT, createNonComponentStringList(items));
@@ -839,7 +839,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         tag.put(key.NBT, list);
     }
 
-    void setDisplayTag(@NotNull CompoundTag tag, @NotNull String key, @NotNull Tag value) {
+    static void setDisplayTag(@NotNull CompoundTag tag, @NotNull String key, @NotNull Tag value) {
         final CompoundTag display = tag.getCompound(DISPLAY.NBT);
 
         if (!tag.contains(DISPLAY.NBT)) {
@@ -996,14 +996,14 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     @Override
     public void addItemFlags(ItemFlag @NotNull ... hideFlags) {
         for (ItemFlag f : hideFlags) {
-            this.hideFlag |= this.getBitModifier(f);
+            this.hideFlag |= CraftMetaItem.getBitModifier(f);
         }
     }
 
     @Override
     public void removeItemFlags(ItemFlag @NotNull ... hideFlags) {
         for (ItemFlag f : hideFlags) {
-            this.hideFlag &= ~this.getBitModifier(f);
+            this.hideFlag &= ~CraftMetaItem.getBitModifier(f);
         }
     }
 
@@ -1022,11 +1022,11 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
     @Override
     public boolean hasItemFlag(@NotNull ItemFlag flag) {
-        int bitModifier = this.getBitModifier(flag);
+        int bitModifier = CraftMetaItem.getBitModifier(flag);
         return (this.hideFlag & bitModifier) == bitModifier;
     }
 
-    private byte getBitModifier(@NotNull ItemFlag hideFlag) {
+    private static byte getBitModifier(@NotNull ItemFlag hideFlag) {
         return (byte) (1 << hideFlag.ordinal());
     }
 
@@ -1460,7 +1460,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         // Paper start - Implement an API for CanPlaceOn and CanDestroy NBT values
         if (this.hasPlaceableKeys()) {
             List<String> cerealPlaceable = this.placeableKeys.stream()
-                .map(this::serializeNamespaced)
+                .map(CraftMetaItem::serializeNamespaced)
                 .collect(java.util.stream.Collectors.toList());
 
             builder.put(CAN_PLACE_ON.BUKKIT, cerealPlaceable);
@@ -1468,7 +1468,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
         if (this.hasDestroyableKeys()) {
             List<String> cerealDestroyable = this.destroyableKeys.stream()
-                .map(this::serializeNamespaced)
+                .map(CraftMetaItem::serializeNamespaced)
                 .collect(java.util.stream.Collectors.toList());
 
             builder.put(CAN_DESTROY.BUKKIT, cerealDestroyable);
@@ -1739,7 +1739,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Deprecated
-    private void legacyClearAndReplaceKeys(@NotNull Collection<Namespaced> toUpdate, @NotNull Collection<Material> beingSet) {
+    private static void legacyClearAndReplaceKeys(@NotNull Collection<Namespaced> toUpdate, @NotNull Collection<Material> beingSet) {
         if (beingSet.stream().anyMatch(Material::isLegacy)) {
             throw new IllegalArgumentException("Set must not contain any legacy materials!");
         }
@@ -1749,7 +1749,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Deprecated
-    private @NotNull Set<Material> legacyGetMatsFromKeys(@NotNull Collection<Namespaced> names) {
+    private static @NotNull Set<Material> legacyGetMatsFromKeys(@NotNull Collection<Namespaced> names) {
         Set<Material> mats = Sets.newHashSet();
         for (Namespaced key : names) {
             if (!(key instanceof org.bukkit.NamespacedKey)) {
@@ -1765,7 +1765,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return mats;
     }
 
-    private @Nullable Namespaced deserializeNamespaced(@NotNull String raw) {
+    private static @Nullable Namespaced deserializeNamespaced(@NotNull String raw) {
         boolean isTag = raw.length() > 0 && raw.codePointAt(0) == '#';
         com.mojang.datafixers.util.Either<net.minecraft.commands.arguments.blocks.BlockStateParser.BlockResult, net.minecraft.commands.arguments.blocks.BlockStateParser.TagResult> result;
         try {
@@ -1801,12 +1801,12 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return resource;
     }
 
-    private @Nonnull String serializeNamespaced(@NotNull Namespaced resource) {
+    private static @Nonnull String serializeNamespaced(@NotNull Namespaced resource) {
         return resource.toString();
     }
 
     // not a fan of this
-    private boolean ofAcceptableType(@NotNull Collection<Namespaced> namespacedResources) {
+    private static boolean ofAcceptableType(@NotNull Collection<Namespaced> namespacedResources) {
         
         for (Namespaced resource : namespacedResources) {
             if (!(resource instanceof org.bukkit.NamespacedKey || resource instanceof com.destroystokyo.paper.NamespacedTag)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
index f2f85589df385bf210e0322b80998d42c20735e3..b4ca6340b49b5319462cbc80830ee5e7d62e67cd 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
@@ -26,17 +26,17 @@ public class CraftCustomInventoryConverter implements CraftInventoryCreator.Inve
         return new CraftInventoryCustom(owner, type, title);
     }
 
-    public @NotNull Inventory createInventory(InventoryHolder owner, int size) {
+    public static @NotNull Inventory createInventory(InventoryHolder owner, int size) {
         return new CraftInventoryCustom(owner, size);
     }
 
     // Paper start
-    public @NotNull Inventory createInventory(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) {
+    public static @NotNull Inventory createInventory(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) {
         return new CraftInventoryCustom(owner, size, title);
     }
     // Paper end
 
-    public @NotNull Inventory createInventory(InventoryHolder owner, int size, String title) {
+    public static @NotNull Inventory createInventory(InventoryHolder owner, int size, String title) {
         return new CraftInventoryCustom(owner, size, title);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftInventoryCreator.java b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftInventoryCreator.java
index 01d9e623457b89099bcac286e5dd6511d9ce4c21..2b0192d4cdced3841a90550862585b5833c6f15c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftInventoryCreator.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftInventoryCreator.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.inventory.util;
 
 import java.util.EnumMap;
-import java.util.HashMap;
 import java.util.Map;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
@@ -55,17 +54,17 @@ public final class CraftInventoryCreator {
     }
 
     public Inventory createInventory(InventoryHolder holder, int size) {
-        return this.DEFAULT_CONVERTER.createInventory(holder, size);
+        return CraftCustomInventoryConverter.createInventory(holder, size);
     }
 
     // Paper start
     public Inventory createInventory(InventoryHolder holder, int size, net.kyori.adventure.text.Component title) {
-        return DEFAULT_CONVERTER.createInventory(holder, size, title);
+        return CraftCustomInventoryConverter.createInventory(holder, size, title);
     }
     // Paper end
 
     public Inventory createInventory(InventoryHolder holder, int size, String title) {
-        return this.DEFAULT_CONVERTER.createInventory(holder, size, title);
+        return CraftCustomInventoryConverter.createInventory(holder, size, title);
     }
 
     public interface InventoryConverter {
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapColorCache.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapColorCache.java
index 028d93668559f082e28a5c7eccb145b8499dd556..bdaad19dfeed26637e4061f33da762a6fb2d36ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapColorCache.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapColorCache.java
@@ -104,7 +104,7 @@ public class CraftMapColorCache implements MapPalette.MapColorCache {
             for (int g = 0; g < 256; g++) {
                 for (int b = 0; b < 256; b++) {
                     Color color = new Color(r, g, b);
-                    this.cache[this.toInt(color)] = MapPalette.matchColor(color);
+                    this.cache[CraftMapColorCache.toInt(color)] = MapPalette.matchColor(color);
                 }
             }
         }
@@ -142,7 +142,7 @@ public class CraftMapColorCache implements MapPalette.MapColorCache {
         }, Util.backgroundExecutor());
     }
 
-    private int toInt(@NotNull Color color) {
+    private static int toInt(@NotNull Color color) {
         return color.getRGB() & 0xFFFFFF;
     }
 
@@ -155,6 +155,6 @@ public class CraftMapColorCache implements MapPalette.MapColorCache {
     public byte matchColor(@NotNull Color color) {
         Preconditions.checkState(this.isCached(), "Cache not build jet");
 
-        return this.cache[this.toInt(color)];
+        return this.cache[CraftMapColorCache.toInt(color)];
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index 2b09a2d7022e5a40db9f4e251e638dece28a6c26..1be188bf9554cf57c6c553e120f7f8610a80e898 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -11,6 +11,7 @@ import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerScoreboard;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.players.PlayerList;
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Score;
@@ -105,7 +106,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
         }
 
         // The above is the reverse of the below method.
-        this.server.getPlayerList().updateEntireScoreboard((ServerScoreboard) newboard, player.getHandle());
+        PlayerList.updateEntireScoreboard((ServerScoreboard) newboard, player.getHandle());
     }
 
     // CraftBukkit method
diff --git a/src/main/java/org/bukkit/craftbukkit/structure/CraftStructureManager.java b/src/main/java/org/bukkit/craftbukkit/structure/CraftStructureManager.java
index b656adf6a7f0caeb85cdd879ef5cf8b1de9a376b..ee68567937199131de42ed456987c30c75ab0612 100644
--- a/src/main/java/org/bukkit/craftbukkit/structure/CraftStructureManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/structure/CraftStructureManager.java
@@ -57,7 +57,7 @@ public class CraftStructureManager implements StructureManager {
 
     @Override
     public Structure loadStructure(@NotNull NamespacedKey structureKey, boolean register) {
-        ResourceLocation minecraftKey = this.createAndValidateMinecraftStructureKey(structureKey);
+        ResourceLocation minecraftKey = CraftStructureManager.createAndValidateMinecraftStructureKey(structureKey);
 
         Optional<StructureTemplate> structure = structureManager.structureRepository.get(minecraftKey);
         structure = structure == null ? Optional.empty() : structure;
@@ -78,7 +78,7 @@ public class CraftStructureManager implements StructureManager {
 
     @Override
     public void saveStructure(@NotNull NamespacedKey structureKey) {
-        ResourceLocation minecraftKey = this.createAndValidateMinecraftStructureKey(structureKey);
+        ResourceLocation minecraftKey = CraftStructureManager.createAndValidateMinecraftStructureKey(structureKey);
 
         this.structureManager.save(minecraftKey);
     }
@@ -95,7 +95,7 @@ public class CraftStructureManager implements StructureManager {
     @Override
     public Structure registerStructure(@NotNull NamespacedKey structureKey, @NotNull Structure structure) {
         Validate.notNull(structure, "structure cannot be null");
-        ResourceLocation minecraftKey = this.createAndValidateMinecraftStructureKey(structureKey);
+        ResourceLocation minecraftKey = CraftStructureManager.createAndValidateMinecraftStructureKey(structureKey);
 
         final Optional<StructureTemplate> optionalDefinedStructure = Optional.of(((CraftStructure) structure).getHandle());
         final Optional<StructureTemplate> previousStructure = structureManager.structureRepository.put(minecraftKey, optionalDefinedStructure);
@@ -104,7 +104,7 @@ public class CraftStructureManager implements StructureManager {
 
     @Override
     public Structure unregisterStructure(@NotNull NamespacedKey structureKey) {
-        ResourceLocation minecraftKey = this.createAndValidateMinecraftStructureKey(structureKey);
+        ResourceLocation minecraftKey = CraftStructureManager.createAndValidateMinecraftStructureKey(structureKey);
 
         final Optional<StructureTemplate> previousStructure = structureManager.structureRepository.remove(minecraftKey);
         return previousStructure == null ? null : previousStructure.map(CraftStructure::new).orElse(null);
@@ -128,7 +128,7 @@ public class CraftStructureManager implements StructureManager {
 
     @Override
     public @NotNull File getStructureFile(@NotNull NamespacedKey structureKey) {
-        ResourceLocation minecraftKey = this.createAndValidateMinecraftStructureKey(structureKey);
+        ResourceLocation minecraftKey = CraftStructureManager.createAndValidateMinecraftStructureKey(structureKey);
         return this.structureManager.getPathToGeneratedStructure(minecraftKey, ".nbt").toFile();
     }
 
@@ -170,7 +170,7 @@ public class CraftStructureManager implements StructureManager {
         return new CraftStructure(new StructureTemplate());
     }
 
-    private @NotNull ResourceLocation createAndValidateMinecraftStructureKey(@NotNull NamespacedKey structureKey) {
+    private static @NotNull ResourceLocation createAndValidateMinecraftStructureKey(@NotNull NamespacedKey structureKey) {
         Validate.notNull(structureKey, "structureKey cannot be null");
 
         ResourceLocation minecraftkey = CraftNamespacedKey.toMinecraft(structureKey);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index ae6dac017789db394fd0e16e3cb4268a583cae1e..b624cce740d7097716e88544b2bfd95ff88171a4 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -287,7 +287,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
      *
      * @return string
      */
-    public @NotNull String getMappingsVersion() {
+    public static @NotNull String getMappingsVersion() {
         return "69c84c88aeb92ce9fa9525438b93f4fe";
     }
 
diff --git a/src/main/java/org/spigotmc/Metrics.java b/src/main/java/org/spigotmc/Metrics.java
index dee69b35186f6387c6d14979588088a3a8a87977..950c40a45658fa464e28913c82e3297bde323b6c 100644
--- a/src/main/java/org/spigotmc/Metrics.java
+++ b/src/main/java/org/spigotmc/Metrics.java
@@ -122,7 +122,7 @@ public class Metrics {
 
     public Metrics() throws IOException {
         // load the config
-        this.configurationFile = this.getConfigFile();
+        this.configurationFile = Metrics.getConfigFile();
         this.configuration = YamlConfiguration.loadConfiguration(configurationFile);
 
         // add some defaults
@@ -262,7 +262,7 @@ public class Metrics {
         synchronized (this.optOutLock) {
             try {
                 // Reload the metrics file
-                this.configuration.load(this.getConfigFile());
+                this.configuration.load(Metrics.getConfigFile());
             } catch (IOException ex) {
                 if (this.debug) {
                     Bukkit.getLogger().log(Level.INFO, "[Metrics] " + ex.getMessage());
@@ -326,7 +326,7 @@ public class Metrics {
      *
      * @return the File object for the config file
      */
-    public @NotNull File getConfigFile() {
+    public static @NotNull File getConfigFile() {
         // I believe the easiest way to get the base folder (e.g craftbukkit set via -P) for plugins to use
         // is to abuse the plugin object we already have
         // plugin.getDataFolder() => base/plugins/PluginA/
@@ -417,7 +417,7 @@ public class Metrics {
 
         // Mineshafter creates a socks proxy, so we can safely bypass it
         // It does not reroute POST requests so we need to go around it
-        if (this.isMineshafterPresent()) {
+        if (Metrics.isMineshafterPresent()) {
             connection = url.openConnection(Proxy.NO_PROXY);
         } else {
             connection = url.openConnection();
@@ -463,7 +463,7 @@ public class Metrics {
      *
      * @return true if mineshafter is installed on the server
      */
-    private boolean isMineshafterPresent() {
+    private static boolean isMineshafterPresent() {
         try {
             Class.forName("mineshafter.MineServer");
             return true;
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 8f6d9d0cb688213c1a514cbf37837c291271435f..710f71739486b71523c37b0ae2746f7cd32fd340 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -25,7 +25,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
     private volatile boolean stopping;
 
     // Paper start - log detailed tick information
-    private void dumpEntity(net.minecraft.world.entity.@NotNull Entity entity) {
+    private static void dumpEntity(net.minecraft.world.entity.@NotNull Entity entity) {
         Logger log = Bukkit.getServer().getLogger();
         double posX, posY, posZ;
         net.minecraft.world.phys.Vec3 mot;
@@ -64,11 +64,11 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
 
         // ticking entities
         for (net.minecraft.world.entity.Entity entity : net.minecraft.server.level.ServerLevel.getCurrentlyTickingEntities()) {
-            this.dumpEntity(entity);
+            WatchdogThread.dumpEntity(entity);
             net.minecraft.world.entity.Entity vehicle = entity.getVehicle();
             if (vehicle != null) {
                 log.log(Level.SEVERE, "Detailing vehicle for above entity:");
-                this.dumpEntity(vehicle);
+                WatchdogThread.dumpEntity(vehicle);
             }
         }
 
@@ -81,11 +81,11 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
                     log.log(Level.SEVERE, "Handling packet for player connection or ticking player connection (null player): " + packetListener);
                     log.log(Level.SEVERE, "Total packets processed on the main thread for all players: " + totalPackets);
                 } else {
-                    this.dumpEntity(player);
+                    WatchdogThread.dumpEntity(player);
                     net.minecraft.world.entity.Entity vehicle = player.getVehicle();
                     if (vehicle != null) {
                         log.log(Level.SEVERE, "Detailing vehicle for above entity:");
-                        this.dumpEntity(vehicle);
+                        WatchdogThread.dumpEntity(vehicle);
                     }
                     log.log(Level.SEVERE, "Total packets processed on the main thread for all players: " + totalPackets);
                 }
diff --git a/src/main/java/org/yaml/snakeyaml/emitter/Emitter.java b/src/main/java/org/yaml/snakeyaml/emitter/Emitter.java
index e9f24f60804d029376e28d5ddf554ae81aa60ea5..2fe0dfeea945866c14a1b6a7948f5ac039c62feb 100644
--- a/src/main/java/org/yaml/snakeyaml/emitter/Emitter.java
+++ b/src/main/java/org/yaml/snakeyaml/emitter/Emitter.java
@@ -57,7 +57,6 @@ import java.util.Map;
 import java.util.Queue;
 import java.util.Set;
 import java.util.TreeSet;
-import java.util.concurrent.ArrayBlockingQueue;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -293,7 +292,7 @@ public final class Emitter implements Emitable {
         return false;
     }
 
-    private boolean needEvents(@NotNull Iterator<Event> iter, int count) {
+    private static boolean needEvents(@NotNull Iterator<Event> iter, int count) {
         int level = 0;
         int actualCount = 0;
         while (iter.hasNext()) {
@@ -758,7 +757,7 @@ public final class Emitter implements Emitable {
         }
     }
 
-    private boolean isFoldedOrLiteral(@NotNull Event event) {
+    private static boolean isFoldedOrLiteral(@NotNull Event event) {
         if(!event.is(ID.Scalar)) {
             return false;
         }
@@ -974,7 +973,7 @@ public final class Emitter implements Emitable {
 
     // Analyzers.
 
-    private @NotNull String prepareVersion(@NotNull Version version) {
+    private static @NotNull String prepareVersion(@NotNull Version version) {
         if (version.major() != 1) {
             throw new EmitterException("unsupported YAML version: " + version);
         }
@@ -983,7 +982,7 @@ public final class Emitter implements Emitable {
 
     private final static Pattern HANDLE_FORMAT = Pattern.compile("^![-_\\w]*!$");
 
-    private @NotNull String prepareTagHandle(@NotNull String handle) {
+    private static @NotNull String prepareTagHandle(@NotNull String handle) {
         if (handle.length() == 0) {
             throw new EmitterException("tag handle must not be empty");
         } else if (handle.charAt(0) != '!' || handle.charAt(handle.length() - 1) != '!') {
@@ -994,7 +993,7 @@ public final class Emitter implements Emitable {
         return handle;
     }
 
-    private @NotNull String prepareTagPrefix(@NotNull String prefix) {
+    private static @NotNull String prepareTagPrefix(@NotNull String prefix) {
         if (prefix.length() == 0) {
             throw new EmitterException("tag prefix must not be empty");
         }
