From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Tue, 15 Nov 2022 02:35:29 -0600
Subject: [PATCH] Fix crashes


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index d3682f6cb94ed1e489f06438eeada2ab62cd33e0..3d6771f3716641f27f474f2ddcd2476c46993c1b 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -2699,8 +2699,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         }
         // Paper end
         if (entity == this) throw new IllegalArgumentException("Entities cannot become a passenger of themselves"); // Paper - issue 572
-        if (entity.getVehicle() != this) {
-            throw new IllegalStateException("Use x.startRiding(y), not y.addPassenger(x)");
+        if (entity.vehicle != this) {
+            return false;
         } else {
             // CraftBukkit start
             com.google.common.base.Preconditions.checkState(!entity.passengers.contains(this), "Circular entity riding! %s %s", this, entity);
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
index 5d7116cdbaf8df93260222eec38c8e72465071eb..2ea1147b191579595da1ce44066fe12ee76c9b04 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
@@ -14,6 +14,8 @@ import java.util.Comparator;
 import java.util.List;
 import java.util.Optional;
 import java.util.UUID;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.CopyOnWriteArraySet;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
@@ -38,7 +40,7 @@ public class AngerManagement {
     });
     private final Predicate<Entity> filter;
     @VisibleForTesting
-    protected final ArrayList<Entity> suspects;
+    protected final CopyOnWriteArrayList<Entity> suspects;
     private final AngerManagement.Sorter suspectSorter;
     @VisibleForTesting
     protected final Object2IntMap<Entity> angerBySuspect;
@@ -55,7 +57,7 @@ public class AngerManagement {
 
     public AngerManagement(Predicate<Entity> suspectPredicate, List<Pair<UUID, Integer>> suspectUuidsToAngerLevel) {
         this.filter = suspectPredicate;
-        this.suspects = new ArrayList<>();
+        this.suspects = new CopyOnWriteArrayList<>();
         this.suspectSorter = new AngerManagement.Sorter(this);
         this.angerBySuspect = new Object2IntOpenHashMap<>();
         this.angerByUuid = new Object2IntOpenHashMap<>(suspectUuidsToAngerLevel.size());
