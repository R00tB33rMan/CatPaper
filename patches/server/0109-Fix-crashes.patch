From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Thu, 17 Nov 2022 15:06:09 -0600
Subject: [PATCH] Fix crashes


diff --git a/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java b/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java
index 4d37f4f7a2cb6e44a2a6cfc721dbf7e3a817fc8a..8b776a14b1aa9341953f2b6ffb775e5749867662 100644
--- a/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java
+++ b/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java
@@ -21,7 +21,6 @@ public final class IteratorSafeOrderedReferenceSet<E> {
 
     /* list impl */
     protected CopyOnWriteArrayList<E> listElements;
-    protected int listSize;
 
     protected final double maxFragFactor;
 
@@ -96,9 +95,11 @@ public final class IteratorSafeOrderedReferenceSet<E> {
         return !this.threadRestricted || Bukkit.isPrimaryThread();
     }
 
+    /*
     protected final double getFragFactor() {
         return 1.0 - ((double)this.indexMap.size() / (double)this.listSize);
     }
+    */
 
     public int createRawIterator() {
         if (this.allowSafeIteration()) {
@@ -112,15 +113,7 @@ public final class IteratorSafeOrderedReferenceSet<E> {
     }
 
     public int advanceRawIterator(final int index) {
-        final List<E> elements = this.listElements;
-        int ret = index + 1;
-        for (int len = this.listSize; ret < len; ++ret) {
-            if (elements.get(ret) != null) {
-                return ret;
-            }
-        }
-
-        return -1;
+        return this.listElements.get(index + 1) == null ? -1 : index + 1;
     }
 
     public void finishRawIterator() {
@@ -152,15 +145,15 @@ public final class IteratorSafeOrderedReferenceSet<E> {
     }
 
     public boolean add(final E element) {
-        final int listSize = this.listSize;
+        //final int listSize = this.listSize;
 
-        final int previous = this.indexMap.putIfAbsent(element, listSize);
+        final int previous = this.indexMap.putIfAbsent(element, listElements.size());
         if (previous != -1) {
             return false;
         }
 
         this.listElements.add(element);
-        this.listSize = listSize + 1;
+        //this.listSize = listSize + 1;
 
         //this.check();
         return true;
@@ -241,14 +234,14 @@ public final class IteratorSafeOrderedReferenceSet<E> {
         if (this.allowSafeIteration()) {
             ++this.iteratorCount;
         }
-        return new BaseIterator<>(this, true, (flags & ITERATOR_FLAG_SEE_ADDITIONS) != 0 ? Integer.MAX_VALUE : this.listSize);
+        return new BaseIterator<>(this, true, (flags & ITERATOR_FLAG_SEE_ADDITIONS) != 0 ? Integer.MAX_VALUE : this.listElements.size());
     }
 
     public java.util.@NotNull Iterator<E> unsafeIterator() {
         return this.unsafeIterator(0);
     }
     public java.util.@NotNull Iterator<E> unsafeIterator(final int flags) {
-        return new BaseIterator<>(this, false, (flags & ITERATOR_FLAG_SEE_ADDITIONS) != 0 ? Integer.MAX_VALUE : this.listSize);
+        return new BaseIterator<>(this, false, (flags & ITERATOR_FLAG_SEE_ADDITIONS) != 0 ? Integer.MAX_VALUE : this.listElements.size());
     }
 
     public static interface Iterator<E> extends java.util.Iterator<E> {
@@ -261,7 +254,7 @@ public final class IteratorSafeOrderedReferenceSet<E> {
 
         protected final IteratorSafeOrderedReferenceSet<E> set;
         protected final boolean canFinish;
-        protected final int maxIndex;
+        //protected final int maxIndex;
         protected int nextIndex;
         protected @Nullable E pendingValue;
         protected boolean finished;
@@ -270,7 +263,7 @@ public final class IteratorSafeOrderedReferenceSet<E> {
         protected BaseIterator(final IteratorSafeOrderedReferenceSet<E> set, final boolean canFinish, final int maxIndex) {
             this.set = set;
             this.canFinish = canFinish;
-            this.maxIndex = maxIndex;
+            //this.maxIndex = maxIndex;
         }
 
         @Override
@@ -284,7 +277,7 @@ public final class IteratorSafeOrderedReferenceSet<E> {
 
             final List<E> elements = this.set.listElements;
             int index, len;
-            for (index = this.nextIndex, len = Math.min(this.maxIndex, this.set.listSize); index < len; ++index) {
+            for (index = this.nextIndex, len = elements.size(); index < len; ++index) {
                 final E element = elements.get(index);
                 if (element != null) {
                     this.pendingValue = element;
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 200c38809fcc2902c6ca9721a0dc6ec619af1476..6b7af62704d9620343b6d93694d7055dac4249d4 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -11,6 +11,7 @@ import it.unimi.dsi.fastutil.shorts.ShortListIterator;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
@@ -84,7 +85,7 @@ public class LevelChunk extends ChunkAccess {
     private Supplier<ChunkHolder.FullChunkStatus> fullStatus;
     @Nullable
     private LevelChunk.PostLoadProcessor postLoad;
-    private final Int2ObjectMap<GameEventDispatcher> gameEventDispatcherSections;
+    private final Map<Integer, GameEventDispatcher> gameEventDispatcherSections;
     private final LevelChunkTicks<Block> blockTicks;
     private final LevelChunkTicks<Fluid> fluidTicks;
 
@@ -101,7 +102,7 @@ public class LevelChunk extends ChunkAccess {
         this.tickersInLevel = Maps.newHashMap();
         this.clientLightReady = false;
         this.level = (ServerLevel) world; // CraftBukkit - type
-        this.gameEventDispatcherSections = new Int2ObjectOpenHashMap();
+        this.gameEventDispatcherSections = new ConcurrentHashMap<>();
         Heightmap.Types[] aheightmap_type = Heightmap.Types.values();
         int j = aheightmap_type.length;
 
