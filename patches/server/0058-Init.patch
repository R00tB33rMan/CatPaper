From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Mon, 14 Nov 2022 13:18:36 -0600
Subject: [PATCH] Init


diff --git a/src/main/java/io/papermc/paper/util/TickThread.java b/src/main/java/io/papermc/paper/util/TickThread.java
index b52a04cc6167d50ac573698069780033a2c2f20b..bdc5e7830e1321ecd879331ba1fa149719738d54 100644
--- a/src/main/java/io/papermc/paper/util/TickThread.java
+++ b/src/main/java/io/papermc/paper/util/TickThread.java
@@ -33,10 +33,15 @@ public class TickThread extends Thread {
      */
     @Deprecated
     public static void ensureTickThread(final String reason) {
+
+        // Cat - Who cares >:)
+
+        /*
         if (!isTickThread()) {
             MinecraftServer.LOGGER.error("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
             throw new IllegalStateException(reason);
         }
+        */
     }
 
     public static void ensureTickThread(final ServerLevel world, final int chunkX, final int chunkZ, final String reason) {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 2d5f013a8bb5d9441060f3b57511e89efe43c367..3461a8a076601ebba0a826775e6e572384119c9f 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -3,6 +3,7 @@ package net.minecraft.server.level;
 import com.google.common.annotations.VisibleForTesting;
 import co.aikar.timings.TimingHistory; // Paper
 import com.google.common.collect.Lists;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
@@ -31,7 +32,7 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.Executor;
+import java.util.concurrent.*;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -78,13 +79,7 @@ import net.minecraft.util.Unit;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.LightningBolt;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobCategory;
-import net.minecraft.world.entity.ReputationEventHandler;
+import net.minecraft.world.entity.*;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.ai.village.ReputationEventType;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
@@ -171,6 +166,8 @@ import org.bukkit.event.world.TimeSkipEvent;
 // CraftBukkit end
 import it.unimi.dsi.fastutil.ints.IntArrayList; // Paper
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
+import org.spigotmc.ActivationRange;
+
 
 public class ServerLevel extends Level implements WorldGenLevel {
 
@@ -623,127 +620,142 @@ public class ServerLevel extends Level implements WorldGenLevel {
         return this.structureManager;
     }
 
+    private final ExecutorService executor = Executors.newFixedThreadPool(1, new ThreadFactoryBuilder().setNameFormat("Server Level - %1$d").build()); // Paper - rewrite chunk system
+
     public void tick(BooleanSupplier shouldKeepTicking) {
-        // Paper start - optimise checkDespawn
-        this.playersAffectingSpawning.clear();
-        for (ServerPlayer player : this.players) {
-            if (net.minecraft.world.entity.EntitySelector.affectsSpawning.test(player)) {
-                this.playersAffectingSpawning.add(player);
+
+        final Future<?> future = executor.submit(() -> {
+            // Paper start - optimise checkDespawn
+            this.playersAffectingSpawning.clear();
+            for (ServerPlayer player : this.players) {
+                if (EntitySelector.affectsSpawning.test(player)) {
+                    this.playersAffectingSpawning.add(player);
+                }
             }
-        }
-        // Paper end - optimise checkDespawn
-        ProfilerFiller gameprofilerfiller = this.getProfiler();
+            // Paper end - optimise checkDespawn
+            ProfilerFiller gameprofilerfiller = this.getProfiler();
 
-        this.handlingTick = true;
-        gameprofilerfiller.push("world border");
-        this.getWorldBorder().tick();
-        gameprofilerfiller.popPush("weather");
-        this.advanceWeatherCycle();
-        int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
-        long j;
+            this.handlingTick = true;
+            gameprofilerfiller.push("world border");
+            this.getWorldBorder().tick();
+            gameprofilerfiller.popPush("weather");
+            this.advanceWeatherCycle();
+            int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
+            long j;
+
+            if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
+                // CraftBukkit start
+                j = this.levelData.getDayTime() + 24000L;
+                TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (j - j % 24000L) - this.getDayTime());
+                if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
+                    getCraftServer().getPluginManager().callEvent(event);
+                    if (!event.isCancelled()) {
+                        this.setDayTime(this.getDayTime() + event.getSkipAmount());
+                    }
+                }
 
-        if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
-            // CraftBukkit start
-            j = this.levelData.getDayTime() + 24000L;
-            TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (j - j % 24000L) - this.getDayTime());
-            if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
-                getCraftServer().getPluginManager().callEvent(event);
                 if (!event.isCancelled()) {
-                    this.setDayTime(this.getDayTime() + event.getSkipAmount());
+                    this.wakeUpAllPlayers();
+                }
+                // CraftBukkit end
+                if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE) && this.isRaining()) {
+                    this.resetWeatherCycle();
                 }
             }
 
-            if (!event.isCancelled()) {
-                this.wakeUpAllPlayers();
+            this.updateSkyBrightness();
+            this.tickTime();
+            gameprofilerfiller.popPush("tickPending");
+            timings.scheduledBlocks.startTiming(); // Paper
+            if (!this.isDebug()) {
+                j = this.getGameTime();
+                gameprofilerfiller.push("blockTicks");
+                this.blockTicks.tick(j, 65536, this::tickBlock);
+                gameprofilerfiller.popPush("fluidTicks");
+                this.fluidTicks.tick(j, 65536, this::tickFluid);
+                gameprofilerfiller.pop();
             }
-            // CraftBukkit end
-            if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE) && this.isRaining()) {
-                this.resetWeatherCycle();
+            timings.scheduledBlocks.stopTiming(); // Paper
+
+            gameprofilerfiller.popPush("raid");
+            this.timings.raids.startTiming(); // Paper - timings
+            this.raids.tick();
+            this.timings.raids.stopTiming(); // Paper - timings
+            gameprofilerfiller.popPush("chunkSource");
+            this.timings.chunkProviderTick.startTiming(); // Paper - timings
+            this.getChunkSource().tick(shouldKeepTicking, true);
+            this.timings.chunkProviderTick.stopTiming(); // Paper - timings
+            gameprofilerfiller.popPush("blockEvents");
+            timings.doSounds.startTiming(); // Spigot
+            this.runBlockEvents();
+            timings.doSounds.stopTiming(); // Spigot
+            this.handlingTick = false;
+            gameprofilerfiller.pop();
+            boolean flag = true || !this.players.isEmpty() || !this.getForcedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
+
+            if (flag) {
+                this.resetEmptyTime();
             }
-        }
 
-        this.updateSkyBrightness();
-        this.tickTime();
-        gameprofilerfiller.popPush("tickPending");
-        timings.scheduledBlocks.startTiming(); // Paper
-        if (!this.isDebug()) {
-            j = this.getGameTime();
-            gameprofilerfiller.push("blockTicks");
-            this.blockTicks.tick(j, 65536, this::tickBlock);
-            gameprofilerfiller.popPush("fluidTicks");
-            this.fluidTicks.tick(j, 65536, this::tickFluid);
-            gameprofilerfiller.pop();
-        }
-        timings.scheduledBlocks.stopTiming(); // Paper
-
-        gameprofilerfiller.popPush("raid");
-        this.timings.raids.startTiming(); // Paper - timings
-        this.raids.tick();
-        this.timings.raids.stopTiming(); // Paper - timings
-        gameprofilerfiller.popPush("chunkSource");
-        this.timings.chunkProviderTick.startTiming(); // Paper - timings
-        this.getChunkSource().tick(shouldKeepTicking, true);
-        this.timings.chunkProviderTick.stopTiming(); // Paper - timings
-        gameprofilerfiller.popPush("blockEvents");
-        timings.doSounds.startTiming(); // Spigot
-        this.runBlockEvents();
-        timings.doSounds.stopTiming(); // Spigot
-        this.handlingTick = false;
-        gameprofilerfiller.pop();
-        boolean flag = true || !this.players.isEmpty() || !this.getForcedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
+            if (flag || this.emptyTime++ < 300) {
+                gameprofilerfiller.push("entities");
+                timings.tickEntities.startTiming(); // Spigot
+                if (this.dragonFight != null) {
+                    gameprofilerfiller.push("dragonFight");
+                    this.dragonFight.tick();
+                    gameprofilerfiller.pop();
+                }
 
-        if (flag) {
-            this.resetEmptyTime();
-        }
+                ActivationRange.activateEntities(this); // Spigot
+                timings.entityTick.startTiming(); // Spigot
+                this.entityTickList.forEach((entity) -> {
+                    if (!entity.isRemoved()) {
+                        if (false && this.shouldDiscardEntity(entity)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
+                            entity.discard();
+                        } else {
+                            gameprofilerfiller.push("checkDespawn");
+                            entity.checkDespawn();
+                            gameprofilerfiller.pop();
+                            if (true || this.chunkSource.chunkMap.getDistanceManager().inEntityTickingRange(entity.chunkPosition().toLong())) { // Paper - now always true if in the ticking list
+                                Entity entity1 = entity.getVehicle();
 
-        if (flag || this.emptyTime++ < 300) {
-            gameprofilerfiller.push("entities");
-            timings.tickEntities.startTiming(); // Spigot
-            if (this.dragonFight != null) {
-                gameprofilerfiller.push("dragonFight");
-                this.dragonFight.tick();
-                gameprofilerfiller.pop();
-            }
+                                if (entity1 != null) {
+                                    if (!entity1.isRemoved() && entity1.hasPassenger(entity)) {
+                                        return;
+                                    }
 
-            org.spigotmc.ActivationRange.activateEntities(this); // Spigot
-            timings.entityTick.startTiming(); // Spigot
-            this.entityTickList.forEach((entity) -> {
-                if (!entity.isRemoved()) {
-                    if (false && this.shouldDiscardEntity(entity)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
-                        entity.discard();
-                    } else {
-                        gameprofilerfiller.push("checkDespawn");
-                        entity.checkDespawn();
-                        gameprofilerfiller.pop();
-                        if (true || this.chunkSource.chunkMap.getDistanceManager().inEntityTickingRange(entity.chunkPosition().toLong())) { // Paper - now always true if in the ticking list
-                            Entity entity1 = entity.getVehicle();
-
-                            if (entity1 != null) {
-                                if (!entity1.isRemoved() && entity1.hasPassenger(entity)) {
-                                    return;
+                                    entity.stopRiding();
                                 }
 
-                                entity.stopRiding();
+                                gameprofilerfiller.push("tick");
+                                this.guardEntityTick(this::tickNonPassenger, entity);
+                                gameprofilerfiller.pop();
                             }
-
-                            gameprofilerfiller.push("tick");
-                            this.guardEntityTick(this::tickNonPassenger, entity);
-                            gameprofilerfiller.pop();
                         }
                     }
-                }
-            });
-            timings.entityTick.stopTiming(); // Spigot
-            timings.tickEntities.stopTiming(); // Spigot
+                });
+                timings.entityTick.stopTiming(); // Spigot
+                timings.tickEntities.stopTiming(); // Spigot
+                gameprofilerfiller.pop();
+                this.tickBlockEntities();
+            }
+
+            gameprofilerfiller.push("entityManagement");
+            //this.entityManager.tick(); // Paper - rewrite chunk system
+            gameprofilerfiller.popPush("gameEvents");
+            this.sendGameEvents();
             gameprofilerfiller.pop();
-            this.tickBlockEntities();
+        });
+
+
+        try {
+            future.get();
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        } catch (ExecutionException e) {
+            throw new RuntimeException(e);
         }
 
-        gameprofilerfiller.push("entityManagement");
-        //this.entityManager.tick(); // Paper - rewrite chunk system
-        gameprofilerfiller.popPush("gameEvents");
-        this.sendGameEvents();
-        gameprofilerfiller.pop();
     }
 
     @Override
diff --git a/src/main/java/org/spigotmc/AsyncCatcher.java b/src/main/java/org/spigotmc/AsyncCatcher.java
index c02a04d284734b5f545b64307ed4aea337c1465f..292a54b8d7ff82256fa5a4eb70d3f03a3ae9c15b 100644
--- a/src/main/java/org/spigotmc/AsyncCatcher.java
+++ b/src/main/java/org/spigotmc/AsyncCatcher.java
@@ -1,7 +1,5 @@
 package org.spigotmc;
 
-import net.minecraft.server.MinecraftServer;
-
 public class AsyncCatcher
 {
 
@@ -10,10 +8,14 @@ public class AsyncCatcher
 
     public static void catchOp(String reason)
     {
+
+        // Cat - Who cares >:)
+        /*
         if ( !io.papermc.paper.util.TickThread.isTickThread() ) // Paper // Paper - rewrite chunk system
         {
             MinecraftServer.LOGGER.error("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable()); // Paper
             throw new IllegalStateException( "Asynchronous " + reason + "!" );
         }
+        */
     }
 }
