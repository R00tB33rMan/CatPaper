From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 26 Nov 2022 08:49:25 -0600
Subject: [PATCH] Move to concurrent fast utils


diff --git a/build.gradle.kts b/build.gradle.kts
index 7c45a0638ac02dbe0c51388001aed837228916e2..5c6dbc3280585de8a4e14e352cffcd5ca45eb57b 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,4 +1,6 @@
-import io.papermc.paperweight.util.*
+import io.papermc.paperweight.util.Git
+import io.papermc.paperweight.util.defaultJavaLauncher
+import io.papermc.paperweight.util.path
 
 plugins {
     java
@@ -18,6 +20,10 @@ dependencies {
     implementation("io.papermc.paper:paper-mojangapi:1.19.2-R0.1-SNAPSHOT") {
         exclude("io.papermc.paper", "paper-api")
     }
+    implementation("dev.twelveoclock:fastutil-concurrent:1.0.1") {
+        isChanging = true
+    }
+    // CatPaper end
 
     implementation(kotlin("bom"))
     implementation(kotlin("stdlib-jdk8"))
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index d519f52c97e23c9c24ffc5f3a057c1d3c297c1fc..608672c8d854e0b79b888ec293aae2289605e686 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -12,10 +12,9 @@ import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.JsonOps;
+import dev.twelveoclock.fastutil.map.impl.ConcurrentInt2ObjectOpenHashMap;
 import io.papermc.paper.util.MCUtil;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
-import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
-import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2LongMap;
@@ -248,7 +247,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         // Paper - rewrite chunk system
         this.tickingGenerated = new AtomicInteger();
         this.playerMap = new PlayerMap();
-        this.entityMap = Int2ObjectMaps.synchronize(new Int2ObjectOpenHashMap<>());
+        this.entityMap = new ConcurrentInt2ObjectOpenHashMap<>();
         this.chunkTypeCache = new Long2ByteOpenHashMap();
         this.chunkSaveCooldowns = new Long2LongOpenHashMap();
         this.unloadQueue = Queues.newConcurrentLinkedQueue();
@@ -1259,7 +1258,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
             level.timings.tracker2.startTiming(); // Paper
             while (objectiterator.hasNext()) {
-                playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
+                playerchunkmap_entitytracker = objectiterator.next();
                 playerchunkmap_entitytracker.updatePlayers(list);
             }
             level.timings.tracker2.stopTiming(); // Paper
diff --git a/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java b/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
index 606e287a373dcf2681e52191d91367db740419db..b373cd54c633b6ddd4ae0e25aff899260f276082 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
@@ -1,8 +1,7 @@
 package net.minecraft.world.ticks;
 
 import com.google.common.collect.ImmutableList;
-import it.unimi.dsi.fastutil.objects.ObjectOpenCustomHashSet;
-import it.unimi.dsi.fastutil.objects.ObjectSets;
+import dev.twelveoclock.fastutil.set.impl.ConcurrentObjectOpenCustomHashSet;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.level.ChunkPos;
@@ -20,7 +19,7 @@ public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickCon
     private List<SavedTick<T>> pendingTicks;
 
     // Note: Don't change this to something that doesn't filter by tick hash, breaks the game
-    private final Set<ScheduledTick<?>> ticksPerPosition = ObjectSets.synchronize(new ObjectOpenCustomHashSet<>(ScheduledTick.UNIQUE_TICK_HASH));
+    private final Set<ScheduledTick<?>> ticksPerPosition = new ConcurrentObjectOpenCustomHashSet<>(ScheduledTick.UNIQUE_TICK_HASH);
     @Nullable
     private BiConsumer<LevelChunkTicks<T>, ScheduledTick<T>> onTickAdded;
 
