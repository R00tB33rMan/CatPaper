From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Thu, 27 Oct 2022 03:23:28 -0500
Subject: [PATCH] Testing init


diff --git a/src/test/kotlin/dev.twelveoclock/KotlinTest.kt b/src/test/kotlin/dev.twelveoclock/KotlinTest.kt
deleted file mode 100644
index ec111a5949bd4a9080a9d9848dc7a8537634f499..0000000000000000000000000000000000000000
--- a/src/test/kotlin/dev.twelveoclock/KotlinTest.kt
+++ /dev/null
@@ -1,10 +0,0 @@
-package dev.twelveoclock
-
-import org.junit.jupiter.api.Test
-
-class KotlinTest {
-	@Test
-	fun test() {
-		println("Hello, world!")
-	}
-}
\ No newline at end of file
diff --git a/src/test/kotlin/dev/twelveoclock/catpaper/KotlinTest.kt b/src/test/kotlin/dev/twelveoclock/catpaper/KotlinTest.kt
new file mode 100644
index 0000000000000000000000000000000000000000..f657e04ceac9b01af5b2c2460cae2af29403cbc0
--- /dev/null
+++ b/src/test/kotlin/dev/twelveoclock/catpaper/KotlinTest.kt
@@ -0,0 +1,29 @@
+package dev.twelveoclock.catpaper
+
+import org.junit.jupiter.api.Assertions
+import org.junit.jupiter.api.Test
+import org.mockito.Mockito
+
+class KotlinTest {
+
+	class Thing {
+
+		fun thing(): String {
+			return "thing"
+		}
+
+	}
+
+
+	@Test
+	fun test() {
+		println("Hello, world!")
+	}
+
+	@Test
+	fun simpleMockitoTest() {
+		val mock = Mockito.mock(Thing::class.java)
+		Mockito.`when`(mock.thing()).thenReturn("mock")
+		Assertions.assertEquals("mock", mock.thing())
+	}
+}
\ No newline at end of file
diff --git a/src/test/kotlin/dev/twelveoclock/catpaper/level/ServerLevelTest.kt b/src/test/kotlin/dev/twelveoclock/catpaper/level/ServerLevelTest.kt
new file mode 100644
index 0000000000000000000000000000000000000000..6a156eefac1de4baca6be8e9aaa8000270f7d073
--- /dev/null
+++ b/src/test/kotlin/dev/twelveoclock/catpaper/level/ServerLevelTest.kt
@@ -0,0 +1,339 @@
+package dev.twelveoclock.catpaper.level
+
+import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService
+import com.mojang.datafixers.DSL
+import com.mojang.datafixers.DataFixerBuilder
+import com.mojang.datafixers.schemas.Schema
+import com.mojang.serialization.Dynamic
+import com.mojang.serialization.Lifecycle
+import io.papermc.paper.configuration.PaperConfigurations
+import joptsimple.OptionParser
+import net.minecraft.SharedConstants
+import net.minecraft.commands.Commands
+import net.minecraft.core.Holder
+import net.minecraft.core.MappedRegistry
+import net.minecraft.core.Registry
+import net.minecraft.core.RegistryAccess
+import net.minecraft.resources.ResourceKey
+import net.minecraft.resources.ResourceLocation
+import net.minecraft.server.*
+import net.minecraft.server.dedicated.DedicatedPlayerList
+import net.minecraft.server.dedicated.DedicatedServer
+import net.minecraft.server.dedicated.DedicatedServerSettings
+import net.minecraft.server.level.ServerLevel
+import net.minecraft.server.level.progress.LoggerChunkProgressListener
+import net.minecraft.server.packs.PackType
+import net.minecraft.server.packs.repository.PackRepository
+import net.minecraft.server.packs.resources.MultiPackResourceManager
+import net.minecraft.server.players.PlayerList
+import net.minecraft.world.Difficulty
+import net.minecraft.world.level.DataPackConfig
+import net.minecraft.world.level.GameRules
+import net.minecraft.world.level.GameType
+import net.minecraft.world.level.LevelSettings
+import net.minecraft.world.level.dimension.LevelStem
+import net.minecraft.world.level.levelgen.WorldGenSettings
+import net.minecraft.world.level.storage.DataVersion
+import net.minecraft.world.level.storage.LevelStorageSource
+import net.minecraft.world.level.storage.LevelStorageSource.LevelStorageAccess
+import net.minecraft.world.level.storage.PlayerDataStorage
+import net.minecraft.world.level.storage.PrimaryLevelData
+import org.bukkit.Bukkit
+import org.bukkit.World
+import org.bukkit.block.Biome
+import org.bukkit.configuration.file.YamlConfiguration
+import org.bukkit.craftbukkit.CraftServer
+import org.bukkit.craftbukkit.Main
+import org.bukkit.generator.WorldInfo
+import org.junit.jupiter.api.Test
+import org.spigotmc.SpigotConfig
+import java.io.File
+import java.net.Proxy
+import java.text.SimpleDateFormat
+import java.util.*
+import java.util.concurrent.Executors
+import java.util.stream.Stream
+import kotlin.io.path.createTempDirectory
+
+internal class ServerLevelTest {
+
+	val optionParser = OptionParser().apply {
+			acceptsAll(listOf("?", "help"), "Show the help")
+			acceptsAll(listOf("c", "config"), "Properties file to use")
+				.withRequiredArg()
+				.ofType(File::class.java)
+				.defaultsTo(File("server.properties"))
+				.describedAs("Properties file")
+			acceptsAll(listOf("P", "plugins"), "Plugin directory to use")
+				.withRequiredArg()
+				.ofType(File::class.java)
+				.defaultsTo(File("plugins"))
+				.describedAs("Plugin directory")
+			acceptsAll(listOf("h", "host", "server-ip"), "Host to listen on")
+				.withRequiredArg()
+				.ofType(String::class.java)
+				.describedAs("Hostname or IP")
+			acceptsAll(listOf("W", "world-dir", "universe", "world-container"), "World container")
+				.withRequiredArg()
+				.ofType(File::class.java)
+				.defaultsTo(File("."))
+				.describedAs("Directory containing worlds")
+			acceptsAll(listOf("w", "world", "level-name"), "World name")
+				.withRequiredArg()
+				.ofType(String::class.java)
+				.describedAs("World name")
+			acceptsAll(listOf("p", "port", "server-port"), "Port to listen on")
+				.withRequiredArg()
+				.ofType(Int::class.java)
+				.describedAs("Port")
+			acceptsAll(listOf("o", "online-mode"), "Whether to use online authentication")
+				.withRequiredArg()
+				.ofType(Boolean::class.java)
+				.describedAs("Authentication")
+			acceptsAll(listOf("s", "size", "max-players"), "Maximum amount of players")
+				.withRequiredArg()
+				.ofType(Int::class.java)
+				.describedAs("Server size")
+			acceptsAll(
+				listOf("d", "date-format"),
+				"Format of the date to display in the console (for log entries)"
+			)
+				.withRequiredArg()
+				.ofType(SimpleDateFormat::class.java)
+				.describedAs("Log date format")
+			acceptsAll(listOf("log-pattern"), "Specfies the log filename pattern")
+				.withRequiredArg()
+				.ofType(String::class.java)
+				.defaultsTo("server.log")
+				.describedAs("Log filename")
+			acceptsAll(listOf("log-limit"), "Limits the maximum size of the log file (0 = unlimited)")
+				.withRequiredArg()
+				.ofType(Int::class.java)
+				.defaultsTo(Integer.valueOf(0))
+				.describedAs("Max log size")
+			acceptsAll(listOf("log-count"), "Specified how many log files to cycle through")
+				.withRequiredArg()
+				.ofType(Int::class.java)
+				.defaultsTo(Integer.valueOf(1))
+				.describedAs("Log count")
+			acceptsAll(listOf("log-append"), "Whether to append to the log file")
+				.withRequiredArg()
+				.ofType(Boolean::class.java)
+				.defaultsTo(java.lang.Boolean.TRUE)
+				.describedAs("Log append")
+			acceptsAll(listOf("log-strip-color"), "Strips color codes from log file")
+			acceptsAll(listOf("b", "bukkit-settings"), "File for bukkit settings")
+				.withRequiredArg()
+				.ofType(File::class.java)
+				.defaultsTo(File("bukkit.yml"))
+				.describedAs("Yml file")
+			acceptsAll(listOf("C", "commands-settings"), "File for command settings")
+				.withRequiredArg()
+				.ofType(File::class.java)
+				.defaultsTo(File("commands.yml"))
+				.describedAs("Yml file")
+			acceptsAll(listOf("forceUpgrade"), "Whether to force a world upgrade")
+			acceptsAll(listOf("eraseCache"), "Whether to force cache erase during world upgrade")
+			acceptsAll(listOf("nogui"), "Disables the graphical console")
+			acceptsAll(listOf("nojline"), "Disables jline and emulates the vanilla console")
+			acceptsAll(listOf("noconsole"), "Disables the console")
+			acceptsAll(listOf("v", "version"), "Show the CraftBukkit Version")
+			acceptsAll(listOf("demo"), "Demo mode")
+			acceptsAll(
+				listOf("initSettings"),
+				"Only create configuration files and then exit"
+			) // SPIGOT-5761: Add initSettings option
+
+			// Spigot Start
+			acceptsAll(listOf("S", "spigot-settings"), "File for spigot settings")
+				.withRequiredArg()
+				.ofType(File::class.java)
+				.defaultsTo(File("spigot.yml"))
+				.describedAs("Yml file")
+			// Spigot End
+
+			// Paper Start
+			acceptsAll(listOf("paper-dir", "paper-settings-directory"), "Directory for Paper settings")
+				.withRequiredArg()
+				.ofType(File::class.java)
+				.defaultsTo(File(PaperConfigurations.CONFIG_DIR))
+				.describedAs("Config directory")
+			acceptsAll(listOf("paper", "paper-settings"), "File for Paper settings")
+				.withRequiredArg()
+				.ofType(File::class.java)
+				.defaultsTo(File("paper.yml"))
+				.describedAs("Yml file")
+			acceptsAll(
+				listOf("add-plugin", "add-extra-plugin-jar"),
+				"Specify paths to extra plugin jars to be loaded in addition to those in the plugins folder. This argument can be specified multiple times, once for each extra plugin jar path."
+			)
+				.withRequiredArg()
+				.ofType(File::class.java)
+				.defaultsTo(arrayOf())
+				.describedAs("Jar file")
+			// Paper end
+
+			// Paper start
+			acceptsAll(listOf("server-name"), "Name of the server")
+				.withRequiredArg()
+				.ofType(String::class.java)
+				.defaultsTo("Unknown Server")
+				.describedAs("Name")
+			// Paper end
+	}
+
+	@Test
+	fun test() {
+
+		SharedConstants.setVersion(WorldVersion)
+		Bootstrap.bootStrap()
+
+		val levelStorageSource = LevelStorageSource(createTempDirectory("Saves"), createTempDirectory("Backup"), DataFixerBuilder(1).buildUnoptimized()).LevelStorageAccess(
+			"levelID",
+			ResourceKey.create(Registry.LEVEL_STEM_REGISTRY, ResourceLocation("world")),
+		)
+
+		val registry = MappedRegistry(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), null)
+		registry.register(LevelStem.OVERWORLD, LevelStem(Holder.direct(null), null), Lifecycle.stable())
+
+		val levelData = PrimaryLevelData(
+			LevelSettings("World", GameType.SURVIVAL, false, Difficulty.EASY, false, GameRules(), DataPackConfig.DEFAULT),
+			WorldGenSettings(0, false, false, registry),
+			Lifecycle.stable()
+		)
+
+		val server = MinecraftServer.spin { thread ->
+
+				val server = DedicatedServer(
+					optionParser.parse(),
+					DataPackConfig.DEFAULT,
+					null,
+					thread,
+					levelStorageSource,
+					PackRepository(PackType.SERVER_DATA),
+					WorldStem(
+						MultiPackResourceManager(PackType.SERVER_DATA, emptyList()),
+						ReloadableServerResources(Frozen, Commands.CommandSelection.ALL, 0),
+						Frozen,
+						levelData
+					),
+					DedicatedServerSettings(optionParser.parse()),
+					DataFixer,
+					Services.create(
+						YggdrasilAuthenticationService(Proxy.NO_PROXY),
+						File("usercache.json"),
+						File.createTempFile("session", ".json"),
+						optionParser.parse()
+					),
+				) { LoggerChunkProgressListener(10) }
+
+			/*
+				Bukkit.setServer(
+					CraftServer(
+						server,
+						DedicatedPlayerList(server, Frozen, PlayerDataStorage(levelStorageSource, DataFixer))
+					)
+				)*/
+
+				return@spin server
+			}
+
+		server.allLevels.forEach {
+			println(it)
+		}
+
+		SpigotConfig.config = YamlConfiguration()
+
+		Thread.sleep(10000)
+		//server.server =
+
+		val serverLevel = ServerLevel(
+			server,
+			Executors.newSingleThreadExecutor(),
+			levelStorageSource,
+			levelData,
+			ResourceKey.create(Registry.DIMENSION_REGISTRY, ResourceLocation("world")),
+			LevelStem(Holder.direct(null), null),
+			LoggerChunkProgressListener(10),
+			false,
+			0L,
+			mutableListOf(),
+			false,
+			World.Environment.NORMAL,
+			ChunkGenerator,
+			BiomeProvider,
+		)
+
+		//serverLevel.tick { true }
+	}
+
+	object WorldVersion : net.minecraft.WorldVersion {
+		override fun getId(): String {
+			TODO("Not yet implemented")
+		}
+
+		override fun getName(): String {
+			return "meow"
+		}
+
+		override fun getReleaseTarget(): String {
+			TODO("Not yet implemented")
+		}
+
+		override fun getWorldVersion(): Int = 0
+
+		override fun getProtocolVersion(): Int {
+			TODO("Not yet implemented")
+		}
+
+		override fun getBuildTime(): Date {
+			TODO("Not yet implemented")
+		}
+
+		override fun isStable(): Boolean {
+			TODO("Not yet implemented")
+		}
+
+		override fun getDataVersion(): DataVersion {
+			TODO("Not yet implemented")
+		}
+	}
+
+	object ChunkGenerator : org.bukkit.generator.ChunkGenerator()
+
+	object DataFixer : com.mojang.datafixers.DataFixer {
+		override fun <T : Any?> update(
+			type: DSL.TypeReference?,
+			input: Dynamic<T>?,
+			version: Int,
+			newVersion: Int,
+		): Dynamic<T> {
+			TODO("Not yet implemented")
+		}
+
+		override fun getSchema(key: Int): Schema {
+			TODO("Not yet implemented")
+		}
+
+	}
+
+	object Frozen : RegistryAccess.Frozen {
+		override fun <E : Any?> ownedRegistry(key: ResourceKey<out Registry<out E>>): Optional<Registry<E>> {
+			return Optional.of(MappedRegistry(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), null) as MappedRegistry<E>)
+		}
+
+		override fun ownedRegistries(): Stream<RegistryAccess.RegistryEntry<*>> {
+			TODO("Not yet implemented")
+		}
+	}
+
+	object BiomeProvider : org.bukkit.generator.BiomeProvider() {
+		override fun getBiome(worldInfo: WorldInfo, x: Int, y: Int, z: Int): Biome {
+			TODO("Not yet implemented")
+		}
+		override fun getBiomes(worldInfo: WorldInfo): MutableList<Biome> {
+			TODO("Not yet implemented")
+		}
+	}
+
+}
\ No newline at end of file
diff --git a/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker b/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker
new file mode 100644
index 0000000000000000000000000000000000000000..ca6ee9cea8ec189a088d50559325d4e84ff8ad09
--- /dev/null
+++ b/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker
@@ -0,0 +1 @@
+mock-maker-inline
\ No newline at end of file
