From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 26 Nov 2022 11:25:08 -0600
Subject: [PATCH] Make everything go inside the thread pool


diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 20b16d7a95c10b90c83fa84b3dc94a29bd05c172..6c5902ae93b15d67a1d26c100f2bbfee556b782b 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1198,25 +1198,11 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     // Paper start - optimised tracker
     private final void processTrackQueue() {
-        this.level.timings.tracker1.startTiming();
-        try {
-            for (final TrackedEntity tracker : this.entityMap.values()) {
-                // update tracker entry
-                tracker.updatePlayers(tracker.entity.getPlayersInTrackRange());
-            }
-        } finally {
-            this.level.timings.tracker1.stopTiming();
-        }
-
-
-        this.level.timings.tracker2.startTiming();
-        try {
-            for (final TrackedEntity tracker : this.entityMap.values()) {
-                tracker.serverEntity.sendChanges();
-            }
-        } finally {
-            this.level.timings.tracker2.stopTiming();
-        }
+        this.entityMap.keySet().parallelStream().map(this.entityMap::get).forEach(tracker -> {
+            // update tracker entry
+            tracker.updatePlayers(tracker.entity.getPlayersInTrackRange());
+            tracker.serverEntity.sendChanges();
+        });
     }
     // Paper end - optimised tracker
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index ebff9c47a530327e849a742f0036f3ea7c74728c..759ce24beae88332422c93be6c89e40a9b37b6fe 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -586,90 +586,90 @@ public class ServerLevel extends Level implements WorldGenLevel {
     static final ForkJoinPool tickPool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1, factory, (t, e) -> e.printStackTrace(), true);
 
     public void tick(final BooleanSupplier shouldKeepTicking) {
-        // Paper start - optimise checkDespawn
-        this.playersAffectingSpawning.clear();
-        for (final ServerPlayer player : this.players) {
-            if (net.minecraft.world.entity.EntitySelector.affectsSpawning.test(player)) {
-                this.playersAffectingSpawning.add(player);
+        
+        final ServerLevel self = this;
+        final ForkJoinTask<?> task = tickPool.submit(() -> {
+            // Paper start - optimise checkDespawn
+            this.playersAffectingSpawning.clear();
+            for (final ServerPlayer player : this.players) {
+                if (net.minecraft.world.entity.EntitySelector.affectsSpawning.test(player)) {
+                    this.playersAffectingSpawning.add(player);
+                }
             }
-        }
-        // Paper end - optimise checkDespawn
-        final ProfilerFiller gameprofilerfiller = this.getProfiler();
+            // Paper end - optimise checkDespawn
+            final ProfilerFiller gameprofilerfiller = this.getProfiler();
 
-        this.handlingTick = true;
-        gameprofilerfiller.push("world border");
-        this.getWorldBorder().tick();
-        gameprofilerfiller.popPush("weather");
-        this.advanceWeatherCycle();
-        final int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
-        long j;
+            this.handlingTick = true;
+            gameprofilerfiller.push("world border");
+            this.getWorldBorder().tick();
+            gameprofilerfiller.popPush("weather");
+            this.advanceWeatherCycle();
+            final int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
+            long j;
+
+            if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
+                // CraftBukkit start
+                j = this.levelData.getDayTime() + 24000L;
+                final TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (j - j % 24000L) - this.getDayTime());
+                if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
+                    getCraftServer().getPluginManager().callEvent(event);
+                    if (!event.isCancelled()) {
+                        this.setDayTime(this.getDayTime() + event.getSkipAmount());
+                    }
+                }
 
-        if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
-            // CraftBukkit start
-            j = this.levelData.getDayTime() + 24000L;
-            final TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (j - j % 24000L) - this.getDayTime());
-            if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
-                getCraftServer().getPluginManager().callEvent(event);
                 if (!event.isCancelled()) {
-                    this.setDayTime(this.getDayTime() + event.getSkipAmount());
+                    this.wakeUpAllPlayers();
+                }
+                // CraftBukkit end
+                if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE) && this.isRaining()) {
+                    this.resetWeatherCycle();
                 }
             }
 
-            if (!event.isCancelled()) {
-                this.wakeUpAllPlayers();
-            }
-            // CraftBukkit end
-            if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE) && this.isRaining()) {
-                this.resetWeatherCycle();
+            this.updateSkyBrightness();
+            this.tickTime();
+            gameprofilerfiller.popPush("tickPending");
+            timings.scheduledBlocks.startTiming(); // Paper
+            if (!this.isDebug()) {
+                j = this.getGameTime();
+                gameprofilerfiller.push("blockTicks");
+                this.blockTicks.tick(j, 65536, this::tickBlock);
+                gameprofilerfiller.popPush("fluidTicks");
+                this.fluidTicks.tick(j, 65536, this::tickFluid);
+                gameprofilerfiller.pop();
             }
-        }
-
-        this.updateSkyBrightness();
-        this.tickTime();
-        gameprofilerfiller.popPush("tickPending");
-        timings.scheduledBlocks.startTiming(); // Paper
-        if (!this.isDebug()) {
-            j = this.getGameTime();
-            gameprofilerfiller.push("blockTicks");
-            this.blockTicks.tick(j, 65536, this::tickBlock);
-            gameprofilerfiller.popPush("fluidTicks");
-            this.fluidTicks.tick(j, 65536, this::tickFluid);
+            timings.scheduledBlocks.stopTiming(); // Paper
+
+            gameprofilerfiller.popPush("raid");
+            this.timings.raids.startTiming(); // Paper - timings
+            this.raids.tick();
+            this.timings.raids.stopTiming(); // Paper - timings
+            gameprofilerfiller.popPush("chunkSource");
+            this.timings.chunkProviderTick.startTiming(); // Paper - timings
+            this.getChunkSource().tick(shouldKeepTicking, true);
+            this.timings.chunkProviderTick.stopTiming(); // Paper - timings
+            gameprofilerfiller.popPush("blockEvents");
+            timings.doSounds.startTiming(); // Spigot
+            this.runBlockEvents();
+            timings.doSounds.stopTiming(); // Spigot
+            this.handlingTick = false;
             gameprofilerfiller.pop();
-        }
-        timings.scheduledBlocks.stopTiming(); // Paper
-
-        gameprofilerfiller.popPush("raid");
-        this.timings.raids.startTiming(); // Paper - timings
-        this.raids.tick();
-        this.timings.raids.stopTiming(); // Paper - timings
-        gameprofilerfiller.popPush("chunkSource");
-        this.timings.chunkProviderTick.startTiming(); // Paper - timings
-        this.getChunkSource().tick(shouldKeepTicking, true);
-        this.timings.chunkProviderTick.stopTiming(); // Paper - timings
-        gameprofilerfiller.popPush("blockEvents");
-        timings.doSounds.startTiming(); // Spigot
-        this.runBlockEvents();
-        timings.doSounds.stopTiming(); // Spigot
-        this.handlingTick = false;
-        gameprofilerfiller.pop();
-        final boolean flag = true || !this.players.isEmpty() || !this.getForcedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
-
-        if (flag) {
-            this.resetEmptyTime();
-        }
+            final boolean flag = true || !this.players.isEmpty() || !this.getForcedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
 
-        if (flag || this.emptyTime++ < 300) {
-            gameprofilerfiller.push("entities");
-            timings.tickEntities.startTiming(); // Spigot
-            if (this.dragonFight != null) {
-                gameprofilerfiller.push("dragonFight");
-                this.dragonFight.tick();
-                gameprofilerfiller.pop();
+            if (flag) {
+                this.resetEmptyTime();
             }
 
+            if (flag || this.emptyTime++ < 300) {
+                gameprofilerfiller.push("entities");
+                timings.tickEntities.startTiming(); // Spigot
+                if (this.dragonFight != null) {
+                    gameprofilerfiller.push("dragonFight");
+                    this.dragonFight.tick();
+                    gameprofilerfiller.pop();
+                }
 
-            final ServerLevel self = this;
-            final ForkJoinTask<?> task = tickPool.submit(() -> {
 
                 ActivationRange.activateEntities(self); // Spigot
                 timings.entityTick.startTiming(); // Spigot
@@ -699,17 +699,17 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 timings.tickEntities.stopTiming(); // Spigot
                 gameprofilerfiller.pop();
                 tickBlockEntities();
-            });
+            }
 
-            task.join();
 
-        }
+            //this.entityManager.tick(); // Paper - rewrite chunk system
+            gameprofilerfiller.popPush("gameEvents");
+            this.sendGameEvents();
+            gameprofilerfiller.pop();
+        });
+
+        task.join();
 
-        gameprofilerfiller.push("entityManagement");
-        //this.entityManager.tick(); // Paper - rewrite chunk system
-        gameprofilerfiller.popPush("gameEvents");
-        this.sendGameEvents();
-        gameprofilerfiller.pop();
     }
 
     @Override
