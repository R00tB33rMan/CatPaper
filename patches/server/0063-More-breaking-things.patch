From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Mon, 14 Nov 2022 19:47:09 -0600
Subject: [PATCH] More breaking things


diff --git a/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java b/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
index 032c0fb9cd09dc4e353120d0679bc2ae9b80370f..eea2a07df122b76f905ad57413eac221d091f1a0 100644
--- a/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
+++ b/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
@@ -1,4 +1,5 @@
 package com.destroystokyo.paper.util.maplist;
+/*
 
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import net.minecraft.world.entity.Entity;
@@ -10,9 +11,11 @@ import java.util.Iterator;
 import java.util.NoSuchElementException;
 
 // list with O(1) remove & contains
+*/
 /**
  * @author Spottedleaf
- */
+ *//*
+
 public final class EntityList implements Iterable<Entity> {
 
     protected final Int2IntOpenHashMap entityToIndex = new Int2IntOpenHashMap(2, 0.8f);
@@ -128,4 +131,4 @@ public final class EntityList implements Iterable<Entity> {
             }
         };
     }
-}
+}*/
diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 3ef398885526c9133c2205dd8b143703b1e09672..c23c5da734633919e261d17f69b234310667c584 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -1,6 +1,5 @@
 package io.papermc.paper.chunk.system.entity;
 
-import com.destroystokyo.paper.util.maplist.EntityList;
 import com.mojang.logging.LogUtils;
 import io.papermc.paper.util.CoordinateUtils;
 import io.papermc.paper.util.TickThread;
@@ -25,11 +24,8 @@ import net.minecraft.world.phys.AABB;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.NoSuchElementException;
-import java.util.UUID;
+
+import java.util.*;
 import java.util.concurrent.locks.StampedLock;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -54,7 +50,9 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
     private final StampedLock entityByLock = new StampedLock();
     private final Int2ReferenceOpenHashMap<Entity> entityById = new Int2ReferenceOpenHashMap<>();
     private final Object2ReferenceOpenHashMap<UUID, Entity> entityByUUID = new Object2ReferenceOpenHashMap<>();
-    private final EntityList accessibleEntities = new EntityList();
+
+    // ID -> Entity
+    private final Map<Integer, Entity> accessibleEntities = new HashMap<>();
 
     public EntityLookup(final @NotNull ServerLevel world, final LevelCallback<Entity> worldCallback) {
         this.world = world;
@@ -131,62 +129,9 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         return "count_id:" + this.entityById.size() + ",count_uuid:" + this.entityByUUID.size() + ",region_count:" + this.regions.size();
     }
 
-    static final class ArrayIterable<T> implements Iterable<T> {
-
-        private final T[] array;
-        private final int off;
-        private final int length;
-
-        public ArrayIterable(final T @NotNull [] array, final int off, final int length) {
-            this.array = array;
-            this.off = off;
-            this.length = length;
-            if (length > array.length) {
-                throw new IllegalArgumentException("Length must be no greater-than the array length");
-            }
-        }
-
-        @NotNull
-        @Override
-        public Iterator<T> iterator() {
-            return new ArrayIterator<>(this.array, this.off, this.length);
-        }
-
-        static final class ArrayIterator<T> implements Iterator<T> {
-
-            private final T[] array;
-            private int off;
-            private final int length;
-
-            public ArrayIterator(final T[] array, final int off, final int length) {
-                this.array = array;
-                this.off = off;
-                this.length = length;
-            }
-
-            @Override
-            public boolean hasNext() {
-                return this.off < this.length;
-            }
-
-            @Override
-            public T next() {
-                if (this.off >= this.length) {
-                    throw new NoSuchElementException();
-                }
-                return this.array[this.off++];
-            }
-
-            @Override
-            public void remove() {
-                throw new UnsupportedOperationException();
-            }
-        }
-    }
-
     @Override
     public @NotNull Iterable<Entity> getAll() {
-        return new ArrayIterable<>(this.accessibleEntities.getRawData(), 0, this.accessibleEntities.size());
+        return this.accessibleEntities.values();
     }
 
     @Override
@@ -260,7 +205,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
                     if (newVisibility.ordinal() > oldVisibility.ordinal()) {
                         // status upgrade
                         if (!oldVisibility.isAccessible() && newVisibility.isAccessible()) {
-                            this.accessibleEntities.add(entity);
+                            this.accessibleEntities.put(entity.getId(), entity);
                             EntityLookup.this.worldCallback.onTrackingStart(entity);
                         }
 
@@ -274,7 +219,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
                         }
 
                         if (oldVisibility.isAccessible() && !newVisibility.isAccessible()) {
-                            this.accessibleEntities.remove(entity);
+                            this.accessibleEntities.remove(entity.getId());
                             EntityLookup.this.worldCallback.onTrackingEnd(entity);
                         }
                     }
diff --git a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
index 2e30756758e5f3d38bca12ce0d7a436bba3ac843..56e893f232e11abd30262e5dba22bc6f63c96d4b 100644
--- a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
+++ b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
@@ -1,6 +1,5 @@
 package io.papermc.paper.world;
 
-import com.destroystokyo.paper.util.maplist.EntityList;
 import io.papermc.paper.chunk.system.entity.EntityLookup;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;
@@ -20,11 +19,10 @@ import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
+import java.util.*;
 import java.util.function.Predicate;
+import java.util.stream.Collectors;
+
 
 public final class ChunkEntitySlices {
 
@@ -37,7 +35,9 @@ public final class ChunkEntitySlices {
     protected final @NotNull EntityCollectionBySection allEntities;
     protected final @NotNull EntityCollectionBySection hardCollidingEntities;
     protected final @NotNull Reference2ObjectOpenHashMap<Class<? extends Entity>, EntityCollectionBySection> entitiesByClass;
-    protected final EntityList entities = new EntityList();
+
+    // ID -> Entity
+    protected final Map<Integer, Entity> entities = new HashMap<>();
 
     public ChunkHolder.FullChunkStatus status;
 
@@ -69,37 +69,23 @@ public final class ChunkEntitySlices {
     }
 
     // Paper start - optimise CraftChunk#getEntities
-    public org.bukkit.entity.Entity @NotNull [] getChunkEntities() {
-        List<org.bukkit.entity.Entity> ret = new java.util.ArrayList<>();
-        final Entity[] entities = this.entities.getRawData();
-        for (int i = 0, size = Math.min(entities.length, this.entities.size()); i < size; ++i) {
-            final Entity entity = entities[i];
-            if (entity == null) {
-                continue;
-            }
-            final org.bukkit.entity.Entity bukkit = entity.getBukkitEntity();
-            if (bukkit != null && bukkit.isValid()) {
-                ret.add(bukkit);
-            }
-        }
-
-        return ret.toArray(new org.bukkit.entity.Entity[0]);
+    public @NotNull List<org.bukkit.entity.Entity> getChunkEntities() {
+        return this.entities.values().stream()
+            .map(Entity::getBukkitEntity)
+            .filter(Objects::nonNull)
+            .filter(org.bukkit.entity.Entity::isValid)
+            .collect(Collectors.toList());
     }
 
     public @Nullable CompoundTag save() {
-        final int len = this.entities.size();
-        if (len == 0) {
+
+        if (this.entities.isEmpty()) {
             return null;
         }
 
-        final Entity[] rawData = this.entities.getRawData();
-        final List<Entity> collectedEntities = new ArrayList<>(len);
-        for (int i = 0; i < len; ++i) {
-            final Entity entity = rawData[i];
-            if (entity.shouldBeSaved()) {
-                collectedEntities.add(entity);
-            }
-        }
+        final List<Entity> collectedEntities = this.entities.values().stream()
+            .filter(Entity::shouldBeSaved)
+            .collect(Collectors.toList());
 
         if (collectedEntities.isEmpty()) {
             return null;
@@ -111,10 +97,10 @@ public final class ChunkEntitySlices {
     // returns true if this chunk has transient entities remaining
     public boolean unload() {
         final int len = this.entities.size();
-        final Entity[] collectedEntities = Arrays.copyOf(this.entities.getRawData(), len);
+        final List<Entity> collectedEntities = this.entities.values().stream().toList();
 
         for (int i = 0; i < len; ++i) {
-            final Entity entity = collectedEntities[i];
+            final Entity entity = collectedEntities.get(i);
             if (entity.isRemoved()) {
                 // removed by us below
                 continue;
@@ -135,16 +121,7 @@ public final class ChunkEntitySlices {
     }
 
     private @NotNull List<Entity> getAllEntities() {
-        final int len = this.entities.size();
-        if (len == 0) {
-            return new ArrayList<>();
-        }
-
-        final Entity[] rawData = this.entities.getRawData();
-        final List<Entity> collectedEntities = new ArrayList<>(len);
-	    collectedEntities.addAll(Arrays.asList(rawData).subList(0, len));
-
-        return collectedEntities;
+        return this.entities.values().stream().toList();
     }
 
     public void callEntitiesLoadEvent() {
@@ -161,9 +138,7 @@ public final class ChunkEntitySlices {
     }
 
     public void mergeInto(final @NotNull ChunkEntitySlices slices) {
-        final Entity[] entities = this.entities.getRawData();
-        for (int i = 0, size = Math.min(entities.length, this.entities.size()); i < size; ++i) {
-            final Entity entity = entities[i];
+        for (final Entity entity : this.entities.values()) {
             slices.addEntity(entity, entity.sectionY);
         }
     }
@@ -182,10 +157,7 @@ public final class ChunkEntitySlices {
     public void updateStatus(final ChunkHolder.@NotNull FullChunkStatus status, final @NotNull EntityLookup lookup) {
         this.status = status;
 
-        final Entity[] entities = this.entities.getRawData();
-
-        for (int i = 0, size = this.entities.size(); i < size; ++i) {
-            final Entity entity = entities[i];
+        for (final Entity entity : this.entities.values()) {
 
             final Visibility oldVisibility = EntityLookup.getEntityStatus(entity);
             entity.chunkStatus = status;
@@ -196,9 +168,13 @@ public final class ChunkEntitySlices {
     }
 
     public boolean addEntity(final @NotNull Entity entity, final int chunkSection) {
-        if (!this.entities.add(entity)) {
+
+        if (this.entities.containsKey(entity.getId())) {
             return false;
         }
+
+        this.entities.put(entity.getId(), entity);
+
         entity.chunkStatus = this.status;
         final int sectionIndex = chunkSection - this.minSection;
 
@@ -221,7 +197,7 @@ public final class ChunkEntitySlices {
     }
 
     public boolean removeEntity(final @NotNull Entity entity, final int chunkSection) {
-        if (!this.entities.remove(entity)) {
+        if (this.entities.remove(entity.getId()) == null) {
             return false;
         }
         entity.chunkStatus = null;
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 8bd05fe34f0e1325de45a31f37e663f2c55bd1b8..be16ee8a4c719c38ca0e8947c3071cc153ac849c 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -730,9 +730,9 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     if (false && this.shouldDiscardEntity(entity)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
                         entity.discard();
                     } else {
-                        //gameprofilerfiller.push("checkDespawn");
+                        gameprofilerfiller.push("checkDespawn");
                         entity.checkDespawn();
-                        //gameprofilerfiller.pop();
+                        gameprofilerfiller.pop();
                         if (true || this.chunkSource.chunkMap.getDistanceManager().inEntityTickingRange(entity.chunkPosition().toLong())) { // Paper - now always true if in the ticking list
                             Entity entity1 = entity.getVehicle();
 
@@ -744,14 +744,10 @@ public class ServerLevel extends Level implements WorldGenLevel {
                                 entity.stopRiding();
                             }
 
-                            //gameprofilerfiller.push("tick");
+                            gameprofilerfiller.push("tick");
 
-                            System.out.println("Here1 " + entity.getType());
-                            entity.tick();
-                            System.out.println("Here2 " + entity.getType());
-                            entity.postTick();
-                            System.out.println("Here3 " + entity.getType());
-                            //gameprofilerfiller.pop();
+                            tickNonPassenger(entity);
+                            gameprofilerfiller.pop();
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 7d005e879fb0201b5802001380994f1f9f7c9019..54d42d85e60abb845c1f1fedef924f1f8d7782d0 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -244,7 +244,7 @@ public final class ItemStack {
     }
 
     private void updateEmptyCacheFlag() {
-        if (this.emptyCacheFlag && this == ItemStack.EMPTY) throw new AssertionError("TRAP"); // CraftBukkit
+        //if (this.emptyCacheFlag && this == ItemStack.EMPTY) throw new AssertionError("TRAP"); // CraftBukkit
         this.emptyCacheFlag = false;
         this.emptyCacheFlag = this.isEmpty();
     }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 5811849ee84c25005b20f87ff214fe53ed65766d..415e19025a2fb260681210883ff594cf8f6c6cad 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -8,9 +8,7 @@ import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
+import java.util.*;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
@@ -82,8 +80,6 @@ import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.scores.Scoreboard;
 
 // CraftBukkit start
-import java.util.HashMap;
-import java.util.Map;
 import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
 import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
 import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
@@ -1415,11 +1411,13 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     // Paper start
     //protected final io.papermc.paper.world.EntitySliceManager entitySliceManager; // Paper - rewrite chunk system
 
-    public org.bukkit.entity.Entity[] getChunkEntities(int chunkX, int chunkZ) {
+    public List<org.bukkit.entity.Entity> getChunkEntities(int chunkX, int chunkZ) {
+
         io.papermc.paper.world.ChunkEntitySlices slices = ((ServerLevel)this).getEntityLookup().getChunk(chunkX, chunkZ);
         if (slices == null) {
-            return new org.bukkit.entity.Entity[0];
+            return Collections.emptyList();
         }
+
         return slices.getChunkEntities();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index 7f6c1e02eed360b40d2894efc03e3b7495049f59..2ea0a99bb8792172d7ca48fc8d6b470aa1177a5b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -119,12 +119,12 @@ public class CraftChunk implements Chunk {
     }
 
     @Override
-    public Entity @NotNull [] getEntities() {
+    public @NotNull Entity @NotNull [] getEntities() {
         if (!this.isLoaded()) {
             this.getWorld().getChunkAt(x, z); // Transient load for this tick
         }
 
-        return getCraftWorld().getHandle().getChunkEntities(this.x, this.z); // Paper - rewrite chunk system
+        return getCraftWorld().getHandle().getChunkEntities(this.x, this.z).toArray(Entity[]::new); // Paper - rewrite chunk system
     }
 
     @Override
