From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 26 Nov 2022 09:48:04 -0600
Subject: [PATCH] Switch from CopyOnWriteArrayLists


diff --git a/build.gradle.kts b/build.gradle.kts
index 5c6dbc3280585de8a4e14e352cffcd5ca45eb57b..3ad57e4ddff9d5e3be4de8f0b670158c1769d28f 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -20,7 +20,7 @@ dependencies {
     implementation("io.papermc.paper:paper-mojangapi:1.19.2-R0.1-SNAPSHOT") {
         exclude("io.papermc.paper", "paper-api")
     }
-    implementation("dev.twelveoclock:fastutil-concurrent:1.0.1") {
+    implementation("dev.twelveoclock:fastutil-concurrent:1.0.2") {
         isChanging = true
     }
     // CatPaper end
diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 352d0aa6ee35ef920f27cb05420149a575e7f087..8a8ea856db6424846c1ec2fc39bd6bd028e5165c 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -9,6 +9,8 @@ import io.papermc.paper.world.ChunkEntitySlices;
 import it.unimi.dsi.fastutil.ints.Int2ReferenceOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2ReferenceOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
+import it.unimi.dsi.fastutil.objects.ReferenceLists;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ServerLevel;
@@ -22,7 +24,6 @@ import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 
 import java.util.*;
-import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.locks.StampedLock;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -47,7 +48,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
     private final StampedLock entityByLock = new StampedLock();
     private final Int2ReferenceOpenHashMap<Entity> entityById = new Int2ReferenceOpenHashMap<>();
     private final Object2ReferenceOpenHashMap<UUID, Entity> entityByUUID = new Object2ReferenceOpenHashMap<>();
-    private final List<Entity> accessibleEntities = new CopyOnWriteArrayList<>();
+    private final List<Entity> accessibleEntities = ReferenceLists.synchronize(new ReferenceArrayList<>());
 
     public EntityLookup(final @NotNull ServerLevel world, final LevelCallback<Entity> worldCallback) {
         this.world = world;
diff --git a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
index 7720fb4a87e7923973e9db0ee11b729a3ce74e5c..402315ed6c2b337aa9779714fc6aa5a25cedd595 100644
--- a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
+++ b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
@@ -1,6 +1,9 @@
 package io.papermc.paper.world;
 
 import io.papermc.paper.chunk.system.entity.EntityLookup;
+import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
+import it.unimi.dsi.fastutil.objects.ReferenceList;
+import it.unimi.dsi.fastutil.objects.ReferenceLists;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ServerLevel;
@@ -23,7 +26,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.function.Predicate;
 
 
@@ -38,7 +40,7 @@ public final class ChunkEntitySlices {
     protected final @NotNull EntityCollectionBySection allEntities;
     protected final @NotNull EntityCollectionBySection hardCollidingEntities;
     protected final @NotNull Map<Class<? extends Entity>, EntityCollectionBySection> entitiesByClass;
-    protected final List<Entity> entities = new CopyOnWriteArrayList<>();
+    protected final List<Entity> entities = ReferenceLists.synchronize(new ReferenceArrayList<>());
 
     public ChunkHolder.FullChunkStatus status;
 
@@ -355,7 +357,7 @@ public final class ChunkEntitySlices {
             final int sectionCount = manager.maxSection - manager.minSection + 1;
 
             this.nonEmptyBitset = new long[(sectionCount + (Long.SIZE - 1)) >>> 6]; // (sectionCount + (Long.SIZE - 1)) / Long.SIZE
-            this.entitiesBySection = new CopyOnWriteArrayList[sectionCount];
+            this.entitiesBySection = new ReferenceList[sectionCount];
         }
 
         public void addEntity(final Entity entity, final int sectionIndex) {
@@ -366,7 +368,8 @@ public final class ChunkEntitySlices {
             }
 
             if (list == null) {
-                this.entitiesBySection[sectionIndex] = list = new CopyOnWriteArrayList<>();
+                list = ReferenceLists.synchronize(new ReferenceArrayList<>());
+                this.entitiesBySection[sectionIndex] = list;
                 this.nonEmptyBitset[sectionIndex >>> 6] |= (1L << (sectionIndex & (Long.SIZE - 1)));
             }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 608672c8d854e0b79b888ec293aae2289605e686..20b16d7a95c10b90c83fa84b3dc94a29bd05c172 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -13,6 +13,7 @@ import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.JsonOps;
 import dev.twelveoclock.fastutil.map.impl.ConcurrentInt2ObjectOpenHashMap;
+import dev.twelveoclock.fastutil.set.impl.ConcurrentObjectOpenHashSet;
 import io.papermc.paper.util.MCUtil;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteMap;
@@ -62,7 +63,10 @@ import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Path;
 import java.util.*;
-import java.util.concurrent.*;
+import java.util.concurrent.CancellationException;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletionException;
+import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.*;
 
@@ -105,7 +109,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     private final Queue<Runnable> unloadQueue;
     int viewDistance;
     public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerMobDistanceMap; // Paper
-    public final Set<ChunkHolder> needsChangeBroadcasting = new CopyOnWriteArraySet<>();
+    public final Set<ChunkHolder> needsChangeBroadcasting = new ConcurrentObjectOpenHashSet<>();
 
     // Paper - rewrite chunk system
     // Paper start - optimise checkDespawn
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 3816e53fa09d3d8d7b5c7662da2a479e37af8734..421276e237592461e20adc27fea620125a21cf2d 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -6,6 +6,7 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import dev.twelveoclock.fastutil.set.impl.ConcurrentObjectOpenHashSet;
 import io.papermc.paper.util.MCUtil;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
@@ -484,10 +485,10 @@ public class ServerLevel extends Level implements WorldGenLevel {
         this.uuid = WorldUUID.getUUID(convertable_conversionsession.levelDirectory.path().toFile());
         // CraftBukkit end
         this.players = Lists.newArrayList();
-        this.entityTickList = new CopyOnWriteArrayList<>();
+        this.entityTickList = ReferenceLists.synchronize(new ReferenceArrayList<>());
         this.blockTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier());
         this.fluidTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier());
-        this.navigatingMobs = new CopyOnWriteArraySet<>();
+        this.navigatingMobs = new ConcurrentObjectOpenHashSet<>();
         this.blockEvents = new ObjectLinkedOpenHashSet();
         this.blockEventsToReschedule = new ArrayList(64);
         this.gameEventMessages = new ConcurrentSkipListSet<>();
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index fa2a7c582ed598c0847dd8e38c8cfc25603028aa..f7413f9b56726a8eab0bda506f6b5017c8da0d50 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -10,6 +10,8 @@ import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import io.netty.buffer.Unpooled;
 import io.papermc.paper.adventure.PaperAdventure;
+import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
+import it.unimi.dsi.fastutil.objects.ReferenceLists;
 import net.minecraft.ChatFormatting;
 import net.minecraft.FileUtil;
 import net.minecraft.commands.CommandSourceStack;
@@ -90,7 +92,7 @@ public abstract class PlayerList {
     private static final int SEND_PLAYER_INFO_INTERVAL = 600;
     private static final SimpleDateFormat BAN_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
     private final MinecraftServer server;
-    public final List<ServerPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
+    public final List<ServerPlayer> players = ReferenceLists.synchronize(new ReferenceArrayList<>()); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
     private final Map<UUID, ServerPlayer> playersByUUID = Maps.newHashMap();
     private final UserBanList bans;
     private final IpBanList ipBans;
diff --git a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
index c00200adf669125a347f23059bcab16e34aee5e1..53c710303ead5fccc96825ece97dd3fe7c001b99 100644
--- a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
+++ b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
@@ -1,5 +1,7 @@
 package net.minecraft.world.damagesource;
 
+import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
+import it.unimi.dsi.fastutil.objects.ReferenceLists;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.chat.Component;
 import net.minecraft.tags.BlockTags;
@@ -13,12 +15,11 @@ import net.minecraft.world.level.block.state.BlockState;
 import javax.annotation.Nullable;
 import java.util.List;
 import java.util.Optional;
-import java.util.concurrent.CopyOnWriteArrayList;
 
 public class CombatTracker {
     public static final int RESET_DAMAGE_STATUS_TIME = 100;
     public static final int RESET_COMBAT_STATUS_TIME = 300;
-    private final List<CombatEntry> entries = new CopyOnWriteArrayList<>();
+    private final List<CombatEntry> entries = ReferenceLists.synchronize(new ReferenceArrayList<>());
     private final LivingEntity mob;
     private int lastDamageTime;
     private int combatStartTime;
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 2af3781fd306d5bea3b2de91eb8931848e85f933..5877cf6c7573be5e9d908e1e59fd4830a71bf5b3 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -6,6 +6,7 @@ import com.mojang.logging.LogUtils;
 import io.papermc.paper.util.MCUtil;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
+import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
 import net.minecraft.*;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.CommandSource;
@@ -105,7 +106,6 @@ import org.slf4j.Logger;
 
 import javax.annotation.Nullable;
 import java.util.*;
-import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BiConsumer;
 import java.util.function.Predicate;
@@ -1314,7 +1314,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             return movement;
         }
 
-        final List<AABB> potentialCollisions = new CopyOnWriteArrayList<>();// io.papermc.paper.util.CachedLists.getTempCollisionList();
+        final List<AABB> potentialCollisions = new ReferenceArrayList<>();// io.papermc.paper.util.CachedLists.getTempCollisionList();
         try {
             final double stepHeight = this.maxUpStep;
             final AABB collisionBox;
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
index 0e20fa9118b02a9de76d280581396b2c97365086..9ab3dd153d7caaadc264caa60243a76cfa940f9d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
@@ -5,9 +5,7 @@ import com.google.common.collect.Streams;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import it.unimi.dsi.fastutil.objects.Object2IntMap;
-import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
-import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import it.unimi.dsi.fastutil.objects.*;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.Mth;
@@ -18,7 +16,6 @@ import net.minecraft.world.entity.player.Player;
 
 import javax.annotation.Nullable;
 import java.util.*;
-import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
@@ -52,7 +49,7 @@ public class AngerManagement {
 
     public AngerManagement(final Predicate<Entity> suspectPredicate, final List<Pair<UUID, Integer>> suspectUuidsToAngerLevel) {
         this.filter = suspectPredicate;
-        this.suspects = new CopyOnWriteArrayList<>();
+        this.suspects = ReferenceLists.synchronize(new ReferenceArrayList<>());
         this.suspectSorter = new AngerManagement.Sorter(this);
         this.angerBySuspect = new Object2IntOpenHashMap<>();
         this.angerByUuid = new Object2IntOpenHashMap<>(suspectUuidsToAngerLevel.size());
diff --git a/src/main/java/net/minecraft/world/level/gameevent/EuclideanGameEventDispatcher.java b/src/main/java/net/minecraft/world/level/gameevent/EuclideanGameEventDispatcher.java
index b6f66a255b3ae8a143d2d4f0875a08d5c64cd0d4..9a5208b5a9971d68f6e546f54f27afd51e12398c 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/EuclideanGameEventDispatcher.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/EuclideanGameEventDispatcher.java
@@ -1,5 +1,8 @@
 package net.minecraft.world.level.gameevent;
 
+import dev.twelveoclock.fastutil.set.impl.ConcurrentObjectOpenHashSet;
+import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
+import it.unimi.dsi.fastutil.objects.ReferenceLists;
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.phys.Vec3;
@@ -7,14 +10,12 @@ import net.minecraft.world.phys.Vec3;
 import java.util.List;
 import java.util.Optional;
 import java.util.Set;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.CopyOnWriteArraySet;
 import java.util.function.BiConsumer;
 
 public class EuclideanGameEventDispatcher implements GameEventDispatcher {
-    private final List<GameEventListener> listeners = new CopyOnWriteArrayList();
-    private final Set<GameEventListener> listenersToRemove = new CopyOnWriteArraySet<>();
-    private final List<GameEventListener> listenersToAdd = new CopyOnWriteArrayList<>();
+    private final List<GameEventListener> listeners = ReferenceLists.synchronize(new ReferenceArrayList<>());
+    private final Set<GameEventListener> listenersToRemove = new ConcurrentObjectOpenHashSet<>();
+    private final List<GameEventListener> listenersToAdd = ReferenceLists.synchronize(new ReferenceArrayList<>());
     private boolean processing;
     private final ServerLevel level;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
index 0af8acae80e634fb7f6472df5e5b440db16ecf05..d5af1b0c00f3275a68fca253722340874b7b7748 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
@@ -5,10 +5,6 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-import java.util.stream.Collectors;
 import net.minecraft.commands.arguments.blocks.BlockStateParser;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -37,6 +33,12 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.stream.Collectors;
+
 
 public class CraftBlockData implements BlockData {
 
@@ -146,7 +148,7 @@ public class CraftBlockData implements BlockData {
         return exactMatch;
     }
 
-    private static final Map<Class<? extends Enum<?>>, Enum<?>[]> ENUM_VALUES = new HashMap<>();
+    private static final Map<Class<? extends Enum<?>>, Enum<?>[]> ENUM_VALUES = new ConcurrentHashMap<>();
 
     /**
      * Convert an NMS Enum (usually a BlockStateEnum) to its appropriate Bukkit
