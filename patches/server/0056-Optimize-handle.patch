From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sun, 13 Nov 2022 08:48:06 -0600
Subject: [PATCH] Optimize handle


diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 3ece10be63be154e98a7ea67e7e4b7bba425f55d..48a75fff42bf9c86f30950f94a93d1cf0646a0ab 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -199,6 +199,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     protected final CraftServer server;
     protected Entity entity;
+    protected LivingEntity handle;
     private EntityDamageEvent lastDamageEvent;
     private final CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(CraftEntity.DATA_TYPE_REGISTRY);
     protected net.kyori.adventure.pointer.Pointers adventure$pointers; // Paper - implement pointers
@@ -206,6 +207,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public CraftEntity(final CraftServer server, final Entity entity) {
         this.server = server;
         this.entity = entity;
+        this.handle = entity instanceof LivingEntity ? (LivingEntity) entity : null;
     }
 
     public static @NotNull CraftEntity getEntity(CraftServer server, Entity entity) {
@@ -491,17 +493,17 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public double getHeight() {
-        return this.getHandle().getBbHeight();
+        return this.handle.getBbHeight();
     }
 
     @Override
     public double getWidth() {
-        return this.getHandle().getBbWidth();
+        return this.handle.getBbWidth();
     }
 
     @Override
     public @NotNull BoundingBox getBoundingBox() {
-        AABB bb = this.getHandle().getBoundingBox();
+        AABB bb = this.handle.getBoundingBox();
         return new BoundingBox(bb.minX, bb.minY, bb.minZ, bb.maxX, bb.maxY, bb.maxZ);
     }
 
@@ -635,34 +637,34 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public void setVisualFire(boolean fire) {
-        this.getHandle().hasVisualFire = fire;
+        this.handle.hasVisualFire = fire;
     }
 
     @Override
     public boolean isVisualFire() {
-        return this.getHandle().hasVisualFire;
+        return this.handle.hasVisualFire;
     }
 
     @Override
     public int getFreezeTicks() {
-        return this.getHandle().getTicksFrozen();
+        return this.handle.getTicksFrozen();
     }
 
     @Override
     public int getMaxFreezeTicks() {
-        return this.getHandle().getTicksRequiredToFreeze();
+        return this.handle.getTicksRequiredToFreeze();
     }
 
     @Override
     public void setFreezeTicks(int ticks) {
         Preconditions.checkArgument(0 <= ticks, "Ticks cannot be less than 0");
 
-        this.getHandle().setTicksFrozen(ticks);
+        this.handle.setTicksFrozen(ticks);
     }
 
     @Override
     public boolean isFrozen() {
-        return this.getHandle().isFullyFrozen();
+        return this.handle.isFullyFrozen();
     }
 
     // Paper Start - Freeze Tick Lock API
@@ -716,7 +718,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public org.bukkit.entity.Entity getPassenger() {
-        return this.isEmpty() ? null : this.getHandle().passengers.get(0).getBukkitEntity();
+        return this.isEmpty() ? null : this.handle.passengers.get(0).getBukkitEntity();
     }
 
     @Override
@@ -724,7 +726,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         Preconditions.checkArgument(!this.equals(passenger), "Entity cannot ride itself.");
         if (passenger instanceof CraftEntity) {
             this.eject();
-            return ((CraftEntity) passenger).getHandle().startRiding(this.getHandle());
+            return ((CraftEntity) passenger).handle.startRiding(this.handle);
         } else {
             return false;
         }
@@ -732,7 +734,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public @NotNull List<org.bukkit.entity.Entity> getPassengers() {
-        return Lists.newArrayList(Lists.transform(this.getHandle().passengers, new Function<Entity, org.bukkit.entity.Entity>() {
+        return Lists.newArrayList(Lists.transform(this.handle.passengers, new Function<Entity, org.bukkit.entity.Entity>() {
             @Override
             public org.bukkit.entity.@NotNull Entity apply(@NotNull Entity input) {
                 return input.getBukkitEntity();
@@ -745,20 +747,20 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         Preconditions.checkArgument(passenger != null, "passenger == null");
         Preconditions.checkArgument(!this.equals(passenger), "Entity cannot ride itself.");
 
-        return ((CraftEntity) passenger).getHandle().startRiding(this.getHandle(), true);
+        return ((CraftEntity) passenger).handle.startRiding(this.handle, true);
     }
 
     @Override
     public boolean removePassenger(org.bukkit.entity.@Nullable Entity passenger) {
         Preconditions.checkArgument(passenger != null, "passenger == null");
 
-        ((CraftEntity) passenger).getHandle().stopRiding();
+        ((CraftEntity) passenger).handle.stopRiding();
         return true;
     }
 
     @Override
     public boolean isEmpty() {
-        return !this.getHandle().isVehicle();
+        return !this.handle.isVehicle();
     }
 
     @Override
@@ -767,18 +769,18 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             return false;
         }
 
-        this.getHandle().ejectPassengers();
+        this.handle.ejectPassengers();
         return true;
     }
 
     @Override
     public float getFallDistance() {
-        return this.getHandle().fallDistance;
+        return this.handle.fallDistance;
     }
 
     @Override
     public void setFallDistance(float distance) {
-        this.getHandle().fallDistance = distance;
+        this.handle.fallDistance = distance;
     }
 
     @Override
@@ -793,12 +795,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public @NotNull UUID getUniqueId() {
-        return this.getHandle().getUUID();
+        return this.handle.getUUID();
     }
 
     @Override
     public int getTicksLived() {
-        return this.getHandle().tickCount;
+        return this.handle.tickCount;
     }
 
     @Override
@@ -806,11 +808,11 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         if (value <= 0) {
             throw new IllegalArgumentException("Age must be at least 1 tick");
         }
-        this.getHandle().tickCount = value;
+        this.handle.tickCount = value;
     }
 
     public Entity getHandle() {
-        return this.entity;
+        return this.handle;
     }
 
     @Override
@@ -819,23 +821,23 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         Preconditions.checkState(!entity.generation, "Cannot play effect during world generation");
 
         if (type.getApplicable().isInstance(this)) {
-            this.getHandle().level.broadcastEntityEvent(this.getHandle(), type.getData());
+            this.handle.level.broadcastEntityEvent(this.handle, type.getData());
         }
     }
 
     @Override
     public @NotNull Sound getSwimSound() {
-        return CraftSound.getBukkit(this.getHandle().getSwimSound0());
+        return CraftSound.getBukkit(this.handle.getSwimSound0());
     }
 
     @Override
     public @NotNull Sound getSwimSplashSound() {
-        return CraftSound.getBukkit(this.getHandle().getSwimSplashSound0());
+        return CraftSound.getBukkit(this.handle.getSwimSplashSound0());
     }
 
     @Override
     public @NotNull Sound getSwimHighSpeedSplashSound() {
-        return CraftSound.getBukkit(this.getHandle().getSwimHighSpeedSplashSound0());
+        return CraftSound.getBukkit(this.handle.getSwimHighSpeedSplashSound0());
     }
 
     public void setHandle(final Entity entity) {
@@ -856,7 +858,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             return false;
         }
         final CraftEntity other = (CraftEntity) obj;
-        return (this.getHandle() == other.getHandle()); // Paper - while logically the same, this is clearer
+        return (this.handle == other.handle); // Paper - while logically the same, this is clearer
     }
 
     // Paper - Fix hashCode. entity ID's are not static.
@@ -889,7 +891,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public boolean isInsideVehicle() {
-        return this.getHandle().isPassenger();
+        return this.handle.isPassenger();
     }
 
     @Override
@@ -898,7 +900,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             return false;
         }
 
-        this.getHandle().stopRiding();
+        this.handle.stopRiding();
         return true;
     }
 
@@ -908,19 +910,19 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             return null;
         }
 
-        return this.getHandle().getVehicle().getBukkitEntity();
+        return this.handle.getVehicle().getBukkitEntity();
     }
 
     // Paper start
     @Override
     public net.kyori.adventure.text.Component customName() {
-        final Component name = this.getHandle().getCustomName();
+        final Component name = this.handle.getCustomName();
         return name != null ? io.papermc.paper.adventure.PaperAdventure.asAdventure(name) : null;
     }
 
     @Override
     public void customName(final net.kyori.adventure.text.@Nullable Component customName) {
-        this.getHandle().setCustomName(customName != null ? io.papermc.paper.adventure.PaperAdventure.asVanilla(customName) : null);
+        this.handle.setCustomName(customName != null ? io.papermc.paper.adventure.PaperAdventure.asVanilla(customName) : null);
     }
 
     @Override
@@ -944,12 +946,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             name = name.substring(0, 256);
         }
 
-        this.getHandle().setCustomName(CraftChatMessage.fromStringOrNull(name));
+        this.handle.setCustomName(CraftChatMessage.fromStringOrNull(name));
     }
 
     @Override
     public String getCustomName() {
-        Component name = this.getHandle().getCustomName();
+        Component name = this.handle.getCustomName();
 
         if (name == null) {
             return null;
@@ -960,12 +962,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public void setCustomNameVisible(boolean flag) {
-        this.getHandle().setCustomNameVisible(flag);
+        this.handle.setCustomNameVisible(flag);
     }
 
     @Override
     public boolean isCustomNameVisible() {
-        return this.getHandle().isCustomNameVisible();
+        return this.handle.isCustomNameVisible();
     }
 
     @Override
@@ -990,17 +992,17 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public @NotNull String getName() {
-        return CraftChatMessage.fromComponent(this.getHandle().getName());
+        return CraftChatMessage.fromComponent(this.handle.getName());
     }
     // Paper start
     @Override
     public net.kyori.adventure.text.@org.jetbrains.annotations.NotNull Component name() {
-        return io.papermc.paper.adventure.PaperAdventure.asAdventure(this.getHandle().getName());
+        return io.papermc.paper.adventure.PaperAdventure.asAdventure(this.handle.getName());
     }
 
     @Override
     public net.kyori.adventure.text.@org.jetbrains.annotations.NotNull Component teamDisplayName() {
-        return io.papermc.paper.adventure.PaperAdventure.asAdventure(this.getHandle().getDisplayName());
+        return io.papermc.paper.adventure.PaperAdventure.asAdventure(this.handle.getDisplayName());
     }
     // Paper end
 
@@ -1071,78 +1073,78 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public void setGlowing(boolean flag) {
-        this.getHandle().setGlowingTag(flag);
+        this.handle.setGlowingTag(flag);
     }
 
     @Override
     public boolean isGlowing() {
-        return this.getHandle().isCurrentlyGlowing();
+        return this.handle.isCurrentlyGlowing();
     }
 
     @Override
     public void setInvulnerable(boolean flag) {
-        this.getHandle().setInvulnerable(flag);
+        this.handle.setInvulnerable(flag);
     }
 
     @Override
     public boolean isInvulnerable() {
-        return this.getHandle().isInvulnerableTo(DamageSource.GENERIC);
+        return this.handle.isInvulnerableTo(DamageSource.GENERIC);
     }
 
     @Override
     public boolean isSilent() {
-        return this.getHandle().isSilent();
+        return this.handle.isSilent();
     }
 
     @Override
     public void setSilent(boolean flag) {
-        this.getHandle().setSilent(flag);
+        this.handle.setSilent(flag);
     }
 
     @Override
     public boolean hasGravity() {
-        return !this.getHandle().isNoGravity();
+        return !this.handle.isNoGravity();
     }
 
     @Override
     public void setGravity(boolean gravity) {
-        this.getHandle().setNoGravity(!gravity);
+        this.handle.setNoGravity(!gravity);
     }
 
     @Override
     public int getPortalCooldown() {
-        return this.getHandle().portalCooldown;
+        return this.handle.portalCooldown;
     }
 
     @Override
     public void setPortalCooldown(int cooldown) {
-        this.getHandle().portalCooldown = cooldown;
+        this.handle.portalCooldown = cooldown;
     }
 
     @Override
     public @NotNull Set<String> getScoreboardTags() {
-        return this.getHandle().getTags();
+        return this.handle.getTags();
     }
 
     @Override
     public boolean addScoreboardTag(@NotNull String tag) {
-        return this.getHandle().addTag(tag);
+        return this.handle.addTag(tag);
     }
 
     @Override
     public boolean removeScoreboardTag(@NotNull String tag) {
-        return this.getHandle().removeTag(tag);
+        return this.handle.removeTag(tag);
     }
 
     @Override
     public @NotNull PistonMoveReaction getPistonMoveReaction() {
-        return PistonMoveReaction.getById(this.getHandle().getPistonPushReaction().ordinal());
+        return PistonMoveReaction.getById(this.handle.getPistonPushReaction().ordinal());
     }
 
     @Override
     public @NotNull BlockFace getFacing() {
         // Use this method over getDirection because it handles boats and minecarts.
-        return CraftBlock.notchToBlockFace(this.getHandle().getMotionDirection());
+        return CraftBlock.notchToBlockFace(this.handle.getMotionDirection());
     }
 
     @Override
@@ -1152,12 +1154,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public @NotNull Pose getPose() {
-        return Pose.values()[this.getHandle().getPose().ordinal()];
+        return Pose.values()[this.handle.getPose().ordinal()];
     }
 
     @Override
     public @NotNull SpawnCategory getSpawnCategory() {
-        return CraftSpawnCategory.toBukkit(this.getHandle().getType().getCategory());
+        return CraftSpawnCategory.toBukkit(this.handle.getType().getCategory());
     }
 
     public void storeBukkitValues(@NotNull CompoundTag c) {
@@ -1176,15 +1178,15 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     protected @NotNull CompoundTag save() {
         CompoundTag nbttagcompound = new CompoundTag();
 
-        nbttagcompound.putString("id", this.getHandle().getEncodeId());
-        this.getHandle().saveWithoutId(nbttagcompound);
+        nbttagcompound.putString("id", this.handle.getEncodeId());
+        this.handle.saveWithoutId(nbttagcompound);
 
         return nbttagcompound;
     }
 
     // re-sends the spawn entity packet to updated values which cannot be updated otherwise
     protected void update() {
-        if (!this.getHandle().isAlive()) {
+        if (!this.handle.isAlive()) {
             return;
         }
 
@@ -1195,7 +1197,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             return;
         }
 
-        entityTracker.broadcast(this.getHandle().getAddEntityPacket());
+        entityTracker.broadcast(this.handle.getAddEntityPacket());
     }
 
     private static @NotNull PermissibleBase getPermissibleBase() {
@@ -1257,7 +1259,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         net.minecraft.server.level.ServerLevel world = ((CraftWorld)locationClone.getWorld()).getHandle();
         java.util.concurrent.CompletableFuture<Boolean> ret = new java.util.concurrent.CompletableFuture<>();
 
-        world.loadChunksForMoveAsync(getHandle().getBoundingBoxAt(locationClone.getX(), locationClone.getY(), locationClone.getZ()),
+        world.loadChunksForMoveAsync(handle.getBoundingBoxAt(locationClone.getX(), locationClone.getY(), locationClone.getZ()),
             this instanceof CraftPlayer ? ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.HIGHER : ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.NORMAL, (list) -> {
             net.minecraft.server.level.ServerChunkCache chunkProviderServer = world.getChunkSource();
             for (net.minecraft.world.level.chunk.ChunkAccess chunk : list) {
@@ -1281,13 +1283,13 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public Location getOrigin() {
-        Vector originVector = this.getHandle().getOriginVector();
+        Vector originVector = this.handle.getOriginVector();
         if (originVector == null) {
             return null;
         }
         World world = this.getWorld();
-        if (this.getHandle().getOriginWorld() != null) {
-            world = org.bukkit.Bukkit.getWorld(this.getHandle().getOriginWorld());
+        if (this.handle.getOriginWorld() != null) {
+            world = org.bukkit.Bukkit.getWorld(this.handle.getOriginWorld());
         }
 
         //noinspection ConstantConditions
@@ -1296,52 +1298,52 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public boolean fromMobSpawner() {
-        return getHandle().spawnedViaMobSpawner;
+        return handle.spawnedViaMobSpawner;
     }
 
     @Override
     public org.bukkit.event.entity.CreatureSpawnEvent.@NotNull SpawnReason getEntitySpawnReason() {
-        return getHandle().spawnReason;
+        return handle.spawnReason;
     }
 
     @Override
     public boolean isUnderWater() {
-        return getHandle().isUnderWater();
+        return handle.isUnderWater();
     }
 
     @Override
     public boolean isInRain() {
-        return getHandle().isInRain();
+        return handle.isInRain();
     }
 
     @Override
     public boolean isInBubbleColumn() {
-        return getHandle().isInBubbleColumn();
+        return handle.isInBubbleColumn();
     }
 
     @Override
     public boolean isInWaterOrRain() {
-        return getHandle().isInWaterOrRain();
+        return handle.isInWaterOrRain();
     }
 
     @Override
     public boolean isInWaterOrBubbleColumn() {
-        return getHandle().isInWaterOrBubble();
+        return handle.isInWaterOrBubble();
     }
 
     @Override
     public boolean isInWaterOrRainOrBubbleColumn() {
-        return getHandle().isInWaterRainOrBubble();
+        return handle.isInWaterRainOrBubble();
     }
 
     @Override
     public boolean isInLava() {
-        return getHandle().isInLava();
+        return handle.isInLava();
     }
 
     @Override
     public boolean isTicking() {
-        return getHandle().isTicking();
+        return handle.isTicking();
     }
 
     @Override
@@ -1369,22 +1371,22 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public boolean isInPowderedSnow() {
-        return getHandle().isInPowderSnow || getHandle().wasInPowderSnow; // depending on the location in the entity "tick" either could be needed.
+        return handle.isInPowderSnow || handle.wasInPowderSnow; // depending on the location in the entity "tick" either could be needed.
     }
     // Paper end
     // Paper Start - Collision API
     @Override
     public boolean collidesAt(@org.jetbrains.annotations.NotNull Location location) {
-        net.minecraft.world.phys.AABB aabb = this.getHandle().getBoundingBoxAt(location.getX(), location.getY(), location.getZ());
+        net.minecraft.world.phys.AABB aabb = this.handle.getBoundingBoxAt(location.getX(), location.getY(), location.getZ());
 
-        return !this.getHandle().level.noCollision(this.getHandle(), aabb);
+        return !this.handle.level.noCollision(this.handle, aabb);
     }
 
     @Override
     public boolean wouldCollideUsing(@org.jetbrains.annotations.NotNull BoundingBox boundingBox) {
         net.minecraft.world.phys.AABB aabb = new AABB(boundingBox.getMinX(), boundingBox.getMinY(), boundingBox.getMinZ(), boundingBox.getMaxX(), boundingBox.getMaxY(), boundingBox.getMaxZ(), false);
 
-        return !this.getHandle().level.noCollision(this.getHandle(), aabb);
+        return !this.handle.level.noCollision(this.handle, aabb);
     }
     // Paper End - Collision API
 }
