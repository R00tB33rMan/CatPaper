From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Tue, 15 Nov 2022 02:55:35 -0600
Subject: [PATCH] Fix crashes


diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
index b8849248a7398f25894ef215aa250a2c7f714950..e4fa22810530cfaec6c709a3e604c2b96a8373a2 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
@@ -385,9 +385,9 @@ public final class ChunkTaskScheduler {
     public void scheduleChunkLoad(final int chunkX, final int chunkZ, final @NotNull ChunkStatus toStatus, final boolean addTicket,
                                   final PrioritisedExecutor.@NotNull Priority priority, final @Nullable Consumer<ChunkAccess> onComplete) {
         if (!TickThread.isTickThread()) {
-            this.scheduleChunkTask(chunkX, chunkZ, () -> {
-                ChunkTaskScheduler.this.scheduleChunkLoad(chunkX, chunkZ, toStatus, addTicket, priority, onComplete);
-            }, priority);
+            //this.scheduleChunkTask(chunkX, chunkZ, () -> {
+            ChunkTaskScheduler.this.scheduleChunkLoad(chunkX, chunkZ, toStatus, addTicket, priority, onComplete);
+            //}, priority);
             return;
         }
         if (this.chunkHolderManager.ticketLock.isHeldByCurrentThread()) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/NearestLivingEntitySensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/NearestLivingEntitySensor.java
index c101673a974f2fcfe25d232b2a17fbd2e00de046..f0b55ea87e9df9407c4f762dff05b8d69858d769 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/NearestLivingEntitySensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/NearestLivingEntitySensor.java
@@ -14,10 +14,16 @@ import net.minecraft.world.phys.AABB;
 public class NearestLivingEntitySensor<T extends LivingEntity> extends Sensor<T> {
     @Override
     protected void doTick(ServerLevel world, T entity) {
+
+        if (entity == null) {
+            return;
+        }
+
         AABB aABB = entity.getBoundingBox().inflate(this.radiusXZ(), this.radiusY(), this.radiusXZ());
         List<LivingEntity> list = world.getEntitiesOfClass(LivingEntity.class, aABB, (e) -> {
             return e != entity && e.isAlive();
         });
+
         list.sort(Comparator.comparingDouble(entity::distanceToSqr));
         Brain<?> brain = entity.getBrain();
         brain.setMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES, list);
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
index 08b5315b8328aba1b5f2ae70b5f606c3d5fdcdd5..b021ab60e464206c8ead56f0a9adf929f91b06ef 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -350,6 +350,11 @@ public class WalkNodeEvaluator extends NodeEvaluator {
 
     @Override
     public BlockPathTypes getBlockPathType(BlockGetter world, int x, int y, int z, Mob mob, int sizeX, int sizeY, int sizeZ, boolean canOpenDoors, boolean canEnterOpenDoors) {
+
+        if (mob == null) {
+            return BlockPathTypes.BLOCKED;
+        }
+
         EnumSet<BlockPathTypes> enumSet = EnumSet.noneOf(BlockPathTypes.class);
         BlockPathTypes blockPathTypes = BlockPathTypes.BLOCKED;
         BlockPos blockPos = mob.blockPosition();
