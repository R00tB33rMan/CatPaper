From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Tue, 15 Nov 2022 01:07:57 -0600
Subject: [PATCH] Fix crashes


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index e6dbd404b3f34ed16b6138bcdae98971f1fe0b01..c352e40f4bf36070c4697e91d6400dc62243a997 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -33,6 +33,7 @@ import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.*;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -197,7 +198,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     protected final Raids raids;
     private final ObjectLinkedOpenHashSet<BlockEventData> blockEvents;
     private final List<BlockEventData> blockEventsToReschedule;
-    private List<GameEvent.Message> gameEventMessages;
+    private AtomicReference<ConcurrentLinkedDeque<GameEvent.Message>> gameEventMessages;
     private boolean handlingTick;
     private final List<CustomSpawner> customSpawners;
     @Nullable
@@ -531,7 +532,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         this.navigatingMobs = new CopyOnWriteArraySet<>();
         this.blockEvents = new ObjectLinkedOpenHashSet();
         this.blockEventsToReschedule = new ArrayList(64);
-        this.gameEventMessages = new ArrayList();
+        this.gameEventMessages = new AtomicReference<>(new ConcurrentLinkedDeque<>());
         this.dragonParts = new Int2ObjectOpenHashMap();
         this.tickTime = flag1;
         this.server = minecraftserver;
@@ -1643,7 +1644,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 if (chunk != null) {
                     for (int j2 = k; j2 <= j1; ++j2) {
                         flag |= chunk.getEventDispatcher(j2).walkListeners(event, emitterPos, emitter, (gameeventlistener, vec3d1) -> {
-                            (gameeventlistener.handleEventsImmediately() ? list : this.gameEventMessages).add(new GameEvent.Message(event, emitterPos, emitter, gameeventlistener, vec3d1));
+                            if (gameeventlistener.handleEventsImmediately()) {
+                                list.add(new GameEvent.Message(event, emitterPos, emitter, gameeventlistener, vec3d1));
+                            }
+                            else {
+                                this.gameEventMessages.get().add(new GameEvent.Message(event, emitterPos, emitter, gameeventlistener, vec3d1));
+                            }
                         });
                     }
                 }
@@ -1661,11 +1667,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     private void sendGameEvents() {
-        if (!this.gameEventMessages.isEmpty()) {
-            List<GameEvent.Message> list = this.gameEventMessages;
 
-            this.gameEventMessages = new ArrayList();
-            this.handleGameEventMessagesInQueue(list);
+        final ConcurrentLinkedDeque<GameEvent.Message> messages = this.gameEventMessages.get();
+
+        if (!messages.isEmpty()) {
+            this.gameEventMessages = new AtomicReference<>(new ConcurrentLinkedDeque<>());
+            this.handleGameEventMessagesInQueue(messages.stream().toList());
         }
     }
 
